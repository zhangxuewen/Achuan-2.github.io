<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【生信资源与实践】第六次上机-Protein Domain&amp;Enrichment Analysis</title>
      <link href="posts/12ee.html"/>
      <url>posts/12ee.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、熟悉UniProt"><a href="#一、熟悉UniProt" class="headerlink" title="一、熟悉UniProt"></a>一、熟悉UniProt</h2><p>地址：<a href="http://www.uniprot.org/">http://www.uniprot.org/</a></p><p>Uniprot （Universal Protein ）是包含蛋白质序列，功能信息，研究论文索引的蛋白质数据库，整合了包括EBI（ European Bioinformatics Institute），SIB（the Swiss Institute of Bioinformatics），PIR（Protein Information Resource）三大数据库的资源。</p><blockquote><p>EBI（ European Bioinformatics Institute）：欧洲生物信息学研究所（EMBL-EBI）是欧洲生命科学旗舰实验室EMBL的一部分。位于英国剑桥欣克斯顿的惠康基因组校园内，是世界上基因组学领域最强的地带之一。</p><p>SIB（the Swiss Institute of Bioinformatics）：瑞士日内瓦的SIB维护着ExPASy（专家蛋白质分析系统）服务器，这里包含有蛋白质组学工具和数据库的主要资源。</p><p>PIR（Protein Information Resource）：PIR由美国国家生物医学研究基金会（NBRF）于1984年成立，旨在协助研究人员识别和解释蛋白质序列信息。</p></blockquote><p><strong>UniProt 主要数据库</strong></p><table><thead><tr><th>数据库名</th><th>用途</th></tr></thead><tbody><tr><td>UniProtKB/Swiss-Prot</td><td>高质量的、手工注释的、非冗余的数据库</td></tr><tr><td>UniProtKB/TrEMBL</td><td>自动翻译蛋白质序列，预测序列，未验证的数据库</td></tr><tr><td>UniParc</td><td>非冗余蛋白质序列数据库</td></tr><tr><td>UniRef</td><td>聚类序列减小数据库，加快搜索的速度</td></tr><tr><td>Proteomes</td><td>为全测序基因组物种提供蛋白质组信息</td></tr></tbody></table><ul><li> Swiss-Prot是一个蛋白质数据库，其中收录的数据是完全人工注释的蛋白数据，诸如蛋白质的功能等信息都是经过了科学家验证的，有60个数据库的交叉引用信息；</li><li>TrEMBL则是Swiss-Prot的补充，意味Translation of EMBL，从EMBL的cDNA序列翻译而来，相比于Swiss-Prot数据库，TrEMBL收录的是未经人工注释的编码DNA序列翻译数据、人造蛋白序列、专利序列、T细胞受体家族、免疫球蛋白家族蛋白序列，还有小于8个氨基酸的多肽等。</li></ul><p>几个数据库的关系如下：</p><p><img src="https://i.loli.net/2020/12/25/ELxVFkcb1dOD9YS.png"></p><h3 id="1-1-获得Uniprot数据统计"><a href="#1-1-获得Uniprot数据统计" class="headerlink" title="1.1 获得Uniprot数据统计"></a>1.1 获得Uniprot数据统计</h3><p>两个数据库的数据统计：Swiss-Prot(563552) vs TrEMBL(195104019)</p><img src="https://i.loli.net/2020/12/25/CHG8Mnm5OjkvgEU.png" style="zoom:50%;"><p>每个物种的序列数目统计, 可以直接看到人类的蛋白质序列有192814个</p><img src="https://i.loli.net/2020/12/25/Q4EXh98wAzvHBTS.png" style="zoom:50%;"><h3 id="1-2-UniRef"><a href="#1-2-UniRef" class="headerlink" title="1.2 UniRef"></a>1.2 UniRef</h3><p><a href="https://www.uniprot.org/help/uniref">UniRef (uniprot.org)</a></p><p>UniRef（UniProt参考资料库）对来自UniProtKB的各种数据包括各种剪接变异体进行了分类汇总，还从UniParc中选取了一些数据以求能完整的、没有遗漏的收录所有数据，同时也保证没有冗余数据。可以通过序列同一性对最相近的序列进行合并，加快搜索速度。</p><p>UniRef100序列来自任何生物体的11个或更多残基的相同序列和序列片段合并到一个UniRef条目中，用于显示代表性蛋白质的序列。 使用 MMseqs2 算法对UniRef100序列进行聚类，并构建UniRef90，再从UniRef90构建UniRef50。</p><p>UniRef90和UniRef50的数据库大小分别减少了约58%和79%，序列相似度搜索速度显著加快。</p><p>点击<kbd>Download</kbd>可以下载所选择序列的format文件</p><img src="https://i.loli.net/2020/12/25/C68dYtwfz1RElTg.png" style="zoom:50%;"><h3 id="1-3-UniProt-Proteomes"><a href="#1-3-UniProt-Proteomes" class="headerlink" title="1.3  UniProt Proteomes"></a>1.3  UniProt Proteomes</h3><p>蛋白质组是由生物体表达的所有蛋白质。UniProt为具有完全测序基因组的物种提供蛋白质组方面的信息。</p><img src="https://i.loli.net/2020/12/25/BvQqZPfC18oeXHp.png" style="zoom: 33%;"><h3 id="1-4-了解UniProt注释信息"><a href="#1-4-了解UniProt注释信息" class="headerlink" title="1.4 了解UniProt注释信息"></a>1.4 了解UniProt注释信息</h3><ul><li>Search “atpase AND human”进入<a href="https://www.uniprot.org/uniprot/P00846">P00846</a>查看UniProt的所有注释信息</li></ul><p>蛋白全称：ATP synthase subunit a</p><p>Gene：MT-ATP6</p><p>Function： 详细的说明了这个蛋白质的功能，线粒体膜ATP合酶，具有质子跨膜转运活性，在呼吸作用过程中通过电子传递链释放的能量先转换为跨膜质子(H+)梯差，之后质子流顺质子梯差通过ATP合酶可以使ADP+Pi合成ATP。</p><p>Names &amp; Taxonomy：可以更详细知道蛋白质和基因别名，所属的物种和蛋白组，还展示了该蛋白和编码基因在EuPathDB、HGNC、MIM、neXtPtot数据库的ID和链接</p><p>Subcellular location：提供蛋白质亚细胞定位的信息物种以及该物种的分类学谱系等。</p><p>Pathology &amp; Biotech：病理学与生物技术，提供蛋白质突变或缺失导致的疾病及表型信息。</p><p>PTM / Processing：提供蛋白质翻译后修饰或翻译后加工的相关信息。</p><p>Expression：提供了基因在 mRNA 水平上的表达信息、蛋白质水平上 的表达信息</p><p>Interaction：提供了蛋白质之间相互作用的信息。</p><p>Structure：提供蛋白质二级结构和三级结构信息，但该蛋白无此项，因为只有那些已通过实验方法测定三级结构并且已提交到蛋白质结构数据库 PDB 的蛋白质才有结构注释。）</p><p>Family &amp; Domains：提供蛋白质家族及结构域信息。</p><p>Sequence：提供蛋白质氨基酸序列信息。含有多个异构体的蛋白质会显示多条序列。</p><p>Similar Proteins：在 UniRef 数据库里找到与该蛋白质在序列水平上相似的其他蛋白质，并按相似度高低分组。</p><p>Cross-references：列出了所有通往其他含有该蛋白质信息的数据库的链接。</p><p>Entry information：提供有关这条数据库记录的录入信息，外加一个免责声明。</p><p>Miscellaneous：杂项，包含任何无法归入前几项的内容。</p><img src="https://i.loli.net/2020/12/25/DTfzJHCFXcKQwtn.png" style="zoom:33%;"><h2 id="二、熟悉Pfam，InterPro"><a href="#二、熟悉Pfam，InterPro" class="headerlink" title="二、熟悉Pfam，InterPro"></a>二、熟悉Pfam，InterPro</h2><h3 id="2-1-熟悉Pfam和InterPro数据库内容，了解其异同，查看Pfam中domain的HMM-model文件"><a href="#2-1-熟悉Pfam和InterPro数据库内容，了解其异同，查看Pfam中domain的HMM-model文件" class="headerlink" title="2.1 熟悉Pfam和InterPro数据库内容，了解其异同，查看Pfam中domain的HMM  model文件"></a>2.1 熟悉Pfam和InterPro数据库内容，了解其异同，查看Pfam中domain的HMM  model文件</h3><h4 id="2-1-1-Pfam"><a href="#2-1-1-Pfam" class="headerlink" title="2.1.1 Pfam"></a>2.1.1 Pfam</h4><p> Pfam提供蛋白质家族和结构域的完整准确的分类，被广泛用于查询蛋白家族或蛋白结构域的注释，结构及其多序列比对信息。在该数据库中，每个蛋白家族由多个序列比对和HMMs（hidden Markovmodels，隐马尔可夫模型）所体现。是欧洲生物信息研究所（EMBL-EBI）旗下的数据库。</p><p>①<strong>Pfam将蛋白质家族被分为质量高低的两类</strong>：Pfam-A和Pfam-B。</p><ol><li><p> Pfam-A来自基础序列数据库Pfamseq，是根据最新的UniProtKB数据库建立，质量较高</p></li><li><p> Pfam-B做为Pfam-A的补充，是一个未注释的低质量数据库，一般是由ADDA数据中的非冗余cluster自动生成的。虽然质量较低，但对于鉴定Pfam-A无法覆盖到的功能保守区域也是非常有用的。</p></li></ol><p>②<strong>pfam数据库常用的三种功能：</strong></p><ol><li>SEQUENCE SEARCH</li></ol><p>如果你有一条蛋白质序列，想知道这条蛋白质序列上有哪些结构域，可以用这个入口快速找到结构域信息：点击-&gt;SEQUENCE SEARCH-&gt;输入序列-&gt;GO</p><ol start="2"><li>KEYWORD SEARCH</li></ol><p>如果你知道你要研究的基因家族相关功能关键字，或者名称等等信息，想知道在pfam数据库当中，是否存在这个家族的pfam号。这时候可以使用keyword search这个功能，快速找到pfam数据库中是否有收录这个家族的的pfam号，然后就可以下载hmm模型文件，查看motif等信息，用于后续研究。</p><ol start="3"><li>JUMP TO</li></ol><p>当你通过读文献阅读，知道某个家族的Pfam号的时候，就可以通过这个功能，快速的找到相应家族的信息。</p><p>③<strong>Pfam的搜索结果内容</strong></p><p>1）Family：蛋白家族名称；</p><p>2）Description：蛋白家族描述；</p><p>3）Entry type：类型；</p><p>4）Clan：宗族（根据序列，结构，功能和HMM比较的相似度将多个蛋白家族整合为宗族），2005年首次将Clan引入Pfam；</p><p>5）Envelope (From To)：比对到的蛋白序列（the region on the sequence over which the match lies）；</p><p>6）Alignment（Start End）：高置信度的比对蛋白序列（the region over which the alignment confidence is high）；</p><p>7）HMM （From To）：比对到结构域区域；</p><p>8）HMM length：Pfam结构域的长度；</p><p>9）Bit Score：比对打分；</p><p>10）E-value：比对的E值(pfam结构域筛选阈值为: E-value &lt; 0.001)；</p><p>11）Predicted active sites：预测的活性位点。</p><p>点击show/hide alignment会显示</p><p>#HMM: 与查询序列相同的残基显示为浅蓝色，与查询序列类似标记为深蓝色；</p><p>#PP：每个氨基酸残基位点比对的后验概率（posterior probability），PP越高表示在HMM图谱中该位点比对的置信度越高；</p><p>#SEQ：蛋白序列标记原则同#HMM。   </p><p><strong>④</strong>从Pfam中下载HMMmodel</p><p>使用keyword search，例如搜索ATPase，然后选择一条ID，查看Alignment，选择Format an alignment，下载Stockholm文件，之后可以使用HMMbuild软件建立HMM模型；</p><img src="https://i.loli.net/2020/12/25/9BnQliespGLg1fC.png" style="zoom: 33%;"><img src="https://i.loli.net/2020/12/25/goCwsMQRe7YnbZN.png" style="zoom: 67%;"><h4 id="2-1-2-InterPro"><a href="#2-1-2-InterPro" class="headerlink" title="2.1.2 InterPro"></a>2.1.2 InterPro</h4><p>InterPro Quick tour <a href="https://www.ebi.ac.uk/training-beta/online/courses/interpro-quick-tour/what-is-interpro/">https://www.ebi.ac.uk/training-beta/online/courses/interpro-quick-tour/what-is-interpro/</a></p><p> InterPro Documentation <a href="https://interpro-documentation.readthedocs.io/en/latest/index.html">https://interpro-documentation.readthedocs.io/en/latest/index.html</a></p><p>通过整合多个蛋白相关数据库，提供了一个方便的对蛋白序列进行功能注释的平台，包括对蛋白质家族、结构域、功能位点的预测. </p><p>为了将蛋白分类，InterPro使用先验模型，整合了不同的数据库形成一个整体, interoro 在整合多个数据库的同时，去掉了冗余，提供了一个统一的接口，用来对序列进行功能注释；而且还提供了interproscan 这样的命令行工具，可以方便的对大规模的蛋白序列进行注释</p><p><img src="https://i.loli.net/2020/12/25/flXC7Brb5JogE6i.png"></p><p>Unintegrated代表的来自不是Interpro成员数据库的预测,但可能可以提供其他信息的domain</p><h4 id="2-1-3-Pfam和InterPro的异同"><a href="#2-1-3-Pfam和InterPro的异同" class="headerlink" title="2.1.3 Pfam和InterPro的异同"></a>2.1.3 Pfam和InterPro的异同</h4><p>同:</p><p>​    这两个都是蛋白质数据库，包含大量的蛋白质结构域和家族数据,都可以对蛋白质进行功能域预测</p><p>异:</p><ul><li>InterPro有13个成员数据库，每个数据库都使用不同的方法对蛋白质进行分类,其中包括Pfam, 因此Interpro可以查询到更多注释</li><li>InterPro可以提供Go Term</li></ul><h3 id="2-2-从UniProt下载1条bZIP的蛋白质序列分别在上述两者网站上预测功能结构域"><a href="#2-2-从UniProt下载1条bZIP的蛋白质序列分别在上述两者网站上预测功能结构域" class="headerlink" title="2.2 从UniProt下载1条bZIP的蛋白质序列分别在上述两者网站上预测功能结构域"></a>2.2 从UniProt下载1条bZIP的蛋白质序列分别在上述两者网站上预测功能结构域</h3><p>在UniProt键入搜索bZIP, 选择<a href="https://www.uniprot.org/uniprot/Q6ZLB0">Q6ZLB0</a>,其fasta序列如下</p><pre><code>&gt;sp|Q6ZLB0|RSBZ1_ORYSJ bZIP transcription factor RISBZ1 OS=Oryza sativa subsp. japonica OX=39947 GN=RISBZ1 PE=1 SV=1MEHVFAVDEIPDPLWAPPPPVQPAAAAGVDDVGAVSGGGLLERCPSGWNLERFLEELDGVPAPAASPDGAAIYPSPMPAAAAEAAARWSRGYGDREAVGVMPMPAAALPAAPASAAMDPVEYNAMLKRKLDEDLATVAMWRASGAIHSESPLGNKTSLSIVGSILSSQKCIEGNGILVQTKLSPGPNGGSGPYVNQNTDAHAKQATSGSSREPSPSEDDDMEGDAEAMGNMILDEEDKVKKRKESNRESARRSRSRKAARLKDLEEQVSLLRVENSSLLRRLADANQKYSAAAIDNRVLMADIEALRAKVRMAEESVKMVTGARQLHQAIPDMQSPLNVNSDASVPIQNNNPMNYFSNANNAGVNSFMHQVSPAFQIVDSVEKIDPTDPVQLQQQQMASLQHLQNRACGGGASSNEYTAWGSSLMDANELVNMELQ</code></pre><p><strong>在Pfam预测功能结构域</strong></p><p><img src="https://i.loli.net/2020/12/25/aNPuCqwHVRWEADL.png"></p><p><strong>InterPro</strong></p><img src="https://i.loli.net/2020/12/25/SEfr46pYRok8qWg.png" style="zoom: 33%;"><img src="https://i.loli.net/2020/12/25/hsQUtyOwelLknY9.png" style="zoom:33%;"><h3 id="2-3-Linux下使用HMMER软件预测多个protein序列的domain，解析结果文件。"><a href="#2-3-Linux下使用HMMER软件预测多个protein序列的domain，解析结果文件。" class="headerlink" title="2.3 Linux下使用HMMER软件预测多个protein序列的domain，解析结果文件。"></a>2.3 Linux下使用HMMER软件预测多个protein序列的domain，解析结果文件。</h3><p>下载服务器的/tmp/目录下E2F.fas.txt和PF02319.hmm, 查看PF02319.hmm文件，这是该E2F domain的隐马尔科夫模型的表征文件</p><p>•查看HMMER软件有哪些程序<a href="https://www.msi.umn.edu/sw/hmmerphmmer">https://www.msi.umn.edu/sw/hmmerphmmer</a></p><table><thead><tr><th>programs</th><th>functions</th></tr></thead><tbody><tr><td>phmmer</td><td>根据序列数据库搜索序列</td></tr><tr><td>jackhmmer</td><td>根据序列数据库迭代搜索序列</td></tr><tr><td>hmmbuild</td><td>从输入多重对齐构建一个profile HMM</td></tr><tr><td>hmmsearch</td><td>将输入的HMM模型与蛋白质序列进行比对，返回与HMM模型比对成功的序列</td></tr><tr><td>hmmscan</td><td>用序列在profile HMM数据库搜索</td></tr><tr><td>hmmalign</td><td>将多个序列与 common profile HMM进行多重比对</td></tr><tr><td>hmmconvert</td><td>Convert profile formats to/from HMMER3 format.</td></tr><tr><td>hmmemit</td><td>从profile HMM生成序列</td></tr><tr><td>hmmfetch</td><td>从HMM数据库中按名称或序列号获取一个profile HMM</td></tr><tr><td>hmmpress</td><td>将HMM数据库格式化为hmmscan的二进制格式</td></tr><tr><td>hmmstat</td><td>显示HMM数据库中每个概要文件的摘要统计信息</td></tr></tbody></table><p>•使用HMMER软件预测E2F.fas.txt中哪些序列的哪些片段含有该PF02319 domain. </p><p>hmmscan和hmmsearch有何不同？分别使用</p><ol><li>hmmsearch</li></ol><pre class=" language-bash"><code class="language-bash"> hmmsearch PF02319.hmm E2F.fas.txt <span class="token operator">></span>hmmsearch.out</code></pre><p>使用<code>cat -n hmmsearch.out </code> 查看输出序列</p><p>hmmsearch将输入的HMM模型与蛋白质序列进行比对，返回与HMM模型比对成功的序列，一次query就包含所有符合的序列分析结果</p><p>.hmmout文件大体上可以分为三部分：开头的注释，中间的比对统计信息和后面详细的序列注释信息</p><img src="https://i.loli.net/2020/12/25/Ldf5ZI1HyrDQmvb.png" style="zoom: 33%;"><ol start="2"><li>hmmscan </li></ol><pre class=" language-bash"><code class="language-bash"> hmmpress PF02319.hmm hmmscan PF02319.hmm E2F.fas.txt <span class="token operator">></span> hmmscan.hmm.out</code></pre><p>hmmscan将输入的蛋白质序列与HMM结构域库进行比对，返回每个蛋白质包含的结构域，一次query只返回一条序列结果。<strong>使用前要首先要对HMM数据库进行格式化（包括压缩以及创建索引）</strong></p><img src="https://i.loli.net/2020/12/25/HLKkB7jPy9aGu2c.png" style="zoom: 33%;"><p>最后，从上面可得，ENSP00000262904 位置178到243、 ENSP00000355249位置129到194、 ENSP00000345571位置127到192片段这个片段含有PF02319 domain。</p><p>•使用linux或perl提取出hmm生成的结果文件中每个protein含有的domain位置和E-value</p><p>从上面的hmmsearch生成的out文件分析可知，第17-19行是数据分析结果，所以可以用sed命令提取这三行</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sed</span> -n \17,19\ p hmmsearch.out</code></pre><pre><code>-n选项会很严肃地警告sed 命令：除非是明确表明要输出的行，否则不要给我胡乱输出！-n选项经常和 p 配合使用，其含义就是，输出那些匹配的行。</code></pre><p>但是这三行并不包括domain位置，所以还得另想法子。观察输出文件每条序列都有‘&gt;&gt;’符号，而底下3行便是匹配的详细信息，所以便以此为模式识别，来输出序列，本想使用sed，却发现grep简单的多</p><pre class=" language-bash"><code class="language-bash"><span class="token function">grep</span> -A 3 <span class="token string">'^>>'</span>  hmmsearch.out</code></pre><pre><code>grep -A 3 打印匹配行的后3行grep -B 3 打印匹配行的后3行grep -C 3 打印匹配行的前后3行</code></pre><p><img src="https://i.loli.net/2020/12/25/SY72AZJkgn9dwM6.png"></p><h2 id="三、熟悉Gene-Ontology（GO）"><a href="#三、熟悉Gene-Ontology（GO）" class="headerlink" title="三、熟悉Gene Ontology（GO）"></a>三、熟悉Gene Ontology（GO）</h2><p>•<a href="http://geneontology.org/">http://geneontology.org/</a></p><p>本体论（Ontology ）是探究世界的本原或基质的哲学理论 。Gene Ontology（GO），为了达成对各种数据库中基因产物功能描述相一致而提出的项目。参与合作的数据库会使用GO的定义方法，对它们所包含的基因产物进行注解，并且提供支持这种注解的参考和证据。</p><p>GO主要分为三个主要领域：</p><ol><li><p> 分子功能 molecular function（简称 MF）记录基因产物的分子功能</p></li><li><p>细胞组成 cellular component （简称CC）指基因产物位于何种细胞器或基因产物组中(如糙面内质网，核糖体，蛋白酶体等)，即基因产物在什么地方起作用。</p></li><li><p> 生物过程 biological process（简称BP）记录由多个基因产物构成的通路和生化过程</p></li></ol><p>GO的基本单位是term（词条、节点），每个term都对应一个属性。</p><p>每个基因或基因产物都会有一个列表，列出与之相关的GO术语。每个数据库都会给出这些基因产物和GO术语的联系数据库，并 且也可以在GO的ftp站点上和WEB方式查询到。</p><p>常见的GO浏览器</p><ul><li><a href="http://amigo.geneontology.org/amigo">AmiGO from BDGP</a>。在 AmiGO中，可以通过查询一个GO术语而得到所有具有这个注释的基因产物，或查询一个基因产物而得到它所有的注释关系。还可以浏览本体论，得到术语之间的关系和术语对应的基因产物数目。AmiGO直接连接GO下的MySQL。</li><li>QuickGO at EBI。整合在EBI下的InterPro中，可以通过查询一个GO术语而得到它的定义与关系描述、在SWISS-PROT中的定位、在酶分类学（EC）和转运分类学（TC）中的定位和InterPro中的定位等。</li></ul><h3 id="3-1-search-ATPase，了解含有ATPase的GO-term和gene"><a href="#3-1-search-ATPase，了解含有ATPase的GO-term和gene" class="headerlink" title="3.1 search ATPase，了解含有ATPase的GO term和gene"></a>3.1 search ATPase，了解含有ATPase的GO term和gene</h3><p> Ontology：可以对涉及到ATPase的所有Go Tems进行查询和筛选</p><p>Genes and gene products：提供了与ATPase有关的基因和基因产物</p><p>Annotations：将Go terms和基因产物表合并，对涉及到基因和基因产物进行Go注释</p><img src="https://i.loli.net/2020/12/25/tMwbCYAdBr8KLIx.png" style="zoom:67%;"><p>点击Ontology，查看有关的Go Terms</p><img src="https://i.loli.net/2020/12/25/4rkHWNgno6TOEj2.png" style="zoom: 33%;"><p>点击Genes and gene products，查看与ATPase有关的基因</p><img src="https://i.loli.net/2020/12/25/WSXLzZcBHlKJpxy.png" style="zoom:33%;"><h3 id="3-2-使用gene-list文件的gene-做Enrichment-Analysis"><a href="#3-2-使用gene-list文件的gene-做Enrichment-Analysis" class="headerlink" title="3.2 使用gene list文件的gene 做Enrichment Analysis"></a>3.2 使用gene list文件的gene 做Enrichment Analysis</h3><p>所谓富集，就是比较某个GO term里的基因在前景基因所占的比例是否显著高于这个 GO term里的基因在背景基因所占的比例，然后根据p&lt;0.05，判断是否有显著富集,帮助认知寻找到的基因是否具有某方面的共性(如功能、组成等等).</p><blockquote><p>为什么要显著高于背景基因呢？因为这样才有特色啊，大家都有的common Go Term还有什么好分析的？</p></blockquote><p>通过计算得到的P value会进一步经过多重检验校正，通常应用的是BH（Benjaminiand Hochberg法）方法，得到FDR值。然后以FDR≤0.05为阈值，满足此条件的GO term定义为在差异表达基因中显著富集的GO term。</p><p>Go官网使用的基因富集工具是PANTHE（<a href="http://pantherdb.org/pathway%EF%BC%89">http://pantherdb.org/pathway）</a></p><img src="https://i.loli.net/2020/12/25/LUfqk1HRoQnmPhy.png" style="zoom:53%;"><p>如对gene list进行biological process 富集分析，得到如下图结果</p><img src="https://i.loli.net/2020/12/25/gvB4unNOYked6Et.png" style="zoom:40%;"><h2 id="四、熟悉KEGG、biocarta"><a href="#四、熟悉KEGG、biocarta" class="headerlink" title="四、熟悉KEGG、biocarta"></a>四、熟悉KEGG、biocarta</h2><h3 id="4-1-KEGG"><a href="#4-1-KEGG" class="headerlink" title="4.1 KEGG"></a>4.1 KEGG</h3><blockquote><p> 了解KEGG有哪些数据库？详细查看其中pathway数据库的类别和单个内容，会下载KEGG某个pathway的详细信息和基因列表</p></blockquote><p>KEGG（Kyoto Encyclopedia of Genes and Genomes,京都基因与基因组百科全书）</p><p>目前发展为一个综合性数据库，一共有四大类17个数据库，其中最核心的为 KEGG PATHWAY 和 KEGG ORTHOLOGY 数据库。KEGG的主要用途有：查询通路信息、信号通路检索，以及使用分析工具KEGG Mapper，它可以根据前期筛选得到的差异分子列表去构建分子调控网络，得到清晰简明的通路图。</p><img src="https://i.loli.net/2020/12/25/Ry3CK4lYkHqZuBx.png" style="zoom:50%;"><p>它的主页主要由以下几部分构成:</p><img src="https://i.loli.net/2020/12/25/8ayiQWhUxH1dOAt.png" style="zoom:50%;"><p>Brite 是存储分类信息的数据库，提供了包含pathway, ko, module, drug, disease，organism 等所有记录的分类；分类信息通过文件进行存储，有htext和table两种格式。提供了两种格式的文件用于下载，htext 对应的后缀为 keg， json 对应json，keg文件分类层级按照字母顺序排列，例如A 为第一级分类，B, C, D 依次为第二级。</p><p>KEGG Orthology 简称KO,该数据库中的每一条记录用K number 唯一标识。基于同源基因具有相似功能的假设，把基因的功能进行了扩充。对于某个物种中功能研究的很清楚的基因，在不同的物种间搜寻该基因的同源基因，将这些同源基因定义为一个orthology, 用该基因的功能作为该orthology 的功能；这样就将对于不同物种基因功能的研究都利用起来，提供了一个全面的研究基因功能的数据库。</p><p>而在 KEGG PATHWAY 数据库中，将生物代谢通路划分为 7大类，分别为：细胞过程（Cellular Processes）、环境信息处理（Environmental Information Processing）、遗传信息处理（Genetic Information Processing）、人类疾病（Human Diseases）、新陈代谢（Metabolism）、生物体系统（Organismal Systems），药物开发(Drug Development)其中每类又被系统分类为二、三、四层。第三层即为其代谢通路图；第四层为每个代谢通路图的具体注释信息。</p><p>pathway 建立在KO 数据库的基础上,构建了复杂的调控网络，采用通路图的形式，进行展示,通路图中融合了KO，module, compound, reaction，disease, drug 等 数据库中的信息.</p><p>在pathway 数据库中，每条pathway 的标识符由2-4个字母的前缀加上5个数字构成，共有5种不同的前缀，5种前缀其实都是同一张通路图，只不过高亮显示的内容不同：</p><ol><li>map - Reference pathway：map 代表reference pathway，表示KEGG中通用代谢通路图；无色；</li><li>ko - Reference pathway(KO)：在reference pathway 的基础上，将所有的ko用蓝色高亮显示</li><li>ec - Reference pathway(EC)：在reference pathway 的基础上，将酶编号高亮显示</li><li>rn - Reference pathway(Reaction)：在reference pathway 的基础上，将reaction 高亮显示</li><li>org - Organism-specific pathway map：org 代表的是organisam 数据库中物种的代码，将特定物种基因对应的KO高亮显示</li></ol><p>pathway 通路图图中各元素代表的意思</p><p><img src="https://i.loli.net/2020/12/25/oTRyvdYH74D6CbF.png"></p><ul><li>下载KEGG某个pathway的详细信息和基因列表</li></ul><p>①在KEGG网站查看</p><p>以hsa05161      Hepatitis B为例，在pathway搜索Hepatitis B，进入如下页面，可以看到关于Hepatitis B的description和详细通路</p><img src="https://i.loli.net/2020/12/25/lfOFQX5ILPqYMpo.png" style="zoom:50%;"><p>点击Pathway entry进入到如下页面，可以右侧的All links可以看到该Pathway与其他数据库的相关数据量</p><img src="https://i.loli.net/2020/12/25/kw5VzXlPN1qxBvA.jpg" style="zoom:50%;"><p>点击GENES，网页展现出Gene List</p><img src="https://i.loli.net/2020/12/25/SvF4yu6TPCH1MEd.png" style="zoom:50%;"><p>②使用R包KEGGREST</p><p>安装R包</p><pre class=" language-R"><code class="language-R">if(!requireNamespace("BiocManager", quietly = TRUE))         install.packages("BiocManager") BiocManager::install("KEGGREST") </code></pre><p>这个包含了KEGG数据库的19个子数据库</p><pre class=" language-R"><code class="language-R">> library("KEGGREST") > listDatabases()   [1] "pathway"  "brite"    "module"   "ko"       "genome"   "vg"       "ag"       [8] "compound" "glycan"   "reaction" "rclass"   "enzyme"   "disease"  "drug"    [15] "dgroup"   "environ"  "genes"    "ligand"   "kegg"  </code></pre><p>使用 keggGet 函数获取人类基因信号通路 hsa04650 的信息，并缓存<br>逐步run可以看到结果包括了通路介绍、基因，基因间的联系方式，以及链接等等。</p><pre class=" language-R"><code class="language-R">keggGet('hsa05161') gs<-keggGet('hsa05161')#获取通路中gene信息 gs[[1]]$GENE #查找所有基因 genes<-unlist(lapply(gs[[1]]$GENE,function(x) strsplit(x,';'))) genelist <- genes[1:length(genes)%%3 ==2] genelist <- data.frame(genelist)  #把结果写入表格中 write.table(genelist, "F:\\01-学途\\05大三上\\生信资源与实践\\第6次上机Protein_domain\\hsa05161.csv",            row.names=FALSE,col.names=TRUE,sep=",") </code></pre><p><img src="https://i.loli.net/2020/12/25/LXBNUQ6SIzox9g7.png"></p><p>查看生成的hsa05161.csv中的genelist，共162个基因名，与KEGG官网查看的数量一致</p><img src="https://i.loli.net/2020/12/25/etTgbKBvxjhoRpi.png" style="zoom:43%;"><h3 id="4-2-Biocarta-Pathways"><a href="#4-2-Biocarta-Pathways" class="headerlink" title="4.2 Biocarta Pathways"></a>4.2 Biocarta Pathways</h3><p>了解Biocarta信号通路数据库内容，会下载pathway gene list</p><p>Biocarta是经典的信号转导途径图集, 特点是对通路数据，用来进行分子互作关系、富集分析、通路为基础的研究等。观察基因如何相互作用的动态图形化模型。从分子的关系角度描绘了一个网络图模型。</p><p>找到的biocarta的网址均打不开或者不知如何使用：</p><ul><li><a href="https://cgap.nci.nih.gov/Pathways/BioCarta_Pathways%EF%BC%88CGAP%E7%BD%91%E7%AB%99%E5%B7%B2%E7%BB%8F%E6%97%A0%E4%BA%86%EF%BC%89">https://cgap.nci.nih.gov/Pathways/BioCarta_Pathways（CGAP网站已经无了）</a></li><li><a href="https://maayanlab.cloud/Harmonizome/dataset/Biocarta+Pathways">https://maayanlab.cloud/Harmonizome/dataset/Biocarta+Pathways</a></li><li> <a href="https://www.biocarta.com/">https://www.biocarta.com</a></li></ul><p>没办法，只好另辟蹊径。我直接在Google 上搜索“BIOCARTA p53”，在<a href="https://www.gsea-msigdb.org/gsea/msigdb/cards/BIOCARTA_P53_PATHWAY.html">GSEA</a>找到了Biocarta p53 pathway的信息</p><img src="https://i.loli.net/2020/12/25/DF47Kjqw65hWA3s.gif" style="zoom:40%;"><p>p53 信号通路图</p><img src="https://i.loli.net/2020/12/25/CzuspNvYoHk4E73.png" style="zoom:50%;"><p>下载gene list</p><img src="https://i.loli.net/2020/12/25/stzIk8bYxBgVwDe.png" style="zoom:50%;"><h2 id="五、DAVID富集分析"><a href="#五、DAVID富集分析" class="headerlink" title="五、DAVID富集分析"></a>五、DAVID富集分析</h2><p><a href="https://david.ncifcrf.gov/tools.jsp">https://david.ncifcrf.gov/tools.jsp</a></p><h3 id="5-1了解DAVID功能富集分析的方法和原理"><a href="#5-1了解DAVID功能富集分析的方法和原理" class="headerlink" title="5.1了解DAVID功能富集分析的方法和原理"></a>5.1了解DAVID功能富集分析的方法和原理</h3><p>DAVID是最早也是目前最经典的做富集分析的数据库，它整合了大量生物学数据和分析工具，为大规模的基因或蛋白列表提供系统综合的生物功能注释信息。但是网上有看到说其数据库更新慢，不准确。</p><p>DAVID需要用户提供感兴趣的基因列表，在基因背景下，使用提供的分析工具，提取该列表中含有的生物信息</p><p><strong>DAVID为实现各项功能分析，提供了以下4个分析内容（共6个分析工具</strong>）：</p><ol><li>Gene Name Batch Viewer能够实现将基因ID迅速翻译成基因名称</li><li>Gene ID Conversion实现不同数据库的基因标识间的转换。包含NCBI, PIR 和 Uniprot/SwissProt等重要数据库的基因标识信息。</li><li>Gene Functional Classification基于基因共同的注释信息，采用全新的模糊聚类算法，能够实现将功能相关的基因聚到一起作为一个单元，在生物学网络水平上去研究这些基因群。对聚类结果打分，分值越高，代表该组内的基因在基因列表中越重要。同时还提供了2-D View，以热图形式展现聚类到同一组的基因和该组内各个Term之间的关系。</li><li>Functional Annotation是DAVID最核心的分析内容，包含了三个子工具：</li></ol><ul><li>Functional Annotation Chart：提供gene-term的富集分析。相比于其他富集分析软件而言，DAVID在该功能上最显著的特点是，注释范围的可扩展性：从最初的GO注释，扩展到现在超过40中的注释种类，包括GO注释，KEGG注释，蛋白相互作用，蛋白功能区域，疾病相关，生物代谢通路，序列特点，异构体，基因功能总结，基因在组织里的表达和论文等。用户可以根据需要选择其中的某些或者所有种类的注释信息。</li><li>Functional Annotation Clustering使用类似于Gene Functional Classification工具的模糊聚类方法，基于注释共同出现的程度作聚类，对被注释上的Terms做聚类，即Terms被分成多组，并将给出聚类的分值。</li><li>Functional Annotation Table该工具实现了基因的功能注释，将输入列表中每个基因在选定数据库中的注释以表格形式呈现</li></ul><h3 id="5-2-使用DAVID-做gene-list-analysis"><a href="#5-2-使用DAVID-做gene-list-analysis" class="headerlink" title="5.2. 使用DAVID 做gene list analysis"></a>5.2. 使用DAVID 做gene list analysis</h3><p>(1) 在 “Enter Gene List” 中上传基因列表，格式是每行一个基因。按照 DAVID 的要求，总的基因个数不得超过 3000 个。在这里粘贴gene_list.txt文件的基因list</p><p>(2) 在 “Select Identifier” 中选择上传的基因类型，因为我们上传的是基因名（Gene Symbol），所以在下拉菜单中选择 “OFFICIAL_GENE_SYMBOL”</p><p>(3) 在 “List Type” 中有两个单选框，选择 “Gene List” 这一项（Background是背景基因）</p><p>(4) 点击 “Submit List” 即可</p><img src="https://i.loli.net/2020/12/25/jK1AHDWsd8Ou37t.png" style="zoom:50%;"><p>操作完成后，显示下面四种分析功能</p><img src="https://i.loli.net/2020/12/25/8jU4NvFs9aHmwJb.png" style="zoom:50%;"><p>点击Gene Name Batch Viewer，将基因symbol转化成Gene 全名</p><img src="https://i.loli.net/2020/12/25/RMFGzYb9tfojHDw.png" style="zoom:50%;"><p>点击Gene ID Conversion Tool可以实现查看gene list在entrez的ID</p><img src="https://i.loli.net/2020/12/25/R71fUCclhps6i83.png" style="zoom:50%;"><p>点击Gene Functional Classification Tool，只有把Classification Stringency调到lowest，才能显示出1个Cluster</p><img src="https://i.loli.net/2020/12/25/M4kXldpcRazyOxj.png" style="zoom:50%;"><p>2-D View展示gene-term关系</p><img src="https://i.loli.net/2020/12/25/lPeOj98FyWz1YoL.png" style="zoom:50%;"><p>点击Function Annotation Tool就可以得到如下图所示的分析结果。</p><p>在功能富集分析的结果中有多个折叠栏，其中 Gene_Ontology 这一折叠栏中有有三个栏目：GOTERM_BP_FAT、GOTERM_CC_FAT、GOTERM_MF_FAT 就是我们想要的 GO 功能富集分析结果。而 Pathways 里面有一个 KEGG_PATHWAY 就是我们想要的Pathway富集结果。 点击每个栏目后面的 “Chart” ，可查看BP、CC、MF 和 KEGG 对应的详细结果。</p><img src="https://i.loli.net/2020/12/25/UBvcXWO95zF6Knf.png" style="zoom:50%;"><p>以GOTERM_BP_DIRECT为例， 点击 “Chart” 之后，即可出现如下图所示的结果，这里面有几列数据分别是：Category、Term、RT、Genes、Count、%、P-Value 和 Benjamini。点击Download File</p><img src="https://i.loli.net/2020/12/25/QCdtW214XDkU6aP.png" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信资源与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【生信资源与实践】第五次上机-Ensembl和UCSC</title>
      <link href="posts/b08.html"/>
      <url>posts/b08.html</url>
      
        <content type="html"><![CDATA[<p>在生物信息学中，基因组浏览器是高通量测序分析的一个重要的可视化工具，相比于最终提供的表格，基因组浏览器可以提供更多的信息。基因组浏览器使研究人员能够使用带注释的数据可视化和浏览整个基因组，包括基因预测和结构、蛋白质、表达、调控、变异、比较分析等。注释数据通常来自多个不同的来源，如直观展示突变位点、查看有无新转录本或新的可变剪接形式、查看peak的可信度、上下游基因、区域保守性、重复元件、蛋白结合motif等。</p><p>最著名的Genome Browser 有UCSC Genome Browser, Ensembl Genome Browser 和NCBI Genome Data Viewer.</p><h2 id="一、熟悉Ensembl"><a href="#一、熟悉Ensembl" class="headerlink" title="一、熟悉Ensembl"></a>一、熟悉Ensembl</h2><p><a href="http://www.ensembl.org/index.html">Ensembl genome browser </a></p><p>Ensembl基因组数据库项目是欧洲生物信息研究所和Wellcome Trust Sanger研究所之间的一个联合科学项目，该项目于1999年启动，以应对即将完成的人类基因组计划。Ensembl旨在为遗传学家，分子生物学家和其他研究人类和其他脊椎动物和模式生物的基因组的研究人员提供集中资源。</p><p>Ensembl是用于检索基因组注释信息的著名基因组浏览器之一。Ensembl中的基因组注释由两部分组成：<strong>计算机自动注释（例如全基因组的转录本注释）以及人工注释</strong>。 人工注释主要针对选定的物种（如：人类，小鼠，斑马鱼等）。人工注释由Havana（Human and Vertebrate Analysis and Annotation）小组来完成。</p><blockquote><p>Ensembl与ENCODE以及GENCODE计划之间的关系 </p><p><strong>Ensembl是ENCODE计划的子项目</strong>。而<strong>GENCODE计划</strong>（由Sanger研究所维护）则是ENCODE项目的衍生品，旨在整合基因注释的结果</p></blockquote><p>常用的物种前缀</p><table><thead><tr><th align="left">前缀</th><th align="left">物种学名</th></tr></thead><tbody><tr><td align="left">ENS</td><td align="left">Homo sapiens (Human)</td></tr><tr><td align="left">ENSMUS</td><td align="left">Mus musculus (Mouse)</td></tr><tr><td align="left">ENSRNO</td><td align="left">Rattus norvegicus (Rat)</td></tr><tr><td align="left">ENSMZE</td><td align="left">Maylandia zebra (Zebra mbuna)</td></tr><tr><td align="left">MGP_LPJ_</td><td align="left">Mus musculus (Mouse LP/J)</td></tr><tr><td align="left">FB</td><td align="left">Drosophila melanogaster (Fruitfly)</td></tr><tr><td align="left">其它</td><td align="left">……</td></tr></tbody></table><p>常用的类型前缀</p><table><thead><tr><th align="left">前缀</th><th align="left">类型</th></tr></thead><tbody><tr><td align="left">G</td><td align="left">gene</td></tr><tr><td align="left">E</td><td align="left">exon</td></tr><tr><td align="left">P</td><td align="left">protein</td></tr><tr><td align="left">T</td><td align="left">transcript</td></tr><tr><td align="left">FM</td><td align="left">Ensembl protein family</td></tr><tr><td align="left">GT</td><td align="left">gene tree</td></tr><tr><td align="left">R</td><td align="left">regulatory feature</td></tr></tbody></table><p>Ensembl的注释</p><p><img src="https://i.loli.net/2020/12/25/lRcrfd1QAy4gFsj.png"></p><p>Ensembl本身也提供了一些有用的小工具，比如常用到的BLAST \BLAT、BioMart、 Variant Effect Predictor (VEP)、File Chameleon 、Assembly Converter、ID History Converter、Linkage 、Linkage Disequilibrium Calculator、Data Slicer等。BLAST和BLAT主要用于序列的短序列比对；BioMart主要是使用于为下载基因的功能信息、序列信息、结构信息、ID的转换等提供了很大的便利；而VEP主要是用来对序列其中的多态性位点进行一个功能性的注释。</p><h2 id="二、熟悉UCSC"><a href="#二、熟悉UCSC" class="headerlink" title="二、熟悉UCSC"></a>二、熟悉UCSC</h2><p>维基百科：<a href="https://en.wikipedia.org/wiki/UCSC_Genome_Browser">https://en.wikipedia.org/wiki/UCSC_Genome_Browser</a>    </p><p>UCSC Genome Database（<a href="http://genome.ucsc.edu/%EF%BC%89%E6%98%AF%E5%8A%A0%E5%B7%9E%E5%A4%A7%E5%AD%A6%E5%9C%A3%E5%85%8B%E9%B2%81%E5%85%B9%E5%88%86%E6%A0%A1%EF%BC%88UCSC%EF%BC%89%E5%88%9B%E7%AB%8B%E5%92%8C%E7%BB%B4%E6%8A%A4%E7%9A%84%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E7%94%9F%E7%89%A9%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8C%E4%B9%9F%E6%98%AF%E5%9F%BA%E5%9B%A0%E7%BB%84%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%B9%BF%E6%B3%9B%E4%BD%BF%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%82%E5%AE%83%E5%8C%85%E5%90%AB%E4%BA%86%E5%A4%A7%E9%87%8F%E5%9F%BA%E5%9B%A0%E7%BB%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%8C%85%E6%8B%AC">http://genome.ucsc.edu/）是加州大学圣克鲁兹分校（UCSC）创立和维护的一个重要的生物学数据库，也是基因组研究过程中广泛使用的数据库。它包含了大量基因组数据，包括</a> 基因注释信息（ENCODE ）、基因组间的比对信息、重复序列、同源序列、 mRNA 和表达序列标签、表型、表达谱、调控信息、保守性、变异、重复区域等一系列信息。它本身并不下任何结论，只是给用户 提供参考信息．</p><p>在生物信息分析过程中，有时会需要fasta、GTF或BED等格式的数据文件，而UCSC是这些文件的主要下载来源之一。</p><p>UCSC的几个主要工具：Genome Browser、BLAT、Table Browser、Variant Annatation Integrator、Data Integrator、Gene Interactions、Gene Sorter、Genome Graphs、In-Silico PCR、Liftover、VisiGene等</p><p>UCSC 数据库提供了可视化工具 Genome Browser 去浏览基因组信息, 用于浏览特定的感兴趣的区域。UCSC Genome Browser的注释主要包含以下几个模块：</p><ol><li>Mapping and Sequencing</li><li>Genes and Gene Predictions</li><li>Phenotype and Literature</li><li>mRNA and EST</li><li>Expression</li><li>Regulation</li><li>Comparative Genomics</li><li>Variation</li><li>Repeats</li><li>COVID-19（因为疫情新加的）</li></ol><p>UCSC Genome Browser 以 track(轨道)的方式来 展示相关信息．Track 表现为横向或纵向的条带， 条带上不同区域分别用不同的颜色、线、方块等表示不同的生物含义</p><p><img src="https://i.loli.net/2020/12/25/xu137FEydJXYTiL.png"></p><p>点击基因可查看具体注释</p><p><img src="https://i.loli.net/2020/12/25/4eSJHnvr7DTf1pg.png"></p><p>Table Browser提供了一个检索和下载的入口，支持多种格式的下载</p><p><code>clade</code>提供了物种分类，包括以下类型</p><ol><li>Mammal 哺乳动物</li><li>Vertebrate 脊椎动物</li><li>Deuterostome 后口动物</li><li>Insect 昆虫</li><li>Nematode 线虫</li><li>Viruses 病毒</li><li>other 其他</li></ol><p><code>group</code>选择注释模块</p><p><code>track</code>选择具体注释track</p><h2 id="三、了解Ensembl和UCSC有何异同"><a href="#三、了解Ensembl和UCSC有何异同" class="headerlink" title="三、了解Ensembl和UCSC有何异同"></a>三、了解Ensembl和UCSC有何异同</h2><p><strong>Ensembl，UCSC的基因注释信息，知道有哪些基因注释信息，有何异同？</strong></p><p>相同点：</p><ul><li>都是著名的基因组浏览器，都提供强大的基因注释和许多工具。Ensembl Genome Browser 采用的可视化方案与 UCSC 有相同之处，也是以横向轨道的方式进行可 视化，也提供custom track和track hubs。</li><li>Ensembl用到了UCSC的基因组序列数据</li><li>都支持GTF文件下载</li><li>后台数据库都采用开源的 mysql</li></ul><p>不同点：</p><ul><li><p>与UCSC只包含了动物的数据库不同，Ensembl除了给出脊椎动物的一个注释以外，还包含了非脊椎动物、植物、真菌、原生动物和细菌。</p></li><li><p>Ensembl的基因数据集有一部分是依据mRNA和蛋内序列的数据信息自动注释的。基于UniProtKB数据库和NCBI的RefSeq数据库里面的蛋白信息和mRNA的信息进行整合以后，再进行人工注释的一部分。UCSC由于自身不提供结论，一半注释信息来自于公开的数据计算得出，一半来自世界各地的科研工作者。</p></li><li><p>Ensembl特有的BioMart功能，可以依据设定的要求对基因组进行条件性检索，检索的结果以图表的形式给出。而UCSC提供Tabl Browser来获取和过滤、整合数据库的后台数据，内置了许多track和table，并支持custom track自定义注释格式。</p></li><li><p>Ensembl除了提供track可视化，还与其他数据库整合，提供了Go Term和可视化Pathway。UCSC更侧重于可视化和数据的下载，Ensembl在track可视化的功能和自定义程度不如UCSC。</p></li><li><p>UCSC 的主要开发语言是 Java/Python，后台数据库依赖于 mysql，而且提供 mysql 的公共接口。Ensembl Genome Browser 是基于 BioPerl 框架 用 perl 语言进行编写的，部分扩展和接口也用到了 C 和 Java。</p></li></ul><h2 id="四、上机练习"><a href="#四、上机练习" class="headerlink" title="四、上机练习"></a>四、上机练习</h2><h3 id="4-1-课件中的Ensembl-BioMart例子"><a href="#4-1-课件中的Ensembl-BioMart例子" class="headerlink" title="4.1 课件中的Ensembl BioMart例子"></a>4.1 课件中的Ensembl BioMart例子</h3><p>查找10号染色体上的所有编码蛋白质的老鼠基因的Ensembl 和 MGI 的 id。</p><p>选择条件如下:</p><p><img src="https://i.loli.net/2020/12/25/orSGZNW7ADuXkQC.png"></p><p>下载得到的文件</p><p><img src="https://i.loli.net/2020/12/25/4oMRPYzuWBm6f8w.png"></p><h3 id="4-2-课件中的UCSC-Table例子"><a href="#4-2-课件中的UCSC-Table例子" class="headerlink" title="4.2 课件中的UCSC Table例子"></a>4.2 课件中的UCSC Table例子</h3><blockquote><p>In the Human genome, search for simple repeats on a chromosome 4 location with copy number more than 10 and download the sequence.</p></blockquote><p>group选择Repeats，track选择Simple Repeats，table为simpleRepeat</p><p>region勾选position ，填入chr4:3000000-400000</p><p>filter的copyNum填写&gt;10</p><img src="https://i.loli.net/2020/12/25/gKVaIMSWNqExn8T.png" style="zoom:50%;"><h3 id="4-3-提取Ensembl-gene-id，mRNA-id，基因start和end-protein序列等信息"><a href="#4-3-提取Ensembl-gene-id，mRNA-id，基因start和end-protein序列等信息" class="headerlink" title="4.3 提取Ensembl gene id，mRNA id，基因start和end, protein序列等信息"></a>4.3 提取Ensembl gene id，mRNA id，基因start和end, protein序列等信息</h3><p>对gene_list.txt文件中的基因分别用Ensembl Biomart和UCSC Table获得其Ensembl gene id，mRNA id，基因start和end, protein序列等信息</p><h4 id="4-3-1-Ensembl-Biomart"><a href="#4-3-1-Ensembl-Biomart" class="headerlink" title="4.3.1 Ensembl Biomart"></a>4.3.1 Ensembl Biomart</h4><p>Dataset选择human gene，filter选择gene name点击上传gene_list.txt文件，atrributes选择feature依次选择Gene stable ID version,Transcript stable ID version,Protein stable ID version, Gene start(bp), Gene end(bp)，得到下图预览结果，点击go可下载文件获得全部内容</p><img src="https://i.loli.net/2020/12/25/gYFL179RWvUywfr.png" style="zoom:50%;"><p>如果想要获得protein序列，需要将attributes的feature改为sequence，勾选peptide</p><img src="https://i.loli.net/2020/12/25/s9JliCMBytEugOk.png" style="zoom:50%;"><h4 id="4-3-2-UCSC"><a href="#4-3-2-UCSC" class="headerlink" title="4.3.2 UCSC"></a>4.3.2 UCSC</h4><p>在UCSC Table Browser中， </p><p>group选择Genes and Gene Predictions</p><p>table选择knownGene</p><p>identifiers 粘贴gene list</p><p>output format选择selected fields from primary and related tables（可以选择输出表的列）</p><img src="https://i.loli.net/2020/12/25/Az5dPfb862skuhm.png" style="zoom:50%;"><p>然后点击get output选择输出格式，勾选name,chrom,strand,txStart,txEnd,proteinID,geneSymbol,geneId</p><img src="https://i.loli.net/2020/12/25/ZXnGoYyRN53j7kx.png" style="zoom:50%;"><img src="https://i.loli.net/2020/12/25/LG7WAakqVUucTNC.png" style="zoom: 70%;"><p>输出结果如下，可以看到输出了各基因的不同转录本的染色体位置，start 和end位置以及protein id、geneID</p><img src="https://i.loli.net/2020/12/25/rEycGPLevaqYwNR.png" style="zoom:67%;"><p>要想查看不同转录本的ID，在之前的output format需要选择sequence，点击get output勾选protein，得到如下结果</p><img src="https://i.loli.net/2020/12/25/uICczAZiJrFb7dN.png" style="zoom:67%;"><h3 id="4-4-UCSC-custom-track"><a href="#4-4-UCSC-custom-track" class="headerlink" title="4.4 UCSC custom track"></a>4.4 UCSC custom track</h3><p>把chip-seq peaks.bed.s文件上传到ucsc，建立一个custom track，这是一个转录因子TF结合基因组DNA上的结合峰位置的文件，熟悉custom track怎么建立和使用。</p><p>点击My Data→Custom Track, 选择chip-seq peaks.bed.s，点击submit，可以选择view in Genome Browser</p><p><img src="https://i.loli.net/2020/12/25/sRzuMQjhp9xJVl6.png"></p><img src="https://i.loli.net/2020/12/25/MjvVoh7UrKdmJgn.png" style="zoom:50%;"><h3 id="4-5-UCSC-lift-over"><a href="#4-5-UCSC-lift-over" class="headerlink" title="4.5 UCSC lift over"></a>4.5 UCSC lift over</h3><p>把chr pos for liftover.txt文件中的chr位置copy到liftover工具中，获得同一区域在不同基因组版本中不同的位置。</p><p><img src="https://i.loli.net/2020/12/25/aXFWwxJhoktzDm7.png"></p><p>将hg38的chir位置映射为了hg19的位置</p><p><img src="https://i.loli.net/2020/12/25/goDBYhvlmqdU6zr.png"></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信资源与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【生信资源与实践】第四次上机-NCBI</title>
      <link href="posts/e3b7.html"/>
      <url>posts/e3b7.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、熟悉NCBI"><a href="#一、熟悉NCBI" class="headerlink" title="一、熟悉NCBI"></a>一、熟悉NCBI</h2><h3 id="①-列出并介绍NCBI的10个数据库或者工具"><a href="#①-列出并介绍NCBI的10个数据库或者工具" class="headerlink" title="① 列出并介绍NCBI的10个数据库或者工具"></a>① 列出并介绍NCBI的10个数据库或者工具</h3><blockquote><p>如GenBank，dbSNP，dbVar，BLAST, ClinVar，dbGAP，batch Search，Gene，Refseq，Protein，GEO，pubmed，Pubmed Centeral，GeneRIF，OMIM，ORF Finder，SRA，Taxonomy，CCDS，Cn3D。</p><p>注意：map view已经被genome data viewer 取代了。</p></blockquote><p>NCBI(National Center for Biotechnology information）即美国国家生物技术信息中心，由美国国立卫生医学图书馆（NLM）于1988年建立。该中心的任务是：为储存和分析分子生物学、生物化学、遗传学知识创建自动化系统；从事研究基于计算机的信息处理过程的高级方法，用于分析生物学上重要的分子和化合物的结构与功能；促进生物学研究人员和医护人员应用数据库和软件；努力协作以获取世界范围内的生    物技术信息。</p><p>我们通常所说的检索NCBI数据库，其实就是在<strong>检索Entrez这个引擎系统所整合的生信数据库</strong>。简而言之就是，NCBI组织建立了Entrez，Entrez整合了各大数据库的入口，方便我们进行数据库检索。</p><h4 id="1）GenBank"><a href="#1）GenBank" class="headerlink" title="1）GenBank"></a>1）GenBank</h4><p><a href="https://www.ncbi.nlm.nih.gov/genbank/">GenBank Overview (nih.gov)</a></p><p>GenBank是美国国家医学图书馆(The United States National Library of Medicine, NLM)下属国家生物技术信息中心(National Center for Biotechnology Information, NCBI)开发的核苷酸序列数据库，与日本DNA数据库(DNA Data Bank of Japan ,DDBJ)以及欧洲生物信息研究所的欧洲分子生物学实验室核苷酸数据库The European Nucleotide Archive (ENA)和中国的NGDC（2019由BIGD改名为NGDC），并称国际核酸四大数据库.</p><p>GenBank收录的核酸序列数据根据其不同的研究属性，分属于Nucleotide、GSS和EST三个子库。</p><ul><li><strong>Nucleotide</strong>：收录绝大多数常规的核酸序列</li><li><strong>GSS</strong>：Genome Survey Sequence，基因组概览序列，收录来自早期基因组测序的短序列数据；</li><li><strong>EST</strong>：Expression Sequence Tag，表达序列标签，收录cDNA及cDNA特征序列信息。</li></ul><p>可以有两种方式在GenBank中进行检索： </p><p>（1）泛式检索：例如直接输入感兴趣序列所在基因的名称或者提交作者姓名等 </p><p>（2）特殊标识符检索：即GI号和Genbank的Accession number。</p><blockquote><p>GI number: GI号(GenInfo Identifier，有时用小写字母“gi”表示)是核苷酸序列的序列标识号，由一系列简单的数字组成。它们被连续分配给NCBI处理的每个序列记录，如果一个序列以任何方式改变，那么<strong>将分配一个新的GI号</strong>。</p><p>GenBank-Accession Number:Accession Number又叫做注册号/登录号，像GI号一样，它也是唯一的序列标识符。一个AC号通常是字母和数字的组合，例如一个字母后跟5位数(如U12345)或两个字母后跟6位数(如AF123456)。但是与GI号不同的是，<strong>AC号一旦分配就不会改变了</strong>，但是它所对应的版本（Accession number.Version）会随着增加。 </p><p>GI历史以及GI和Accession number.version的区别可见：<a href="https://www.ncbi.nlm.nih.gov/genbank/sequenceids/">https://www.ncbi.nlm.nih.gov/genbank/sequenceids/</a></p></blockquote><h4 id="2）-Refseq"><a href="#2）-Refseq" class="headerlink" title="2） Refseq"></a>2） Refseq</h4><p>GenBank中的数据是由用户提交数据构成的，具有较高的冗余度和错误率，为了更好实现特征序列的查询，NCBI在GenBank数据基础上针对每个基因不同的数据类型提取一个可靠的注释条目作为参考条目，组成RefSeq数据库。RefSeq数据库是一个非冗余的、提供参考标准的数据库，包括染色体、基因组（细胞器、病毒、质粒）、蛋白、RNA等。</p><p><strong>accession number的含义：</strong></p><p>RefSeq一般的命名格式:前缀为两个字母，然后下横线（’_‘）。区别于其它的GenBank的命名格式。</p><blockquote><p>Model RefSeq: XM_ (mRNA), XR_ (non-coding RNA), and XP_ (protein) 代表的是预测的序列，没有被审核过</p><p>Known RefSeq: NM_ (mRNA), NR_ (non-coding RNA), or NP_ (protein)  代表被人工检验过</p></blockquote><table><thead><tr><th align="center">Category</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center">NC</td><td align="center">Complete genomic molecules</td></tr><tr><td align="center">NG</td><td align="center">Incomplete genomic region</td></tr><tr><td align="center">NM</td><td align="center">mRNA</td></tr><tr><td align="center">NR</td><td align="center">ncRNA</td></tr><tr><td align="center">NP</td><td align="center">Protein</td></tr><tr><td align="center">XM</td><td align="center">predicted mRNA model</td></tr><tr><td align="center">XR</td><td align="center">predicted ncRNA model</td></tr><tr><td align="center">XP</td><td align="center">predicted Protein model (eukaryotic sequences)</td></tr><tr><td align="center">WP</td><td align="center">predicted Protein model (prokaryotic sequences)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><p>对于人类的RefSeq而言，每条RefSeq后面都会有一个COMMENT,COMMENT会显示这条RefSeq的状态。</p><blockquote><p>MODEL（说明是自动被NCBI提供的，没有被审核过）</p><p>INFERRED（由序列分析预测得到，没有经过实验验证）</p><p>PREDICTED（没有经过人工审核）</p><p>PROVISIONAL，REVIEWED（已被人工审核）</p><p>VALIDATED（已经过初步审查，但还没有过最后审查）</p><p>以及WGS。</p></blockquote><h4 id="3）-Gene"><a href="#3）-Gene" class="headerlink" title="3） Gene"></a>3） Gene</h4><p><a href="https://www.ncbi.nlm.nih.gov/gene">https://www.ncbi.nlm.nih.gov/gene</a></p><p>Gene数据库收录已测序物种的基因注释信息，包括基因的名称、染色体定位、基因序列和编码产物（mRNA、蛋白质）、相关标记、表型、相互作用、引文链接、序列、突变详情、图谱、表达报告、同源物、蛋白结构域内容和外部数据库链接。</p><p>与GenBank、OMIM、遗传多态数据库等NCBI子库及KEGG、Gene Ontology等外源性数据库进行交叉引用。Gene数据库是目前最权威的基因注释数据库，依照基因的发现顺序由1到多位数字构成Gene ID。</p><p>和基因相关的所有信息包括以下几栏：</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118222048522.png"></p><blockquote><p>summary：可以查看和几个基因相关的基因信息。我们可以看到这个基因的曾用名；其他数据库的链接； 简单的介绍等等</p><p>Genomic context：这个部分我们可以查看这个基因在DNA水平染色体位置上的相关信息。同时也可以简单了解起上下游的基因。如果想要看详细信息，我们可以通过 Genome Data View来查看结果。</p><p>Genomic regions, transcripts, and products：这个部分我们可以在RNA水平上转录本的相关信息。</p><p>Expression:可以查看在二代测序的数据当中，不同的正常组织中该基因表达情况</p><p>Bibliography：在这个部分，我们可以查看和这个基因相关的所有相关文献。这个部分主要分为两个部分。一个是和 该基因相关的所有文献。另外一个叫做：GeneRIFs: Gene References Into Functions筛选出和这个基因 功能有关的文献。</p><p>Phenotypes：这个部分可以用来查找和 该基因相关的表型情况。包括：相关的疾病信息；拷贝数变异以及 GWAS情况</p><p>Pathways from BioSystems: 这个部分我们可以了解和该基因有关的通路。其数据结果来自于各个综合性的通路分析数据库。    </p><p>General gene information:这个部分我们可以了解和 该基因有关的GO分析的结果。这个结果也是综合了多个数据库的结果</p><p>NCBI Reference Sequences (RefSeq):这个部分，可以查看所有基因序列信息。我们可以查看其基因组的序列，也可以查看每个转录本的序列以及转录本翻译成蛋白的序列。</p></blockquote><p>以TP53为例，Gene ID为7157</p><blockquote><p>Entrez Gene ID 又可以称为Entrez ID ，也是我们通常所说的Gene ID 。它是来源于Entrez Gene数据库的编号系统。每个Gene数据库中的记录数据都会被分配一个唯一的Gene ID编号。 编号的格式就是一串数字，例如：7157，2131这样的。同时，Gene ID的数字并<strong>不是连续分配</strong>的（也就是说有间隔）。（注意和GI号的区别）</p></blockquote><p>看到Summary这一栏，不约而同，前三行的内容来源均是 HGNC</p><ul><li>Official Symbol : TP53 provided by HGNC</li><li>Official Full Name tumor protein p53 provided by HGNC</li><li>Primary source HGNC: HGNC:11998</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118222119451.png"></p><p>人类中大多数基因的命名，是由HGNC(HUGO Gene Nomenclature Committee，人类基因命名委员会)来完成的。HGNC<strong>只对人类基因进行命名</strong>，而且并不是所有的基因都有Official Symbol。所以如果基因缺少HGNC提供的Gene Symbol ，Entrez Gene数据库中的Official symbol就会变成Gene Symbol，并且Gene Symbol的编号会变成<strong>LOC前缀+Entrez ID</strong>，例如：LOC4333818。</p><blockquote><p>除了人类之外，对于一些典型的模式物种而言，也有相关的命名委员会。<strong>小鼠</strong>（mouse）的基因命名是来源于<strong>MGNC</strong>（可访问MGI数据库），<strong>大鼠</strong>（rat）基因命名来源于<strong>RGNC</strong>(可访问RGD数据库)，<strong>斑马鱼</strong>的基因命名来源于<strong>ZFIN</strong>。还有一些其它物种的基因命名，基本就来源于NCBI的Gene数据库和Uniprot数据库。如果有些基因这些数据库里都没有命名，那么一般会直接从一些典型的模式物种（例如小鼠，斑马鱼等）的同源基因命名中引进。</p></blockquote><p>它提供了和TP53这个基因相关的外链数据库的连接。即Ensembl ，MIM以及Vega 。</p><p><strong>Ensembl:ENSG00000141510</strong> 即Ensembl数据库的ID编号，</p><p><strong>MIM:191170</strong>是来源于OMIM数据库（Online Mendelian Inheritance in Man ,人类孟德尔遗传在线数据库）的编号。</p><p><strong>Vega:OTTHUMG00000162125</strong>来自Vega数据库（Vertebrate Genome Annotation，脊椎动物基因组注释 ）</p><h4 id="4）Nucleotide"><a href="#4）Nucleotide" class="headerlink" title="4）Nucleotide"></a>4）Nucleotide</h4><p><a href="https://www.ncbi.nlm.nih.gov/nuccore">https://www.ncbi.nlm.nih.gov/nuccore</a></p><p>来自多个来源的核苷酸序列的集合，包括GenBank，RefSeq，第三方注释（TPA）数据库和PDB。</p><h4 id="5）dbSNP"><a href="#5）dbSNP" class="headerlink" title="5）dbSNP"></a>5）dbSNP</h4><p>dbSNP数据库(单核苷酸多态性数据库)收录的是单核苷酸多态性信息，例如单个碱基的替换、缺失或插入信息。共收录有将近1800万条人类SNP信息和3300万条其它各物种的SNP信息。dbSNP数据库还收录确认信息、种群特异性等位基因频率信息(population-specific allele frequencies)和个体基因型信息。所有这些信息都可以在dbSNP数据库的FTP站点中找到。</p><p>SNP一般可以分为：</p><ul><li><p>发生在编码区的SNP，由于密码子具有简并性不一定会引起氨基酸的改变：引起氨基酸变化的叫做 non-Synonymous SNP，不引起改变的叫做Synonymous SNP。</p></li><li><p>如果氨基酸发生了改变，又有两种情况：氨基酸的密码子变成另一种，因而导致多肽链的氨基酸种类和顺序发生改变，这就是错义突变missense mutation。如果突变导致编码氨基酸的密码子变成了终止子，蛋白质合成进行到该突变位点时会提前终止，就导致了无义突变nonsense mutation。</p></li></ul><h4 id="6）BLAST"><a href="#6）BLAST" class="headerlink" title="6）BLAST"></a>6）BLAST</h4><p>Blast全称Basic Local Alignment Search Tool，一套在蛋白质数据库或核酸数据库中进行序列相似性比对的一套分析工具，检索速度快，有助于识别基因和基因特征。</p><p>NCBI上的blast分为四种：</p><p><strong>Nucleotide BLAST</strong>：核酸比核酸；<strong>blastx</strong>：核酸比蛋白；<strong>tblastn</strong>：蛋白比核酸；<strong>Protein BLAST</strong>：蛋白比蛋白。</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/attachments-2020-03-kShYV4yS5e747d18b7268.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201123223404325.png"></p><p>在查看比对结果时，E值以及Score值最重要，E值越小、Score值越大，则比对结果越可靠。<br>在<strong>Graphic summary</strong>界面下，每一条线段代表一个比对结果，鼠标点击会有相应的比对信息</p><p>在<strong>Alignments</strong>界面下，有每一个比对结果的多序列比对结果展示。点击“Download”可以下载比对结果，也可以点击“gene bank”了解比对结果的详细信息。</p><p><strong>Taxonomy</strong>界面主要告诉我们所比对的序列在分类学上是什么物种。</p><p>掌握megablast, discontiguous megablast和blastn之间的异同：</p><ul><li>blastn：出现时间较早，比对的速度慢，但允许更短序列的比对（如短到7个碱基的序列）。</li><li>megablast：主要用来鉴定一段新的核酸序列，它不注重比对各个碱基的不同和序列片断的同源性，而只注重被比对序列是否是数据库未收录的，是否为新的提交序列或基因；速度快；同一物种间的比对；可用于寻找查询序列的最佳匹配的序列。</li><li>discontiguous megablast:     使用非重叠群字段匹配算法；灵敏度更高，用于更精确的比对；主要用于跨物种之间的同源比对。</li></ul><h4 id="7）SRA"><a href="#7）SRA" class="headerlink" title="7）SRA"></a>7）SRA</h4><p>SRA（Sequence Read Archive）数据库是用于存储二代测序的原始数据，包括 454，Illumina，SOLiD，IonTorrent，Helicos 和 CompleteGenomics。除了原始序列数据外，SRA现在也存在raw reads在参考基因的比对信息。SRA数据库存储来自全世界范围内的高通量短片段原始序列数据（raw sequence data），其显著的特点是将meta数据与序列数据分离。meta数据为与测序实验及其实验样品相关的数据，例如实验目的、试验设计、测序平台、样本信息等，</p><p>①研究课题（Study）：其检索号以前缀DRP、ERP或SRP开头，一个study致力于一个特定的研究目的，包含了该项目的所有meta数据，一个study可以包含多个实验样品（Sample）。</p><p>②样本信息（Sample）：其检索号以DRS、ERS或SRS开头，包含实验样品物种信息、系统发育信息、采样信息、表型数据等。每一个sample都对应一个实验（Experiment）。</p><p>③实验（Experiment）：其检索号以DRX、ERX或SRX开头，experiment是SRA数据库的最基本单元，记载实验设计（Design），实验平台（Platform）和结果处理（processing）三部分信息，一个study可以有多个experiment，一个experiment至少有一个结果集（run）。</p><p>④结果集（Run）：run没有检索号，一个run包括一批测序数据。</p><p>要下载SRA数据和转换fastaq格式，我们需要安装SRA Toolkit软件包，下载地址：<a href="https://www.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software">https://www.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software</a></p><h4 id="8）PubMed和PMC"><a href="#8）PubMed和PMC" class="headerlink" title="8）PubMed和PMC"></a>8）PubMed和PMC</h4><p>PubMed是目前最常用的<strong>文摘型</strong>数据库，PubMed迄今为止已经收录了超过2500万条文献记录。其收录范围不仅包括Medline，还有即将收录至Medline的处理中数据、期刊被Medline收录但是文章已经优先出版的文献、生命科学期刊出版商提交到PMC的文献、NIH基金资助作者的文献和NCBI书籍等。PubMed还提供链接到文献全文所在网站的全文链接。</p><p>PMC全称为PubMed Central，是可以<strong>免费获取全文</strong>的生物医学和生命科学全文数据库。PMC的绝大部分文献都能在PUBMED中搜索到，只有一小部分图书评论（book reviews）是没在pubMed收录范围内的。</p><blockquote><p>MEDLINE始建于1966年（追溯收录至1946年），是美国国立医学图书馆（National Library of Medicine，NLM）期刊文献记录数据库。</p><p>Medical Subject Headings，简称MeSH，是规范化的检索语言，它对文献中出现同一概念的书写形式等进行严格的控制和规范。</p></blockquote><h4 id="9）GEO"><a href="#9）GEO" class="headerlink" title="9）GEO"></a>9）GEO</h4><p><a href="https://www.ncbi.nlm.nih.gov/geo/">https://www.ncbi.nlm.nih.gov/geo/</a></p><p>GEO全称：Gene Expression Omnibus   基因表达综合汇编. </p><p>GEO数据库创建于2000年，是NCBI数据库的一个重要的子库，用于接收和管理各研究机构提交的基因芯片或测序技术获得的不同生理，病理状态个体或细胞系的基因(包括非编码基因)表达数据。你能在GEO里面找到不同种类细胞中不同基因在不同环境下的表达情况，以及这些数据是通过什么平台(基因芯片还是高通量测序)测得的。设计初衷是为了收集整理各种表达芯片数据，但是后来也加入了甲基化芯片，lncRNA，miRNA，CNV芯片等各种芯片，甚至高通量测序数据。是目前最大、最全面的公共基因表达数据资源。</p><p><strong>GEO的四种数据类型</strong></p><p>1.PlatForms(GPL)：特定的测量基因表达的平台类型，比如说有芯片或高通量测序，每种芯片或测序方法在GEO里都会有个编号，为GPL+数字，点开之后可以看到芯片的详情。</p><p>2.Sample(GSM)：参与基因表达测序的样本或个体信息，如在特定的环境下人的各种癌细胞样本，每个样本都编号为GSM+数字，点开可以查看详情</p><p>3.Series(GSE)：是一组相关样本实验测定的基因表达数据谱，也就是人们上传的实验信息，比如说有一个人用了一堆Sample做了表达分析，总和成一个Series，传上去给大家看。每个Serie都编号为GSE+数字</p><p>4.DataSets(GDS)：是由GEO数据库维护团队综合多组实验产生的整合的表达数据集，并含有预处理得到的聚类，差异表达等数据分析信息。每个DataSet编号为GDS+数字。和Series类似，也是一堆Sample和集合和表达分析，只不过自带在线分析工具，而Series没有。</p><p><strong>GEO数据库的主要功能有:</strong></p><ol><li>提供各种芯片数据</li><li>提供在线数据分析工具</li><li>可以利用GEO2R进行基因差异表达分析</li></ol><h4 id="10）Taxonomy"><a href="#10）Taxonomy" class="headerlink" title="10）Taxonomy"></a>10）Taxonomy</h4><p><a href="https://www.ncbi.nlm.nih.gov/taxonomy">https://www.ncbi.nlm.nih.gov/taxonomy</a></p><p>  记录了NCBI公共序列数据库中所有生物的策划分类和命名法,目前包含地球上大概10%的物种。NCBI为每个系统发育谱系（phylogenetic lineages）分配一个Taxonomy ID，可用于其他数据库序列的注释。</p><p>可以查找已记录物种的所有核苷酸和蛋白质信息</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118192658515.png"></p><h3 id="②-熟悉gene数据库中的内容"><a href="#②-熟悉gene数据库中的内容" class="headerlink" title="② 熟悉gene数据库中的内容"></a>② 熟悉gene数据库中的内容</h3><h4 id="1）-该基因的基本信息"><a href="#1）-该基因的基本信息" class="headerlink" title="1） 该基因的基本信息"></a>1） 该基因的基本信息</h4><p>进入<a href="https://www.ncbi.nlm.nih.gov/genome/gdv/">Genome Data Viewer</a>  ，选物种如human，选择右边的browse genome， 打开<a href="https://www.ncbi.nlm.nih.gov/genome/gdv/browser/genome/?id=GCF_000001405.39">页面</a>，选取TP53基因，</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118204334103.png"></p><h4 id="2-）获得mRNA-id和序列，蛋白质id和序列"><a href="#2-）获得mRNA-id和序列，蛋白质id和序列" class="headerlink" title="2.）获得mRNA id和序列，蛋白质id和序列"></a>2.）获得mRNA id和序列，蛋白质id和序列</h4><p>在Gene数据库输入TP53，进入其页面<a href="https://www.ncbi.nlm.nih.gov/gene/7157">https://www.ncbi.nlm.nih.gov/gene/7157</a></p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118204612643.png"></p><p>得知该基因的Gene ID为7157，全称为tumor protein p53，基因类型为protein coding编码蛋白质，在GRCh38.p13 基因组版本上，位于chr 17：7668402..7687550</p><p>在下方<strong>Genomic regions, transcripts, and products</strong>能看到该基因整体的转录本和蛋白质产物情况</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118222933597.png"></p><p>右侧<strong>Related information</strong>栏，点击RefSeq RNAs、RefSeq Proteins和SNP分别可以查看基因的mRNA、编码的蛋白质以及SNP信息</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118221930045.png"></p><p>TP53有15个转录本，可以看到各转录本的accession number和gi号，</p><blockquote><ol><li><p>Homo sapiens tumor protein p53 (TP53), transcript variant 1, mRNA<br>2,512 bp linear mRNA<br>NM_000546.6 GI:1808862652</p></li><li><p>Homo sapiens tumor protein p53 (TP53), transcript variant 2, mRNA<br>2,509 bp linear mRNA<br>NM_001126112.3 GI:1894803099</p></li><li><p>Homo sapiens tumor protein p53 (TP53), transcript variant 4, mRNA<br>2,572 bp linear mRNA<br>NM_001126113.3 GI:1894803053</p></li><li><p>Homo sapiens tumor protein p53 (TP53), transcript variant 3, mRNA<br>2,645 bp linear mRNA<br>NM_001126114.3 GI:1894803042</p></li><li><p>Homo sapiens tumor protein p53 (TP53), transcript variant 5, mRNA<br>2,003 bp linear mRNA<br>NM_001126115.2 GI:1894803103</p></li><li><p>Homo sapiens tumor protein p53 (TP53), transcript variant 6, mRNA<br>2,136 bp linear mRNA<br>NM_001126116.2 GI:1894803061</p></li><li><p>Homo sapiens tumor protein p53 (TP53), transcript variant 7, mRNA<br>2,063 bp linear mRNA<br>NM_001126117.2 GI:1894803104</p></li><li><p>Homo sapiens tumor protein p53 (TP53), transcript variant 8, mRNA<br>2,629 bp linear mRNA<br>NM_001126118.2 GI:1894803100</p></li><li><p>Homo sapiens tumor protein p53 (TP53), transcript variant 4, mRNA<br>2,572 bp linear mRNA<br>NM_001276695.3 GI:1889734158</p></li><li><p>Homo sapiens tumor protein p53 (TP53), transcript variant 3, mRNA<br>2,645 bp linear mRNA<br>NM_001276696.3 GI:1890275790</p></li><li><p>Homo sapiens tumor protein p53 (TP53), transcript variant 5, mRNA<br>2,003 bp linear mRNA<br>NM_001276697.3 GI:1890334252</p></li><li><p>Homo sapiens tumor protein p53 (TP53), transcript variant 6, mRNA<br>2,136 bp linear mRNA<br>NM_001276698.3 GI:1890336258</p></li><li><p>Homo sapiens tumor protein p53 (TP53), transcript variant 7, mRNA<br>2,063 bp linear mRNA<br>NM_001276699.3 GI:1889662456</p></li><li><p>Homo sapiens tumor protein p53 (TP53), transcript variant 1, mRNA<br>2,512 bp linear mRNA<br>NM_001276760.3 GI:1889514023</p></li><li><p>Homo sapiens tumor protein p53 (TP53), transcript variant 2, mRNA<br>2,509 bp linear mRNA<br>NM_001276761.3 GI:1889531459</p></li></ol></blockquote><p>其中 NM_000546.6为主要转录本( MANE是Matched Annotation from the NCBI and EMBL-EBI的缩写，这个数据库收录了人类编码基因的一个“representative”转录本。)</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118211429995.png" style="zoom:67%;"><p>其fata序列为：<a href="https://www.ncbi.nlm.nih.gov/nuccore/NM_000546.6?report=fasta">https://www.ncbi.nlm.nih.gov/nuccore/NM_000546.6?report=fasta</a></p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118212045194.png" style="zoom:50%;"><p>有15个蛋白质产物，其accession number和gi号如下：</p><blockquote><ol><li><p>cellular tumor antigen p53 isoform l [Homo sapiens]<br>187 aa protein<br>NP_001263628.1 GI:454545707</p></li><li><p>cellular tumor antigen p53 isoform k [Homo sapiens]<br>182 aa protein<br>NP_001263627.1 GI:454545207</p></li><li><p>cellular tumor antigen p53 isoform j [Homo sapiens]<br>234 aa protein<br>NP_001263626.1 GI:454544715</p></li><li><p>cellular tumor antigen p53 isoform i [Homo sapiens]<br>302 aa protein<br>NP_001263625.1 GI:454544286</p></li><li><p>cellular tumor antigen p53 isoform h [Homo sapiens]<br>307 aa protein<br>NP_001263624.1 GI:454543597</p></li><li><p>cellular tumor antigen p53 isoform g [Homo sapiens]<br>354 aa protein<br>NP_001263690.1 GI:454521557</p></li><li><p>cellular tumor antigen p53 isoform g [Homo sapiens]<br>354 aa protein<br>NP_001263689.1 GI:454520873</p></li><li><p>cellular tumor antigen p53 isoform g [Homo sapiens]<br>354 aa protein<br>NP_001119590.1 GI:371502119</p></li><li><p>cellular tumor antigen p53 isoform f [Homo sapiens]<br>214 aa protein<br>NP_001119589.1 GI:187830909</p></li><li><p>cellular tumor antigen p53 isoform e [Homo sapiens]<br>209 aa protein<br>NP_001119588.1 GI:187830901</p></li><li><p>cellular tumor antigen p53 isoform d [Homo sapiens]<br>261 aa protein<br>NP_001119587.1 GI:187830894</p></li><li><p>cellular tumor antigen p53 isoform b [Homo sapiens]<br>341 aa protein<br>NP_001119586.1 GI:187830855</p></li><li><p>cellular tumor antigen p53 isoform c [Homo sapiens]<br>346 aa protein<br>NP_001119585.1 GI:187830823</p></li><li><p>cellular tumor antigen p53 isoform a [Homo sapiens]<br>393 aa protein<br>NP_001119584.1 GI:187830777</p></li><li><p>cellular tumor antigen p53 isoform a [Homo sapiens]<br>393 aa protein<br>NP_000537.3 GI:120407068</p></li></ol></blockquote><p>其中 NP_000537为主要蛋白质产物, 其蛋白质序列如下</p><pre><code>&gt;NP_000537.3 cellular tumor antigen p53 isoform a [Homo sapiens]MEEPQSDPSVEPPLSQETFSDLWKLLPENNVLSPLPSQAMDDLMLSPDDIEQWFTEDPGPDEAPRMPEAAPPVAPAPAAPTPAAPAPAPSWPLSSSVPSQKTYQGSYGFRLGFLHSGTAKSVTCTYSPALNKMFCQLAKTCPVQLWVDSTPPPGTRVRAMAIYKQSQHMTEVVRRCPHHERCSDSDGLAPPQHLIRVEGNLRVEYLDDRNTFRHSVVVPYEPPEVGSDCTTIHYNYMCNSSCMGGMNRRPILTIITLEDSSGNLLGRNSFEVRVCACPGRDRRTEEENLRKKGEPHHELPPGSTKRALPNNTSSSPQPKKKPLDGEYFTLQIRGRERFEMFRELNEALELKDAQAGKEPGGSRAHSSHLKSKKGQSTSRHKKLMFKTEGPDSD</code></pre><h4 id="3）SNP数目"><a href="#3）SNP数目" class="headerlink" title="3）SNP数目"></a>3）SNP数目</h4><p>查看SNP数目为5941</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118205206867.png" style="zoom:50%;"><h4 id="4）在老鼠mouse中的同源基因的gene-id"><a href="#4）在老鼠mouse中的同源基因的gene-id" class="headerlink" title="4）在老鼠mouse中的同源基因的gene id"></a>4）在老鼠mouse中的同源基因的gene id</h4><p>点击homologene，看到在小鼠的同源基因<a href="https://www.ncbi.nlm.nih.gov/gene/22059"> Trp53, <em>M.musculus</em></a>，Gene ID:为22059</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118213520024.png" style="zoom:50%;"><h4 id="5）预测蛋白质的结构域"><a href="#5）预测蛋白质的结构域" class="headerlink" title="5）预测蛋白质的结构域"></a>5）预测蛋白质的结构域</h4><h5 id="1-Pfam预测蛋白结构域"><a href="#1-Pfam预测蛋白结构域" class="headerlink" title="1.Pfam预测蛋白结构域"></a>1.Pfam预测蛋白结构域</h5><p><a href="http://pfam.xfam.org/search">http://pfam.xfam.org/search</a></p><p>点击SEQUENCE SEARCH，NP_000537序列，得到下图结果，可以看到该蛋白质有4个domain，分别为N 末端的转录活化区 P53 DNA-binding domain，C 末端四聚体化区P53 tetramerisation motif，N 末端的转录活化区P53 transactivation motif和 Transactivation domain 2。</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118214047422.png"></p><h5 id="2-Interpro预测蛋白结构域"><a href="#2-Interpro预测蛋白结构域" class="headerlink" title="2. Interpro预测蛋白结构域"></a>2. Interpro预测蛋白结构域</h5><p>Interpro是集成了蛋白质家族、结构域和功能位点的非冗余蛋白质特征序列数据库， Interpro数据库成员包括Coils 、Gene3D、Pfam、PRINTS、ProSitePatterns、 ProSiteProfiles、 SMART、 SUPERFAMILY、 TIGRFAM、 ProDom、 PIR 数据库。还会给出了蛋白质的GO注释</p><p>可以看到Interpro也预测了四个domain</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/iiss.png" alt="iiss"></p><p>点击上方的Entries,还包含了这些结构域在不同数据库的收录情况</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118221126720.png" style="zoom:50%;"><h3 id="③-Batch-Entrez"><a href="#③-Batch-Entrez" class="headerlink" title="③ Batch Entrez"></a>③ Batch Entrez</h3><p>一次性批量获得下列protein的 sequence（fasta格式）</p><ul><li>AAA43823</li><li>CAA75676</li><li>XP_010392464</li><li>XP_010578750</li><li>XP_010304154</li></ul><p>Batch Entrez 网址:<a href="https://www.ncbi.nlm.nih.gov/sites/batchentrez">https://www.ncbi.nlm.nih.gov/sites/batchentrez</a></p><p>选择database为Protein, file选择为已输入上述序列的txt文件,点击Retrieve(检索)</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118154906091.png"></p><p>检索得到的结果如下</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118155044854.png" style="zoom: 33%;"><h3 id="④-熟悉PubMed"><a href="#④-熟悉PubMed" class="headerlink" title="④ 熟悉PubMed"></a>④ 熟悉PubMed</h3><p>要求</p><blockquote><p>•查找文献</p><p>•时间2010-现在, 限定作者 GUO AY, 作者单位华科</p><p>•总文献多少，Review文献多少？</p><p>•下载文章基本信息，使用linux命令，提取其杂志和年份信息，分别按杂志名和年份统计并排序。发表文章数最多的年份和最多的杂志分别是？</p></blockquote><p>PubMed地址：<a href="https://pubmed.ncbi.nlm.nih.gov/?db=nuccore&amp;cmd=HistorySearch&amp;QueryKey=3">https://pubmed.ncbi.nlm.nih.gov/?db=nuccore&amp;cmd=HistorySearch&amp;QueryKey=3</a></p><blockquote><p>Pubmed是摘要数据库，其本身并不提供文献全文服务。对于检索到的文献，若检索结果列表中显示的PMC Full text 图标的文章。这类文章可以直接到PMC 中去阅读网页版的全文，或者在网页版全文阅读页面找到PDF 下载链接进行下载。</p></blockquote><p>点击advanced，添加Author、Affiliation和Date - Publication筛选条件，最后的filter条件为 <code>((GUO AY[Author]) AND ("Huazhong University of Science and Technology"[Affiliation])) AND (("2010"[Date - Publication] : "3000"[Date - Publication]))</code>，点击search后，可以看到检索到了72条文献记录</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118124726466.png" style="zoom:50%;"><p>点击右侧栏的Type，勾选review，可知符合条件的review数为0</p><img src="https://i.loli.net/2020/12/25/3kgqAd4KQRPJjr8.png" style="zoom:50%;"><p>点击上方的<kbd>Save</kbd>按钮, Selection选择All results on this Page, Format选择CSV</p><p>下载csv文件 <code>csv-GUOAYAutho-set.csv</code>，使用vscode打开查看，发现Title和 Author都有逗号，这意味着不能简单的使用awk -F或cut -d直接指定逗号为分割符对列进行操作，否则得到的列并不完整（可以考虑使用awk的正则表达式）</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118093052894.png" style="zoom:40%;"><ol><li>提取PMID、Journal/Book和Publication Year列</li></ol><p>①使用awk</p><p>FPAT是取得匹配的字符部分作为字段。它是gawk提供的一个高级功能。将字段定义为没有逗号的内容-<code>([^,]+)</code>，或者是用双引号<code>(\"[^\"]+\")</code>包围的内容。</p><p><code>-vOFS=,</code>是给字段加上分隔符”,”</p><pre class=" language-bash"><code class="language-bash"><span class="token function">awk</span> -vFPAT<span class="token operator">=</span><span class="token string">'([^,]*)|(\"[^\"]+\")'</span> -vOFS<span class="token operator">=</span>, <span class="token string">'{print <span class="token variable">$1</span>,<span class="token variable">$5</span>,<span class="token variable">$6</span>}'</span>  csv-GUOAYAutho-set.csv</code></pre><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-202011181517562812.png"></p><p>②使用 csvkit</p><p>在自己的电脑的linux 子系统下安装了csvkit，<em>csvkit</em>是一个处理CSV文件的一个小工具，基于python，可以直接通过<code>pip install csvkit</code>安装，发现csvkit的csvcut可以对列进行完整切割（不愧是专业的！）</p><p>csvcut -c 1，5，6 提取第1，5，6列</p><pre class=" language-bash"><code class="language-bash"> csvcut -c 1,5,6 csv-GUOAYAutho-set.csv</code></pre><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118141917514.png" style="zoom:40%;"><ol start="2"><li>按照杂志名排序</li></ol><pre class=" language-bash"><code class="language-bash">csvcut -c 1,5,6 csv-GUOAYAutho-set.csv <span class="token operator">|</span><span class="token function">tail</span> -n+2<span class="token operator">|</span><span class="token function">sort</span> -t<span class="token string">','</span> -k 2</code></pre><pre><code>tail -n+2 打印文件第2行开始以后的内容,就是忽略标题行，不然也会被排进去sort     -t'',' 指定分隔符为逗号    -k2 , 更具从第二列开始以ASCII码值正序排列</code></pre><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-202011181427524523.png"></p><ol start="3"><li>根据发表年份排序</li></ol><pre class=" language-bash"><code class="language-bash"> csvcut -c 1,5,6 csv-GUOAYAutho-set.csv <span class="token operator">|</span><span class="token function">sort</span> -t<span class="token string">','</span> -k 3n</code></pre><pre><code>-k 3n 根据第三列即年份按数字大小排序这里我去掉了tail -n+2，因为这时标题行没有数字会排在最前面</code></pre><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118143434939.png"></p><ol start="4"><li>统计发表文章数最多的杂志</li></ol><p>提取第五列，即杂志列，由于uniq命令是针对相邻的重复行去重复，所以先使用sort命令排序，再使用uniq -c进行统计重复次数，再对根据重复次数进行统计</p><pre class=" language-bash"><code class="language-bash"> csvcut -c 5 csv-GUOAYAutho-set.csv <span class="token operator">|</span><span class="token function">tail</span> -n+2<span class="token operator">|</span><span class="token function">sort</span><span class="token operator">|</span><span class="token function">uniq</span> -c<span class="token operator">|</span><span class="token function">sort</span> -k1 -nr</code></pre><p>得出在Nuclei Acids Res杂志发表文章数最多, 为15篇</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-202011181451162742.png"></p><ol start="5"><li>统计发表文章数最多的年份</li></ol><p>同统计所发表的杂志，只不过把第5列改成第6列</p><pre class=" language-bash"><code class="language-bash">csvcut -c 6 csv-GUOAYAutho-set.csv <span class="token operator">|</span><span class="token function">tail</span> -n+2<span class="token operator">|</span><span class="token function">sort</span><span class="token operator">|</span><span class="token function">uniq</span> -c<span class="token operator">|</span><span class="token function">sort</span> -k1 -nr</code></pre><p>可以看到2020年发表文章数最多，为14篇</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201118144112899.png"></p><h2 id="二、熟练掌握NCBI-Entrez系统查询检索和使用"><a href="#二、熟练掌握NCBI-Entrez系统查询检索和使用" class="headerlink" title="二、熟练掌握NCBI Entrez系统查询检索和使用"></a>二、熟练掌握NCBI Entrez系统查询检索和使用</h2><h3 id="①gene-prediction-in-human-genome"><a href="#①gene-prediction-in-human-genome" class="headerlink" title="①gene prediction in human genome"></a>①gene prediction in human genome</h3><p>序列位置：GRCh38. Chromosome: 10; NC_000010.11 (chr10:87,736,159-88,098,885)</p><blockquote><p>关于人类基因组版本</p><p>2009年，the Genome Reference Consortium (GRC)发布了第19版人类基因组GRCh37，也常被称为hg19。GRCh37被广泛应用于数据分析。2013年，GRC发布了GRCh38。</p><p>根据GRC的官方文件，<strong>GRCh38是最精确的人类基因组</strong>。GRCh38基于金标准Sanger测序组装，读长约为1000bp，精确度是高通量测序的10倍。与GRCh37相比，GRCh38替换了8000个等位基因位点，校正了数个组装错误的基因组区域，补全了gap，添加了着丝粒序列，在178个区域组装了261条alternate loci，丰富了基因组的多样性。</p></blockquote><h4 id="1）先从UCSC或者ncbi获得其序列"><a href="#1）先从UCSC或者ncbi获得其序列" class="headerlink" title="1）先从UCSC或者ncbi获得其序列"></a>1）先从UCSC或者ncbi获得其序列</h4><h5 id="1-在NCBI获取序列"><a href="#1-在NCBI获取序列" class="headerlink" title="1. 在NCBI获取序列"></a>1. 在NCBI获取序列</h5><p><a href="https://www.ncbi.nlm.nih.gov/nuccore/NC_000010.11">https://www.ncbi.nlm.nih.gov/nuccore/NC_000010.11</a></p><ol><li>选择Nucleotide</li><li>输入NC_000010.11,点击search</li><li>进入Genbank之后，选择右上方的change region shown，输入region from 87736159-88098885，点击update view</li><li>点击 send to，选择file→fasta→另存为</li></ol><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201111210944350.png" style="zoom: 33%;"><p>得到的序列，使用VSCode查看</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201112131254770.png" style="zoom: 50%;"><h5 id="2-在UCSC获取序列"><a href="#2-在UCSC获取序列" class="headerlink" title="2. 在UCSC获取序列"></a>2. 在UCSC获取序列</h5><p><a href="https://genome-euro.ucsc.edu/index.html">https://genome-euro.ucsc.edu/index.html</a></p><ol><li>在主页选择Tools-&gt;Table Browser， 之后add custom tracks，输入位置，点击submit</li></ol><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201111212223289.png" style="zoom:50%;"><ol start="2"><li>选择view in Table browser，然后点go</li></ol><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201111212409520.png" style="zoom: 50%;"><ol start="3"><li><p>返回Table Browser之后，点击get output</p></li><li><p>然后再点get sequence</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201111212611584.png" style="zoom:67%;"></li><li><p>一顿折腾之后得到序列</p></li></ol><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201111212642263.png" style="zoom: 57%;"><h4 id="2）进行基因预测"><a href="#2）进行基因预测" class="headerlink" title="2）进行基因预测"></a>2）进行基因预测</h4><p>基因预测工具：</p><ul><li><p>FGeneSH - <a href="http://linux1.softberry.com/berry.phtml?topic=fgenesh&amp;group=programs&amp;subgroup=gfind">http://linux1.softberry.com/berry.phtml?topic=fgenesh&amp;group=programs&amp;subgroup=gfind</a></p><ul><li><p>官网介绍: FGENESH is the fastest (50-100 times faster than GenScan) and most accurate gene finder available </p></li><li><p>Help文档：<a href="http://www.softberry.com/berry.phtml?topic=fgenesh&amp;group=help&amp;subgroup=gfind">http://www.softberry.com/berry.phtml?topic=fgenesh&amp;group=help&amp;subgroup=gfind</a></p></li></ul></li><li><p>GenScan - <a href="http://hollywood.mit.edu/GENSCAN.html">http://hollywood.mit.edu/GENSCAN.html</a></p><ul><li><p>Genscan是美国麻省理工大学开发，基于广义隐马尔科夫模型的人类及脊椎动物基因结构预测软件。它不依赖于已有的蛋白库，是一种“从头预测”的软件。另外还开发了适用于果蝇、拟南齐和玉米的版本。对于其他物种，可以采用相近物种版本进行预测。</p></li><li><p>Help：<a href="https://genome.crg.cat/courses/Bioinformatics2003_genefinding/results/genscan.html">https://genome.crg.cat/courses/Bioinformatics2003_genefinding/results/genscan.html</a></p></li></ul></li><li><p>GeneMark.hmm - <a href="http://exon.gatech.edu/GeneMark/gmhmme.cgi">http://exon.gatech.edu/GeneMark/gmhmme.cgi</a></p><ul><li>Help：<a href="http://www.geneprobe.net/Manuals/GM/GM_output.aspx">http://www.geneprobe.net/Manuals/GM/GM_output.aspx</a></li></ul></li></ul><h5 id="1-FGenSH"><a href="#1-FGenSH" class="headerlink" title="1. FGenSH"></a>1. FGenSH</h5><p>对各列的解释</p><blockquote><p>G - 预测的基因数序号</p><p>Str - +代表正链，-代表负链</p><p>Feature - 序列的类型</p><ul><li><p>TSS -转录起始位点 (TATA-box position and score);</p></li><li><p>CDSf - 起始外显子,  first (starting with start codon) coding segment；</p></li><li><p>CDSi - 居间外显子, internal (internal exon) coding segment;</p></li><li><p>CDSl -终止外显子, last (ending with stop codon) coding segment;</p></li><li><p>CDSo-单外显子,  gene contains the ONE coding exon only;</p></li></ul><p>ORF - 从起始密码子开始，是mRNA序列中具有编码蛋白质潜能的序列，结束于终止密码子连续的碱基序列。</p></blockquote><p> 在网页选择文件，选择基因组为Homo_sapiens，进行基因预测，网页输出得到如下的图：</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201111220801867.png" style="zoom:50%;"><p>下载pdf还能得到可视化的预测结果</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201111232128552.png" style="zoom: 40%;"><p>最底下是拼接外显子预测蛋白序列</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201111232710573.png" style="zoom:43%;"><h5 id="2-GENSCAN"><a href="#2-GENSCAN" class="headerlink" title="2. GENSCAN"></a>2. GENSCAN</h5><p>   选择适合的模式物种作为参照, 选择Vertebrate</p><ul><li><p>Vertebrate(脊椎动物)</p></li><li><p>Arabidopsis(拟南芥)</p></li><li><p>Maize (玉米)</p><p>另外，<code>Suboptimal exon cutoff (optional)</code>是选择次优外显子，网页上的默认值是1.00，这意味着不打印出次优的外显子。</p><img src="https://i.loli.net/2020/12/25/hZvaUgD4KtGnm39.png" style="zoom: 50%;"><p>输出的结果其实和FGeneSH差不多</p><blockquote><p>Type</p><ul><li><p>Prom代表启动子</p></li><li><p>Init 代表起始外显子</p></li><li><p>Intr代表居间外显子</p></li><li><p>Sgnl代表单外显子</p></li><li><p>Term代表终止外显子</p></li></ul><p>PlyA代表Poly A序列</p><p>Fr : reading frame (a forward strand codon ending at x has frame x mod 3)就是这个外显子结束的位点对3取模</p><p>Ph : net phase of exon (exon length modulo 3)，外显子长度对3取模</p></blockquote><p>发现显示的碱基对362778bp偏多</p><img src="https://i.loli.net/2020/12/25/B21vuGeY6QaCxwc.png" style="zoom: 50%;"></li></ul><p>最底下也是预测的protein和mRNA序列，由于mRNA的终止密码子不变码氨基酸，所以aa*3+2才等于mRNA bp数</p><img src="https://i.loli.net/2020/12/25/O1G4WeZibCQ7V5z.png" style="zoom: 55%;"><p>好像不能查看pdf文件，暂罢。</p><h5 id="3-GeneMark-hmm-eukaryotes"><a href="#3-GeneMark-hmm-eukaryotes" class="headerlink" title="3. GeneMark.hmm eukaryotes"></a>3. GeneMark.hmm eukaryotes</h5><p>   选择eukaryotes，输入序列，选择物种，发现只有五种选项</p><ul><li><p>Arabidopsis_thaliana 拟南芥</p></li><li><p>Caenorhabditis_elegans 秀丽隐杆线虫</p></li><li><p>Chlamydomonas_reinhardtii 莱茵衣藻</p></li><li><p>Drosophila_melanogaster 黑腹果蝇</p></li><li><p>Schizosaccharomyces_pombe 粟酒裂殖酵母</p><p><img src="https://i.loli.net/2020/12/25/p9mCHGUyMZPADbz.png"></p><p>说明GeneMark.hmm 网页端目前只支持较低等的真核生物，而采用非监督算法的GeneMark-ES则需要安装到Linux才能使用</p></li></ul><img src="https://i.loli.net/2020/12/25/9mPybFw8cj1Aux4.png" style="zoom:67%;"><p>   运行完成的页面</p>   <img src="https://i.loli.net/2020/12/25/OQujHDJLWyPpf9F.png" style="zoom: 50%;"><blockquote><p>补充：页面描述语言PS(Postscript)也是由Adobe公司拥有的一项事实上的印刷工业标准。它能描述精美的版面,在目前的印刷领域仍占据统治地位。PDF从PS发展而来,在对页面的描述方面它们有几乎相同能力和相似的描述方法。所以其实只要勾选输出pdf就行了。</p></blockquote><p>   点击gmhmme.out查看输出结果，发现预测的基因数多达46个！</p>   <img src="https://i.loli.net/2020/12/25/UhMVqzvo3niRYwf.png" style="zoom:50%;"><p>   再来看看pdf的output文件，多达173页，每一页有六个reading frame代表六种阅读方式的情况</p>   <img src="https://i.loli.net/2020/12/25/Wo63HVD8bF14ysq.png" style="zoom:57%;"><h4 id="3）查找该预测到基因的mRNA和EST证据"><a href="#3）查找该预测到基因的mRNA和EST证据" class="headerlink" title="3）查找该预测到基因的mRNA和EST证据"></a>3）查找该预测到基因的mRNA和EST证据</h4><p>通过查找该预测基因的mRNA和EST证据，判断上述每种基因预测方法预测的准确性</p><blockquote><p><strong>Expressed Sequence Tag</strong> (<strong>EST</strong>)表达序列标签序列是一个 cDNA 序列的一个短的子序列。表达序列标签(ESTs)可用于识别基因转录本，并在基因发现和基因序列测定中起重要作用。</p></blockquote><p>由于这段序列长达362727bp，所以选择截取一段检查软件是否预测成功</p><p>选择下列FGenSH预测的一段mRNA序列</p><pre class=" language-fasta"><code class="language-fasta">>FGENESH:[mRNA]   1   4 exon (s)   5077  -   9812   774 bp, chain +ATGGTGATGGAAAGTGGGGACTGGCTGGTTGGTGGAGACCTTCAGGTGCTGGAGAAAATAAGATGGAATGATGGGCTGGACCAATACCGTCTGACACCTCTGGAGCTCAAACAGAAATGTAAAGAAATGAATGCTGATGCGGTGTTTGCATTCCAGTTGCGCAATCCTGTCCACAATGGCCATGCCCTGTTGATGCAGGACACTCGCCGCAGGCTCCTAGAGAGGGGCTACAAGCACCCGGTCCTCCTACTACACCCTCTGGGCGGCTGGACCAAGGATGACGATGTGCCTCTAGACTGGCGGATGAAGCAGCACGCGGCTGTGCTCGAGGAAGGGGTCCTGGATCCCAAGTCAACCATTGTTGCCATCTTTCCGTCTCCCATGTTATATGCTGGCCCCACAGAGGTCCAGTGGCACTGCAGGTCCCGGATGATTGCGGGTGCCAATTTCTACATTGTGGGGAGGGACCCTGCAGGAATGCCCCATCCTGAAACCAAGAAGGATCTGTATGAACCCACTCATGGGGGCAAGGTCTTGAGCATGGCCCCTGGCCTCACCTCTGTGGAAATCATTCCATTCCGAGTGGCTGCCTACAACAAAGCCAAAAAAGCCATGGACTTCTATGATCCAGCAAGGCACAATGAGTTTGACTTCATCTCAGGAACTCGAATGAGGAAGCTCGCCCGGGAAGGAGAGAATCCCCCAGATGGCTTCATGGCCCCCAAAGCATGGAAGGTCCTGACAGATTATTACAGGTCCCTGGAGAAGAACTAA</code></pre><h5 id="1-寻找mRNA证据"><a href="#1-寻找mRNA证据" class="headerlink" title="1. 寻找mRNA证据"></a>1. 寻找mRNA证据</h5><p>输入序列，选择refseq_rna数据库，点击blast运行</p><img src="https://i.loli.net/2020/12/25/jnJcdHIvkg1FRXE.png" style="zoom:67%;"><p>查看结果：发现这段序列为Homo sapiens 3’-phosphoadenosine 5’-phosphosulfate synthase 2 (PAPSS2), 而且在Pan paniscus（倭黑猩猩），gorilla（大猩猩），chimpanzee（黑猩猩）等都能找到同源序列</p><img src="https://i.loli.net/2020/12/25/if3OwEtWRASGFHJ.png" style="zoom:67%;"><h5 id="2-寻找EST证据"><a href="#2-寻找EST证据" class="headerlink" title="2. 寻找EST证据"></a>2. 寻找EST证据</h5><p>输入BLAST中，然后database 选择EST</p><img src="https://i.loli.net/2020/12/25/NJxAeXzEqW84SBb.png" style="zoom:67%;"><p>运行后可以看到    BX111772.1这段EST可以和预测的mRNA完全匹配</p><img src="https://i.loli.net/2020/12/25/BxY6mwZj3GpKQ2o.png" style="zoom:67%;"><img src="https://i.loli.net/2020/12/25/qT4bnDGiJxNlr6t.png" style="zoom:47%;"><h4 id="4）查找该基因在其他物种中的同源基因"><a href="#4）查找该基因在其他物种中的同源基因" class="headerlink" title="4）查找该基因在其他物种中的同源基因"></a>4）查找该基因在其他物种中的同源基因</h4><p>找同源基因可以直接从ncbi Entrez Gene中该基因的homologene去找，并不需要blast</p><p>在该基因序列的nucleotide页面下点击homologene</p><img src="https://i.loli.net/2020/12/25/YjXyzDbKV8ZkOUJ.png" style="zoom:67%;"><p>可以看到该序列在各物种的同源序列</p><img src="https://i.loli.net/2020/12/25/kaJeLUqS3s8W6RY.png" style="zoom:67%;"><h2 id="三、熟悉NCBI-GenBank-RefSeq的注释信息"><a href="#三、熟悉NCBI-GenBank-RefSeq的注释信息" class="headerlink" title="三、熟悉NCBI GenBank/RefSeq的注释信息"></a>三、熟悉NCBI GenBank/RefSeq的注释信息</h2><p>如<a href="http://www.ncbi.nlm.nih.gov/nuccore/197333860">http://www.ncbi.nlm.nih.gov/nuccore/197333860</a> 其中有哪些内容项，分别是什么含义？把主要的信息项写下来并注明其含义。</p><h4 id="1）GenBank数据库格式"><a href="#1）GenBank数据库格式" class="headerlink" title="1）GenBank数据库格式"></a>1）GenBank数据库格式</h4><table><thead><tr><th>GenBank</th><th>含义</th></tr></thead><tbody><tr><td>LOCUS</td><td>序列名称</td></tr><tr><td>DEFINITION</td><td>序列简单说明</td></tr><tr><td>ACCESSION</td><td>序列编号</td></tr><tr><td>VERSION</td><td>序列版本号</td></tr><tr><td>KEYWORDS</td><td>与序列相关的关键词</td></tr><tr><td>SOURCE</td><td>序列来源的物种名</td></tr><tr><td>ORGANISM</td><td>序列来源的物种学名和分类学位置</td></tr><tr><td>REFERENCE</td><td>相关文献编号，或递交序列的注册信息</td></tr><tr><td>COMMENT</td><td>关于序列的注释信息</td></tr><tr><td>FEATURES</td><td>序列特征表起始</td></tr><tr><td>BASE COUNT</td><td>碱基种类统计数</td></tr><tr><td>ORIGIN</td><td>序列</td></tr></tbody></table><h4 id="2）-页面信息"><a href="#2）-页面信息" class="headerlink" title="2） 页面信息"></a>2） 页面信息</h4><p>页面主体部分是该序列的信息，最上方两侧的GenBank和Send to 分别改变页面format和生成文件format。</p><p>右侧是扩展栏，上方的change region shown可以通过输入region自定义显示的区域，customize是自定义页面的内容。下方是自动关联了与该序列相关的许多链接，可以对该序列进行更详细的序列分析、查看相关文章、查看参考序列信息、了解相关基因信息、查找该基因的同源基因</p><img src="https://i.loli.net/2020/12/25/vwIxnbQdTgrlhO9.png" style="zoom: 50%;"><p>老师之前给的链接为 NM_173552.3</p><img src="https://i.loli.net/2020/12/25/ve8aitjQE2KVdFI.png" style="zoom: 50%;"><p>现已更新为NM_173552.5</p><img src="https://i.loli.net/2020/12/25/LTMfI2BF5GJUveH.png" style="zoom:50%;"><p>该序列全名为”Homo sapiens divergent protein kinase domain 2A (DIPK2A), transcript variant 1, mRNA“，为4330bp长的mRNA。Refseq accession number为NM_173552，版本号为NM_173552.5，为DIPK2A基因的主要转录本，序列来源于智人。</p><p>有7篇参考文献。根据COMMENT可知，这段序列 被初步审查过，最新一次更新是在2019年8月29号。</p><p>从FEATURE可知，该序列的来源于3号染色体长臂2区4带、基因名为DIPK2A，长度为4330bp，同义名为C3orf58、DIA1、GoPro49、HASF，编码divergent protein kinase domain 2A，GeneID 为205428并还记录了其在HGNC和MIM的ID号。外显子比对使用的工具是Splign2.1.0，读 框 内 终 止 密 码 子位置为436至438。</p><img src="https://i.loli.net/2020/12/25/Mu6mplZOsqUFERx.png" style="zoom:57%;"><p>CDS蛋白质编码区为511至1803，其Refseq 序列号为NP_775823.1，CCDS  id 号为CCDS3130.1并且给出了氨基酸序列，sig_peptide 信号肽位置为511至615，mat_peptide 成熟肽位置为616至1800，4306至4311为polyA的信号序列，4330为polyA位点</p><img src="https://i.loli.net/2020/12/25/SXaeGH7vNWqDmkO.png" style="zoom:57%;">]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信资源与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【生信资源与实践】第三次上机-miRNA-seq&amp;exome-seq</title>
      <link href="posts/649f.html"/>
      <url>posts/649f.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、miRNA-seq"><a href="#一、miRNA-seq" class="headerlink" title="一、miRNA-seq"></a>一、miRNA-seq</h2><h3 id="背景和软件技术介绍"><a href="#背景和软件技术介绍" class="headerlink" title="背景和软件技术介绍"></a>背景和软件技术介绍</h3><p><strong>①miRNA-seq的基本介绍：</strong></p><p>miRNA-seq是一种建库方法和数据处理上都稍有特殊的一种测序方法。它的原理是首先提取短链RNA，<strong>直接</strong>在RNA两端连接接头后建库，然后对所有小RNA进行一起测序，通过数据处理提取出其中潜在的miRNA并进行表达量分析。由于小RNA的长度都很短，所以50bp长的单端测序已经足够可以获得全长序列。</p><blockquote><p><strong>5’ 接头污染现象</strong>：通常而言测序的时候是<strong>不可能会测到5’接头</strong>，因为5’接头属于测序引物，由于miRNA很短，在建库过程中其实有一定概率会出现引物自连现象，也就是接头后面连着接头，这就是5’ 接头污染现象。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/linker.jpg" alt="基于NGS的miRNA测序以及接头序列介绍"></p><p>前体miRNA长度一般是70–120 bp，一般是茎环结构，也就是发夹结构，叫做hairpin。成熟之后，一般21-23 个nt。</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/t017744ad0e981315d2.png"></p><p><strong>miRNA的命名规则：</strong></p><p>miRNA成熟体简写成miR，而前体写成mir，再根据其物种名称，及被发现的先后顺序加上阿拉伯数字，如hsa-miR-122；</p><p>高度同源的miRNA在数字后写上英文小写字母(a,b,c,…)，如hsa-miR-34a，hsa-miR-34b，hsa-miR-34c等；</p><p> 若成熟的miRNA相同，但pre-miRNA和pri-miRNA和编码他们的基因来自于不同的基因组，则使用数字来表示，例如，mir-194-1和mir-194-2表示两个pre-， pri-miRNA剪切后的成熟miRNA是完全相同的，但却是两个不同的来源。</p><p>通常一个miRNA前体长度大约为70~80nt，很可能两个臂分别产生miRNA，则继续在名称之后加上-5p/-3p等，如hsa-miR-122-5p</p><p><strong>②工具介绍：</strong></p><ol><li><p>miRDeep是款较早的软件，和mireap一样，用于分析miRNA深度测序数据，运行的结果需要自己编程序，分析数据，并且它们两个适用的物种有局限性：只限于有已知参考基因组的物种；比如人，鸡，小鼠，果蝇，线虫等</p></li><li><p>miRExpress 分析高通量测序数据，分析microRNA表达情况的工具，由台湾国立交通大学开发。</p><p>官网：<a href="http://mirexpress.mbc.nctu.edu.tw/usage.php">http://mirexpress.mbc.nctu.edu.tw/usage.php</a></p><ul><li>“Raw_data_parse”以FASTQ格式处理原始数据序列，并使用Tab（\t）为分隔符输出唯一的序列及其counts。</li><li>“Trim_adapter”根据adaptor序列的输入处理是否包含adaptor的序列文件。</li><li>“alignmentSIMD”处理序列和参考序列中的比对。</li><li>“analysis”处理比对结果并构建miRNA表达谱</li></ul></li><li><p><strong>DESeq</strong>   差异基因表达分析</p><p>R包：<a href="http://bioconductor.org/packages/release/bioc/html/DESeq.html">http://bioconductor.org/packages/release/bioc/html/DESeq.html</a></p><p>是用于 <strong>RNA-seq的假设检验和差异基因表达分析</strong>的工具。DESeq 算法应用了负二项分布和似然比检验(LRT) ，基于count，它通过调整 m 值的平均值对数据进行标准化。DESeq2是DEseq的升级版，但是2只适用于有生物学重复的试验，而DEseq既可以做有生物学重复也可以做无重复（或部分重复的）试验。</p></li></ol><h3 id="1-变量命名"><a href="#1-变量命名" class="headerlink" title="1. 变量命名"></a>1. 变量命名</h3><p>进入demo/miRNA/文件夹, 输入下面命令</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span> -exOPTIND<span class="token operator">=</span>1PROJECT_HOME<span class="token operator">=</span><span class="token variable">$PWD</span>SCRIPT_HOME<span class="token operator">=</span><span class="token variable">$PROJECT_HOME</span>/perlBIN<span class="token operator">=</span><span class="token variable">$PROJECT_HOME</span>/binRESULT_DIR<span class="token operator">=</span><span class="token variable">$PROJECT_HOME</span>/resultDATA<span class="token operator">=</span><span class="token variable">$PROJECT_HOME</span>/dataSAMPLE1<span class="token operator">=</span><span class="token string">"sample-1"</span>SAMPLE2<span class="token operator">=</span><span class="token string">"sample-2"</span>FASTQ1<span class="token operator">=</span><span class="token variable">$DATA</span>/sample-1.fastqFASTQ2<span class="token operator">=</span><span class="token variable">$DATA</span>/sample-2.fastq<span class="token function">mkdir</span> -p <span class="token variable">$RESULT_DIR</span>/<span class="token variable">$SAMPLE1</span><span class="token function">mkdir</span> -p <span class="token variable">$RESULT_DIR</span>/<span class="token variable">$SAMPLE2</span></code></pre><p>运行过程截图</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105071521902.png"></p><h3 id="2-miRDeep-preProcessOfReads进行质量过滤清除接头"><a href="#2-miRDeep-preProcessOfReads进行质量过滤清除接头" class="headerlink" title="2. miRDeep preProcessOfReads进行质量过滤清除接头"></a>2. miRDeep preProcessOfReads进行质量过滤清除接头</h3><p>miRNA长度仅有22 nt，而测序一般至少都有50bp，因此需要去除一些接头序列。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## filter and remove adaptor</span><span class="token variable">$BIN</span>/preProcessOfReads -i <span class="token variable">$FASTQ1</span> -script <span class="token variable">$SCRIPT_HOME</span> -o <span class="token variable">$RESULT_DIR</span>/<span class="token variable">$SAMPLE1</span>/sequence -a TCGTATGCCGTCTTCTGCTTG -min 18 -max 30 <span class="token operator">&amp;</span><span class="token operator">></span> /dev/null <span class="token operator">&amp;</span><span class="token variable">$BIN</span>/preProcessOfReads -i <span class="token variable">$FASTQ2</span> -script <span class="token variable">$SCRIPT_HOME</span> -o <span class="token variable">$RESULT_DIR</span>/<span class="token variable">$SAMPLE2</span>/sequence -a TCGTATGCCGTCTTCTGCTTG -min 18 -max 30 <span class="token operator">&amp;</span><span class="token operator">></span> /dev/null <span class="token operator">&amp;</span><span class="token function">wait</span></code></pre><p>命令解释</p><pre class=" language-bash"><code class="language-bash">-i 输入测序数据-script 指定需要使用的脚本的位置-o 指定输出位置-min  miRNA读段的最短长度-max  miRNA读段的最长长度-a 表示adaptor sequence TCGTATGCCGTCTTCTGCTTG<span class="token operator">&amp;</span> 表示后台运行 wait表示等后台运行完毕后再执行接下来的命令</code></pre><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201108004116374.png">运行截图</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105071617368.png"></p><p>使用<code>less data/sample-1.fastaq</code>原有的测序序列，正常情况下，前端为miRNA序列，后端为3‘接头。</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105074113221.png"></p><p><code>less result/sample-1/sequence_adaper_3</code> 可以看到3’adaptor被清除了</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105071830648.png"></p><h3 id="3-使用awk-交换txt的一二两列"><a href="#3-使用awk-交换txt的一二两列" class="headerlink" title="3. 使用awk 交换txt的一二两列"></a>3. 使用awk 交换txt的一二两列</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## generate temp file</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span> "\t" <span class="token variable">$1</span>}'</span> <span class="token variable">$RESULT_DIR</span>/<span class="token variable">$SAMPLE1</span>/sequence_cluster.txt <span class="token operator">></span> <span class="token variable">$RESULT_DIR</span>/<span class="token variable">${SAMPLE1}</span>.merge <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span> "\t" <span class="token variable">$1</span>}'</span> <span class="token variable">$RESULT_DIR</span>/<span class="token variable">$SAMPLE2</span>/sequence_cluster.txt <span class="token operator">></span> <span class="token variable">$RESULT_DIR</span>/<span class="token variable">${SAMPLE2}</span>.merge </code></pre><p>awk命令打印sequence_cluster.txt的第二列和第一列然后重定向到result/sample-1(sample-2).merge文件中</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105071538031.png"></p><p>以sample-1为例子，查看原先的sequence_cluster.txt，左边是不同的miRNA序列，右边列是miRNA的counts</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105071910978.png"></p><p>查看交换两列后的result/sample-1.merge</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105072821624.png"></p><h3 id="4-miRExpress-alignmentSIMD比对和analysis计算表达量"><a href="#4-miRExpress-alignmentSIMD比对和analysis计算表达量" class="headerlink" title="4. miRExpress alignmentSIMD比对和analysis计算表达量"></a>4. miRExpress alignmentSIMD比对和analysis计算表达量</h3><p>①使用alignmentSIMD 比对</p><p>将前面处理的测序得到的miRNA比对到前体miRNA序列上</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## align</span><span class="token variable">$BIN</span>/alignmentSIMD -r <span class="token variable">$DATA</span>/hsa_precursor.txt -i <span class="token variable">$RESULT_DIR</span>/<span class="token variable">${SAMPLE1}</span>.merge -o <span class="token variable">$RESULT_DIR</span>/<span class="token variable">${SAMPLE1}</span>/ <span class="token variable">$BIN</span>/alignmentSIMD -r <span class="token variable">$DATA</span>/hsa_precursor.txt -i <span class="token variable">$RESULT_DIR</span>/<span class="token variable">${SAMPLE2}</span>.merge -o <span class="token variable">$RESULT_DIR</span>/<span class="token variable">${SAMPLE2}</span>/ </code></pre><p>查看命令</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201108112659554.png"></p><pre class=" language-shell"><code class="language-shell">-r 前体miRNA-i 输入序列-o 输出文件夹</code></pre><p>运行命令</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105071637283.png"></p><p>②使用analysis计算miRNA表达量</p><pre class=" language-shell"><code class="language-shell">## calculate expression (use miRExpress)$BIN/analysis -r $DATA/hsa_precursor.txt -m $DATA/hsa_miRNA.txt -d $RESULT_DIR/${SAMPLE1}/ -o ${SAMPLE1}.alignment -t ${SAMPLE1}.expression$BIN/analysis -r $DATA/hsa_precursor.txt -m $DATA/hsa_miRNA.txt -d $RESULT_DIR/${SAMPLE2}/ -o ${SAMPLE2}.alignment -t ${SAMPLE2}.expression</code></pre><p>查看命令</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201108115217424.png"></p><pre class=" language-shell"><code class="language-shell">-r 前体miRNA-m 成熟mRNA的信息-d 设置比对结果的文件夹-o 设置比对结果的文件名-t 输出表达量</code></pre><p>运行命令</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105071745281.png"></p><p>查看结果：</p><p>以sample-1为例，使用less查看result/ sample-1.alignment文件</p><p>以图中第一个的比对为例，hsa-mir-185，has代表homo sapiens，r小写是前体miRNA，下一列就是其序列hsa-miR-185-5p是hsa-mir-185 5’ 端的臂得到的miRNA，hsa-miR-185-3p则是从3’臂加工来的miRNA，这俩下面就是miRNA的比对结果，左边列代表miRNA序列，右边代表count数。</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105071927400.png"></p><p>查看sample-1表达量<code>less result/sample-1/sample-1.expression</code></p><p>左边列为对应的前体miRNA和成熟miRNA，右边为总的count数</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105074555579.png" style="zoom: 67%;"><p>查看sample-2表达量<code>less result/sample-2/sample-2.expression</code></p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105074646391.png" style="zoom:67%;"><h3 id="5-使用ln创建软链接"><a href="#5-使用ln创建软链接" class="headerlink" title="5. 使用ln创建软链接"></a>5. 使用ln创建软链接</h3><p>将expression文件夹的软链接直接放到result文件夹下</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ln</span> -sf  <span class="token variable">$RESULT_DIR</span>/<span class="token variable">${SAMPLE1}</span>/<span class="token variable">${SAMPLE1}</span>.expression <span class="token variable">$RESULT_DIR</span>/<span class="token variable">${SAMPLE1}</span>.expression<span class="token function">ln</span> -sf  <span class="token variable">$RESULT_DIR</span>/<span class="token variable">${SAMPLE2}</span>/<span class="token variable">${SAMPLE2}</span>.expression <span class="token variable">$RESULT_DIR</span>/<span class="token variable">${SAMPLE2}</span>.expression</code></pre><p>使用man查看ln命令参数，链接类型分为硬链接和软链接两种，默认的链接类型是硬链接。如果要创建软链接必须使用”-s”选项，其实ln比较像win系统的快捷方式，软连接保存的是其代表的文件的绝对路径，硬链接 可以认为是同一个文件使用了多个别名。</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105071938538.png" style="zoom:67%;"><h3 id="6-使用merge-expression-py-将整合两个样本表达量，为DESeq计算做准备"><a href="#6-使用merge-expression-py-将整合两个样本表达量，为DESeq计算做准备" class="headerlink" title="6. 使用merge_expression.py 将整合两个样本表达量，为DESeq计算做准备"></a>6. 使用merge_expression.py 将整合两个样本表达量，为DESeq计算做准备</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># merge two samples' expression level, prepare for running DESeq (a R package)</span><span class="token variable">$BIN</span>/merge_expression.py <span class="token variable">$RESULT_DIR</span>/<span class="token variable">${SAMPLE1}</span>.expression <span class="token variable">$RESULT_DIR</span>/<span class="token variable">${SAMPLE2}</span>.expression <span class="token operator">></span> <span class="token variable">$RESULT_DIR</span>/sample.expression.integral</code></pre><p>查看merge_expression.py内容</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token keyword">import</span> sys<span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token comment" spellcheck="true">#发现导入了defaultdict，defaultdict与普通的dict的区别在于，使用defaultdict任何未定义的key都会默认返回一个根据method_factory参数不同的默认值, 而相同情况下dict()会返回KeyError，相当于省去了创建key的一步</span>table <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 默认字典</span><span class="token comment" spellcheck="true"># lambda函数做为临时参数或者中间参数，可以输入多个变量，直接能过传入想要的函数中，这里其实是返回的defaultdict默认的参数</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> reader<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#读取参数1，即sample-1</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> reader<span class="token punctuation">:</span>        gene<span class="token punctuation">,</span> expression <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#使用\t分割</span>        table<span class="token punctuation">[</span>gene<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> expression <span class="token comment" spellcheck="true"># 各gene的value值，第一列放sample-1的表达量</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> reader<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#读取参数2，即sample-2</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> reader<span class="token punctuation">:</span>        gene<span class="token punctuation">,</span> expression <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>        table<span class="token punctuation">[</span>gene<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> expression <span class="token comment" spellcheck="true">#第二列放sample-2的表达量</span><span class="token keyword">print</span> <span class="token string">"miRNA\tsample1\tsample2"</span><span class="token keyword">for</span> gene <span class="token keyword">in</span> table<span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span>gene<span class="token punctuation">,</span> table<span class="token punctuation">[</span>gene<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> table<span class="token punctuation">[</span>gene<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#将字典整理为列表，</span>    <span class="token keyword">print</span> <span class="token string">"\t"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>str<span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 使用\t合并列表，以三列形式打印，</span></code></pre><p>输入上面的命令，运行py，将两个样本表达量整合在一个表上</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105071801588.png"></p><p>查看合并结果，行为miRNA名称，列为样本，值为count值</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201108123628526.png"></p><h3 id="7-使用R包DESeq对miRNA进行差异表达分析"><a href="#7-使用R包DESeq对miRNA进行差异表达分析" class="headerlink" title="7. 使用R包DESeq对miRNA进行差异表达分析"></a>7. 使用R包DESeq对miRNA进行差异表达分析</h3><pre class=" language-shell"><code class="language-shell"># find differentially expressed miRNAs with DESeqRscript $BIN/runDESeq.r $RESULT_DIR/sample.expression.integral $RESULT_DIR/sample.expression.diff</code></pre><p>查看runDESeq.r脚本内容</p><pre class=" language-R"><code class="language-R">library("DESeq") #加载DEseq包args <- commandArgs(T) # 将输入的变量赋值cds <- read.table(file=args[1], header=T, row.names=1)condition <- factor(c("sample1", "sample2"))cds <- newCountDataSet(cds, condition)cds <- estimateSizeFactors(cds) # 估计统计数的大小因子cds <- estimateDispersions(cds, method="blind", sharingMode="fit-only")res <- nbinomTest( cds, "sample1", "sample2")write.table(res, file=args[2], sep="\t", quote=F)</code></pre><p>查看结果result/ sample.expression.diff</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105072003129.png"></p><p>使用excel打开</p><p>各列表示的是：</p><ul><li>id：feature identier</li><li>baseMean：mean normalised counts, averaged over all samples from both conditions</li><li>baseMeanA：mean normalised counts from condition A</li><li>baseMeanB：mean normalised counts from condition B</li><li>foldChange：fold change from condition A to B，差异倍数</li><li>log2FoldChange ：the logarithm (to basis 2) of the fold change，取log2，这样可以让缩小差异特别大的和差异比较小的数值之间的差距。</li><li>pval：pvalue for the statistical signicance of this change，差异的显著性</li><li>padj：p-adjusted， for multiple testing with the Benjamini-Hochberg procedure，用来判定P值是否可信</li></ul><p>发现原文件多了一列序号，导致列名和列并不匹配，手动修改后，用excel查看</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201108131245447.png"></p><h2 id="二、exome-seq"><a href="#二、exome-seq" class="headerlink" title="二、exome-seq"></a>二、exome-seq</h2><h3 id="背景和软件技术介绍-1"><a href="#背景和软件技术介绍-1" class="headerlink" title="背景和软件技术介绍"></a>背景和软件技术介绍</h3><p><strong>①外显子测序简介：</strong></p><p>外显子（exon）是真核生物基因的一部分，包含着合成蛋白质所需要的信息。全部外显子，称为“外显子组”（Exome）。外显子组测序（Exome sequencing）是指利用序列捕获技术将全基因组外显子区域DNA捕捉并富集后进行高通量测序的基因组分析方法。由于外显子组测序只需针对外显子区域的DNA即可（例如：人类外显子组只占人类基因组长度的约1%，但是目前由DNA变异引起的疾病估计有85%以上来自于外显子组区域的变异），因此远比进行全基因组序列测序更简便、经济、高效，其目标区域覆盖度也更高，便于变异检测。结合公共数据库提供的大量外显子的数据，测序数据能更好的解释研究的结果。<strong>其不足之处是只能获得外显子区域内部或边界的变异信息，不能检测到基因组内较大的结构性变异（SV）。</strong></p><p><strong>生物信息学分析流程</strong></p><ol><li>前期数据处理：<ul><li>预处理：原始数据准备下载、质控过滤</li><li>比对参考基因组（需要先构建索引）</li><li>处理得到的比对bam文件（包括排序、索引、合并等等）</li></ul></li><li>寻找变异：<ul><li>利用GATK, bcftools 或 freebayes找到初步的raw variants</li><li>对raw Variants 进行筛选</li></ul></li><li>变异文件深度挖掘：<ul><li>统计 variant 的各种分布情况和基因型信息</li><li>变异注释</li><li>结合相关数据库，寻找特定位点</li></ul></li></ol><p><strong>②基因组变异介绍：</strong></p><ol><li><p>单碱基变异，学名单核苷酸多态性（<strong>SNP</strong>），原来的定义是单个碱基导致的群体中广泛存在的（约1%）的多态性，后来指与参考基因组不同的位点，它最常见也最简单。正常人的全基因组测序结果中大概有几百万个SNP，外显子组中也存在数万个SNP。对于人来说，SNP之间的平均距离在1.2M左右，但部分SNP位点仅间隔数个碱基甚至相邻。SNP一般可以分为：</p><ul><li><p>发生在编码区的SNP，由于密码子具有简并性不一定会引起氨基酸的改变：引起氨基酸变化的叫做 <strong>non-Synonymous SNP</strong>，不引起改变的叫做<strong>Synonymous SNP</strong>。</p></li><li><p>如果氨基酸发生了改变，又有两种情况：氨基酸的密码子变成另一种，因而导致多肽链的氨基酸种类和顺序发生改变，这就是<strong>错义突变</strong>。如果突变导致编码氨基酸的密码子变成了终止子，蛋白质合成进行到该突变位点时会提前终止，就导致了<strong>无义突变</strong>。</p></li></ul></li><li><p>小片段的插入与缺失（合称<strong>InDel</strong>），一般发生在基因组上短的有序的基因片段，长度小于50bp。</p></li><li><p>更大范围的<strong>结构性变异（SV）</strong>，长度大于50bp的片段的插入、缺失（Big Indel），染色体倒位（Inversion）、染色体之间或者内部发生易位（Translocation）、拷贝数变异（CNV）、串联重复（Tandem repeat）、嵌合体（chimera）</p></li></ol><p><strong>③软件介绍</strong></p><ol><li><p>BWA</p><p>即Burrows-Wheeler-Alignment Tool，BWA 是一种能够将差异度较小的序列比对到一个较大的参考基因组上的软件包。目前版本的BWA主要使用三种算法，分别是BWA-backtrack， BWA-SW和BWA-MEM。其实之前短序列比对主要使用的是BWT算法。</p><p>BWA-backtrack，软件中的aln，samse，sampe比对都使用是bwa-backtack算法，主要适合比较短的reads，尤其是100bp以下的；<br>BWA-SW中的SW 表示affine-gap Smith-Waterman；<br>BWA-MEM中的MEM表示maximal exact matches；BWA-SW和BWA-MEM都支持长read是和split比对，reads长度可以从70bp到1M，BWA-MEM是更新的算法，更快也更准确，是最推荐使用的算法，也是使用范围最广泛的。</p></li><li><p>GATK <a href="https://software.broadinstitute.org/gatk/">https://software.broadinstitute.org/gatk/</a></p><p>GATK 是 Genome Analysis ToolKit 的缩写，是一款从高通量测序数据中分析变异信息的软件，是目前最主流的snp calling 软件之一。GATK 设计之初是用于分析人类的全外显子和全基因组数据，随着不断发展，现在也可以用于其他的物种，还支持CNV和SV变异信息的检测。<br>寻找变异使用HaplotypeCaller，它利用实时de novo对有可能是变异的区域进行局部组装，寻找SNP和InDel。</p><p>在官网上，提供了完整的分析流程，叫做GATK Best Practices。</p></li></ol><h3 id="1-变量命名-1"><a href="#1-变量命名-1" class="headerlink" title="1. 变量命名"></a>1. 变量命名</h3><p>数据和软件配置相对路径</p><p>可以看到文件夹下有NA12878 的fastaq文件和其index文件，以及人类参考基因组b37版本序列</p><pre class=" language-bash"><code class="language-bash">DATA<span class="token operator">=</span><span class="token variable">$PWD</span>/dataINDEX<span class="token operator">=</span><span class="token variable">$PWD</span>/indexBIN<span class="token operator">=</span><span class="token variable">$PWD</span>/binSAMPLE1<span class="token operator">=</span>NA12878.hiseq.wgs_chr20_2mb.30xPE_1.fastqSAMPLE2<span class="token operator">=</span>NA12878.hiseq.wgs_chr20_2mb.30xPE_2.fastqSAM<span class="token operator">=</span>NA12878REF_SNP<span class="token operator">=</span><span class="token variable">$INDEX</span>/dbsnp_b37_20.vcfREF_INDEL<span class="token operator">=</span><span class="token variable">$INDEX</span>/indels_b37_20.vcfREF<span class="token operator">=</span><span class="token variable">$INDEX</span>/human_b37_20.fastaALIGNMENT<span class="token operator">=</span><span class="token variable">$PWD</span>/result/alignmentGATK<span class="token operator">=</span><span class="token variable">$PWD</span>/result/GATKANNO<span class="token operator">=</span><span class="token variable">$PWD</span>/result/annotation</code></pre><h3 id="2-BWA比对，处理得到bam文件"><a href="#2-BWA比对，处理得到bam文件" class="headerlink" title="2. BWA比对，处理得到bam文件"></a>2. BWA比对，处理得到bam文件</h3><h4 id="①使用BWA把短读段比对到基因组上"><a href="#①使用BWA把短读段比对到基因组上" class="headerlink" title="①使用BWA把短读段比对到基因组上"></a>①使用BWA把短读段比对到基因组上</h4><p>BWA的使用需要两种输入文件：</p><ol><li>Reference genome data参考基因组</li><li>Short reads data 短reads序列</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token variable">$BIN</span>/bwa aln -q 15 -l 35 -k 2 -t 1 \    -f <span class="token variable">$ALIGNMENT</span>/<span class="token variable">$SAMPLE1</span>.sai \    <span class="token variable">$REF</span> \    <span class="token variable">$DATA</span>/<span class="token variable">$SAMPLE1</span> <span class="token operator">&amp;</span><span class="token variable">$BIN</span>/bwa aln -q 15 -l 35 -k 2 -t 1 \    -f <span class="token variable">$ALIGNMENT</span>/<span class="token variable">$SAMPLE2</span>.sai \    <span class="token variable">$REF</span> \    <span class="token variable">$DATA</span>/<span class="token variable">$SAMPLE2</span> <span class="token operator">&amp;</span><span class="token function">wait</span></code></pre><p>命令介绍</p><pre class=" language-shell"><code class="language-shell">aln gapped/ungapped alignment-q 15     quality threshold.-l 35    seed length，种子匹配区域长度。-k 2    在种子区域中最多只能由两个mismatch，-t 10    10个线程-f  输出</code></pre><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105081639151.png"></p><p>输出的是sai文件。</p><h4 id="②使用bwa-sampe合并sai文件并进行压缩排序"><a href="#②使用bwa-sampe合并sai文件并进行压缩排序" class="headerlink" title="②使用bwa sampe合并sai文件并进行压缩排序"></a>②使用bwa sampe合并sai文件并进行压缩排序</h4><p>将两个sai文件合并成为一个sam文件，然后对sam文件压缩并且排序产生一个bam文件</p><p> sampe 双端比对，smape中的 pe 是 paired-end 的简写</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#merge to read together with sampe</span><span class="token variable">$BIN</span>/bwa sampe -f <span class="token variable">$ALIGNMENT</span>/<span class="token variable">$SAM</span>.sam \    -r <span class="token string">"@RG\tID:<span class="token variable">$SAM</span>\tLB:<span class="token variable">$SAM</span>\tSM:<span class="token variable">$SAM</span>\tPL:ILLUMINA"</span> \    <span class="token variable">$REF</span> \    <span class="token variable">$ALIGNMENT</span>/<span class="token variable">$SAMPLE1</span>.sai \    <span class="token variable">$ALIGNMENT</span>/<span class="token variable">$SAMPLE2</span>.sai \    <span class="token variable">$DATA</span>/<span class="token variable">$SAMPLE1</span> \    <span class="token variable">$DATA</span>/<span class="token variable">$SAMPLE2</span> </code></pre><p>由于bwa生成的sam文件是按照字典式的排序法进行的排序，之后我们要用的GATK是按照染色体组型进行的，因此我们需要对sam文件进行重排，压缩成二进制的bam文件</p><pre class=" language-shell"><code class="language-shell">#sort sam and compress the sam to bam filejava -jar $BIN/SortSam.jar \    SO=coordinate \    INPUT=$ALIGNMENT/$SAM.sam \    OUTPUT=$ALIGNMENT/$SAM.sam.bam \    VALIDATION_STRINGENCY=LENIENT \    CREATE_INDEX=true</code></pre><p>运行命令</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105081716402.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105081750257.png"></p><h4 id="③使用Picard的MarkDuplicate工具去除重复"><a href="#③使用Picard的MarkDuplicate工具去除重复" class="headerlink" title="③使用Picard的MarkDuplicate工具去除重复"></a>③使用Picard的MarkDuplicate工具去除重复</h4><p>在NGS测序之前都需要先构建测序文库：通过物理（超声）打断或者化学试剂（酶切）切断原始的DNA序列，然后选择特定长度范围的序列去进行PCR扩增并上机测序。这个过程中产生的重复reads，增大了变异检测结果的<strong>假阴率和假阳率</strong>。原因如下：</p><ol><li><p>PCR反应过程中也会带来新的碱基错误。发生在前几轮的PCR扩增发生的错误会在后续的PCR过程中扩大，同样带来假的变异；</p></li><li><p>PCR反应可能会对包含某一个碱基的DNA模版扩增更加剧烈（这个现象称为PCR Bias）</p></li><li><p>如果某个变异位点的变异碱基都是来自于PCR重复，而我们却认为它深度足够判断是真的变异位点，这个结论其实有很大可能是假阳性。</p></li></ol><p>因此我们需要去除PCR扩增产生的重复片段，希望去除在测序过程中产生的一个片段被多次测序产生错误的影响。</p><p>运行的是java脚本</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#MARK AND REMOVE DUPLICATES</span>java -jar <span class="token variable">$BIN</span>/MarkDuplicates.jar \    INPUT<span class="token operator">=</span><span class="token variable">$ALIGNMENT</span>/<span class="token variable">$SAM</span>.sam.bam \    OUTPUT<span class="token operator">=</span><span class="token variable">$ALIGNMENT</span>/<span class="token variable">$SAM</span>.sam.dedup.bam \    METRICS_FILE<span class="token operator">=</span><span class="token variable">$ALIGNMENT</span>/mark.metrics \    MAX_RECORDS_IN_RAM<span class="token operator">=</span>5000000 \    ASSUME_SORTED<span class="token operator">=</span>true \    VALIDATION_STRINGENCY<span class="token operator">=</span>LENIENT \    REMOVE_DUPLICATES<span class="token operator">=</span>true \    CREATE_INDEX<span class="token operator">=</span>true</code></pre><pre class=" language-shell"><code class="language-shell">MAX_RECORDS_IN_RAM=5000000    在内存中一次最大能够处理5000000条reads</code></pre><p>运行命令</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105081806148.png"></p><h3 id="3-使用GATK进行变异检测"><a href="#3-使用GATK进行变异检测" class="headerlink" title="3. 使用GATK进行变异检测"></a>3. 使用GATK进行变异检测</h3><h4 id="①local-realignment-局部重比对和recalibration校对"><a href="#①local-realignment-局部重比对和recalibration校对" class="headerlink" title="①local realignment 局部重比对和recalibration校对"></a>①local realignment 局部重比对和recalibration校对</h4><p>这一步的目的就是<strong>将比对到indel附近的reads进行局部重新比对，将比对的错误率降到最低</strong>。一般来说，绝大部分需要进行重新比对的基因组区域，都是因为插入/缺失的存在，因为在indel附近的比对会出现大量的碱基错配，这些碱基的错配很容易被误认为SNP。</p><p>RealignerTargetCreator定位出所有需要进行序列重比对的目标区域</p><pre class=" language-shell"><code class="language-shell">DEDUP=$SAM.sam.dedup.bam#create intervaljava -jar $BIN/GenomeAnalysisTK.jar \    -T RealignerTargetCreator \    -R $REF \    -o $GATK/$DEDUP.intervals \    -I $ALIGNMENT/$DEDUP \    -known $REF_INDEL </code></pre><p>IndelRealigner 对所有在第一步中找到的目标区域运用算法进行序列重比对，最后得到新的重比对bam文件。</p><pre class=" language-shell"><code class="language-shell">#realignmentjava -jar $BIN/GenomeAnalysisTK.jar \    -T IndelRealigner \    -R $REF \    -I $ALIGNMENT/$DEDUP \    -targetIntervals $GATK/$DEDUP.intervals \    -known $REF_INDEL \    -o $GATK/$DEDUP.realigned.bam</code></pre><p>在操作上GATK的recalibration被分为两步走：较正（BaseRecalibrator）以及输出（PrintReads）。之所以分为两步，是因为可以通过连续两次调用BaseRecalibrator来生成一个recalibration前后比对图，从而实现输出可视化效果及输出结果兼顾</p><pre class=" language-shell"><code class="language-shell">#recalibration java -jar $BIN/GenomeAnalysisTK.jar \    -T BaseRecalibrator \    -R $REF \    -I $GATK/$DEDUP.realigned.bam \    -knownSites $REF_SNP \    -knownSites $REF_INDEL \    -rf BadCigar \    -o $GATK/$DEDUP.realigned.bam.recal.grp# 使用PrintReads 做SNP检测java -jar $BIN/GenomeAnalysisTK.jar \    -T PrintReads \    -R $REF \    -I $GATK/$DEDUP.realigned.bam \    -BQSR $GATK/$DEDUP.realigned.bam.recal.grp \    -o $GATK/$DEDUP.realigned.bam.recal.bam</code></pre><p>使用GATK的ReduceReads工具缩小文件，对BAM文件进行有损压缩，压缩后的文件 甚至可以小至压缩前的1/100大小。</p><pre class=" language-shell"><code class="language-shell">java -jar $BIN/GenomeAnalysisTK.jar \    -T ReduceReads \    -R $REF \    -I $GATK/$DEDUP.realigned.bam.recal.bam \    -o $GATK/$DEDUP.realigned.bam.recal.reduced.bam</code></pre><p>输入上述命令</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105082830416.png" style="zoom: 43%;"><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105082703458.png" style="zoom:43%;"><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105082307967.png" style="zoom:43%;"><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105082758395.png" style="zoom:43%;"><img src="assets/image-20201105082214857.png" style="zoom:43%;"><h4 id="②使用HaplotypeCaller寻找SNP和Indel"><a href="#②使用HaplotypeCaller寻找SNP和Indel" class="headerlink" title="②使用HaplotypeCaller寻找SNP和Indel"></a>②使用HaplotypeCaller寻找SNP和Indel</h4><p>对于突变分析，基本的问题就是怎么判断一个突变是测序误差（random machine noise）还是真实的突变，这是一个large scale Bayesian inference problem。在GATK中提供了两种方法，一是不基于模型的UnifiedGenotyper，它速度非常快，不考虑相邻碱基的影响。另一个是基于体外拼接模型的HaplotypeCaller。后者是GATK推荐的方式，它还支持2倍体模式。</p><p> HaplotypeCaller，简称HC，能过通过对活跃区域（也就是与参考基因组不同处较多的区域）局部重组装，同时寻找SNP和INDEL。</p><pre class=" language-shell"><code class="language-shell">#call snv with hcmkdir $GATK/HCiBAM=$DEDUP.realigned.bam.recal.reduced.bamHC_DIR=$GATK/HCHC_NAME=NA12878.HC#discoveryjava -jar $BIN/GenomeAnalysisTK.jar \    -T HaplotypeCaller \    -R $REF \    --genotyping_mode DISCOVERY \    -nct 10 \    --dbsnp $REF_SNP \    -stand_emit_conf 10 \    -stand_call_conf 30 \    -I $GATK/$iBAM \    -o $HC_DIR/$HC_NAME.variants.vcf</code></pre><pre class=" language-shell"><code class="language-shell">--dbsnp    是将已知的snp标记出来。--stand_call_conf 在变异检测过程中，用于区分低质量变异位点和高质量变异位点的阈值。只有质量值高于这个阈值的位点才会被视为高质量的。低于这个质量值的变异位点会在输出结果中标注LowQual--stand_emit_conf 在变异检测过程中，所容许的最小质量值。只有大于等于这个设定值的变异位点会被输出到结果中</code></pre><p>运行命令</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105084614054.png"></p><h4 id="③过滤SNP-indel"><a href="#③过滤SNP-indel" class="headerlink" title="③过滤SNP/indel"></a>③过滤SNP/indel</h4><p>这两个步骤是从variant文件中抽出snp和indel按照通过一定的标准filterexpression（过滤指标），最大可能地剔除假阳性的结果，并尽可能地保留最多的正确数据。这种方法也叫硬过滤</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#使用SelectVariants，选出SNP</span>java -jar <span class="token variable">$BIN</span>/GenomeAnalysisTK.jar \    -R <span class="token variable">$REF</span> \    -T SelectVariants \    -V <span class="token variable">$HC_DIR</span>/<span class="token variable">$HC_NAME</span>.variants.vcf \    -selectType SNP \    -o <span class="token variable">$HC_DIR</span>/<span class="token variable">$HC_NAME</span>.snp.vcf<span class="token comment" spellcheck="true"># 为SNP作硬过滤</span>java -jar <span class="token variable">$BIN</span>/GenomeAnalysisTK.jar \    -R <span class="token variable">$REF</span> \    -T VariantFiltration \    -V <span class="token variable">$HC_DIR</span>/<span class="token variable">$HC_NAME</span>.snp.vcf \    --clusterWindowSize 10 \    --clusterSize 3 \    --filterExpression \    <span class="token string">"DP &lt; 8 || QD &lt; 2.0 || FS > 60.0 || MQ &lt; 40.0 || HaplotypeScore > 13.0 || MappingQualityRankSum &lt; -12.5 || ReadPosRankSum &lt; -8.0"</span> \    --filterName <span class="token string">"GATK_snp_filter"</span> \    -o <span class="token variable">$HC_DIR</span>/<span class="token variable">$HC_NAME</span>.snp.filter.tmp </code></pre><pre><code>--clusterWinowSize 10    表示滑动窗口为10bp--clusterSize 3    表示在10bp中最多有3个snp--filterExpression 这个式子其实是过滤掉不要的变异位点</code></pre><blockquote><p>过滤使用的数据指标（这些指标都在VCF文件的INFO域中可以看到)</p><ul><li>QualByDepth（QD）:QD是变异质量值（Quality）除以覆盖深度（Depth）得到的比值,覆盖深度是这个位点上所有含有变异碱基的样本的覆盖深度之和, QD这个值描述的实际上就是单位深度的变异质量值.</li><li>FisherStrand (FS): FS是一个通过Fisher检验的p-value转换而来的值，它要描述的是测序或者比对时对于只含有变异的read以及只含有参考序列碱基的read是否存在着明显的正负链特异性（Strand bias).把FS设置为大于60,是为了尽可能保留更多好的变异。</li><li>StrandOddsRatio (SOR)：用的是symmetric odds ratio test，数据是一个2×2的列联表，考虑的其实就是ALT和REF这两个碱基的read覆盖方向的比例是否有偏，可以对FS进行校正。这里没有用到</li><li>RMSMappingQuality (MQ)：是所有比对至该位点上的read的比对质量值的均方根（先平方、再平均、然后开方）它和平均值相比更能够准确地描述比对质量值的离散程度</li><li>MappingQualityRankSumTest (MQRankSum)：根据REF和ALT的read的比对质量来评估可信度</li><li>ReadPosRankSumTest (ReadPosRankSum)：: 通过变异在read的位置来评估变异可信度，通常在read的两端的错误率比较高</li></ul></blockquote><p>运行命令</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105084920180.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105084954644.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105085025630.png"></p><p><strong>过滤indel</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#filter indel</span>java -jar <span class="token variable">$BIN</span>/GenomeAnalysisTK.jar \    -R <span class="token variable">$REF</span> \    -T SelectVariants \    -V <span class="token variable">$HC_DIR</span>/<span class="token variable">$HC_NAME</span>.variants.vcf \    -selectType INDEL \    -o <span class="token variable">$HC_DIR</span>/<span class="token variable">$HC_NAME</span>.indel.vcfjava -jar <span class="token variable">$BIN</span>/GenomeAnalysisTK.jar \    -R <span class="token variable">$REF</span> \    -T VariantFiltration \    -V <span class="token variable">$HC_DIR</span>/<span class="token variable">$HC_NAME</span>.indel.vcf \    --clusterWindowSize 10 \    --clusterSize 3 \    --filterExpression \    <span class="token string">"DP &lt; 8 || QD &lt; 3.0 || FS > 200.0 || ReadPosRankSum &lt; -20.0"</span> \    --filterName <span class="token string">"GATK_indel_filter"</span> \    -o <span class="token variable">$HC_DIR</span>/<span class="token variable">$HC_NAME</span>.indel.filter.tmp </code></pre><pre class=" language-bash"><code class="language-bash">--clusterWinowSize 10    表示滑动窗口为10bp--clusterSize 3    表示在10bp中最多有3个snp</code></pre><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105085256568.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105085323288.png"></p><p>VariantFiltration 功能仅会在 VCF 文件中对每个变异位点添加过滤注释，因此还需要用过滤注释提取出通过过滤标准的变异，重新合并过滤后的SNP和Indel</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#filter </span><span class="token function">awk</span> -f <span class="token variable">$BIN</span>/pipe_pickup.awk <span class="token variable">$HC_DIR</span>/<span class="token variable">$HC_NAME</span>.snp.filter.tmp <span class="token operator">></span> <span class="token variable">$HC_DIR</span>/<span class="token variable">$HC_NAME</span>.snp.filter<span class="token function">awk</span> -f <span class="token variable">$BIN</span>/pipe_pickup.awk <span class="token variable">$HC_DIR</span>/<span class="token variable">$HC_NAME</span>.indel.filter.tmp <span class="token operator">></span> <span class="token variable">$HC_DIR</span>/<span class="token variable">$HC_NAME</span>.indel.filter</code></pre><p>$BIN/pipe_pickup.awk内容</p><pre class=" language-bash"><code class="language-bash">BEGIN<span class="token punctuation">{</span>        FS<span class="token operator">=</span><span class="token string">"    "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span>        if<span class="token punctuation">(</span>/^<span class="token comment" spellcheck="true">#/ || $7=="PASS") print $0;</span><span class="token punctuation">}</span>~</code></pre><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105084740194.png"></p><h3 id="4-使用ANNOVAR对文件进行注释"><a href="#4-使用ANNOVAR对文件进行注释" class="headerlink" title="4.使用ANNOVAR对文件进行注释"></a>4.使用ANNOVAR对文件进行注释</h3><p>vcf文件中保存的突变位点不能直接使用，只有根据已有数据库进行注释，才能知道该位点的有何功能，是否与疾病相关以及其它信息。</p><p>ANNOVAR是突变注释的常用软件，是一个perl编写的命令行工具，能在安装了perl解释器的多种操作系统上执行。允许多种输入文件格式，包括最常被使用的VCF格式。输出文件也有多种格式，包括注释过的VCF文件、用tab或者逗号分隔的txt文件。ANNOVAR能快速注释遗传变异并预测其功能</p><p>对变量进行命名</p><pre class=" language-shell"><code class="language-shell">HC_DIR=$GATK/HCHC_NAME=NA12878.HCmkdir $ANNO/snpmkdir $ANNO/indelFILE=NA12878SNP=$HC_DIR/$HC_NAME.snp.filterINDEL=$HC_DIR/$HC_NAME.indel.filterSNP_DIR=$ANNO/snpINDEL_DIR=$ANNO/indelHUMANDB=/project/liucj/REFDATA/humandb</code></pre><pre><code>convert2annovar.pl是将得到的vcf文件转换成annovar能够识别的avinput文件table_annovar.pl是ANNOVAR这个软件中的一种注释方式，annovar有三种注释方式Gene-based Annotation(基于基因的注释)，Region-based Annotation（基于区域的注释），Filter-based Annotation（基于过滤的注释）。看起来很复杂实际做起来很简单，用table_annovar.pl进行注释，可一次性完成三种类型的注释。</code></pre><p><strong>注释indel</strong></p><pre class=" language-shell"><code class="language-shell">#annotate indelperl $BIN/convert2annovar.pl -format vcf4 -i $INDEL > $INDEL_DIR/$FILE.indel.vcf.avinputperl $BIN/table_annovar.pl \    $INDEL_DIR/$FILE.indel.vcf.avinput \    $HUMANDB \    -buildver hg19 \    -protocol refGene,ensGene,knownGene,ccdsGene,sift,cosmic65,esp6500si_all,snp137 \    -operation g,g,g,g,f,f,f,f \    -outfile $INDEL_DIR/$FILE.indel &</code></pre><pre class=" language-shell"><code class="language-shell">-buildver hg19    采用的基因组是hg19版-protocol 是选择需要哪些内容进行注释</code></pre><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105085550174.png" style="zoom:40%;"><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201105085616169.png" style="zoom:40%;"><p><strong>注释SNP位点</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#annotate snp</span>perl <span class="token variable">$BIN</span>/convert2annovar.pl -format vcf4 -i <span class="token variable">$SNP</span> <span class="token operator">></span> <span class="token variable">$SNP_DIR</span>/<span class="token variable">$FILE</span>.snp.vcf.avinputperl <span class="token variable">$BIN</span>/table_annovar.pl \    <span class="token variable">$SNP_DIR</span>/<span class="token variable">$FILE</span>.snp.vcf.avinput \    <span class="token variable">$HUMANDB</span> \    -buildver hg19 \    -protocol refGene,ensGene,knownGene,ccdsGene,sift,cosmic65,esp6500si_all,snp137 \    -operation g,g,g,g,f,f,f,f \    -outfile <span class="token variable">$SNP_DIR</span>/<span class="token variable">$FILE</span>.snp <span class="token operator">&amp;</span></code></pre><img src="assets/image-20201105090005719.png" style="zoom:50%;"><p>查看result/annotation/snp和 result/annotation/indel文件夹的结果文件情况</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201110231832918.png" style="zoom:53%;"><h3 id="5-查看SNP位点和indel位点注释文件"><a href="#5-查看SNP位点和indel位点注释文件" class="headerlink" title="5. 查看SNP位点和indel位点注释文件"></a>5. 查看SNP位点和indel位点注释文件</h3><p>将result/GATK文件夹下的NA12878.sam.dedup.bam.realigned.bam和NA12878.sam.dedup.bam.realigned.bai通过FileZilla传输到本地电脑，用IGV打开bam文件，选择人类基因组hg19，染色体chr20，然后选择感兴趣的SNP位点和indel位点。</p><p><code>less result/annotation/snp/NA12878.snp.hg19_multianno.txt</code>，查看SNP位点情况</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201110231736520.png"></p><p>选择一个SNP位点chr20:76771</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201111074331843.png"></p><p>可以看到chr20：76771这个点参考基因组是C，而比对的reads上这个位置有一半是T一半是C，所以上面的Coverage显示一半红一半蓝</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201111074115513.png"></p><p><code> less result/annotation/indel/NA12878.indel.hg19_multianno.txt</code>查看插入缺失位点情况</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201110231708272.png"></p><p>选择一个缺失位点 chr20:1830449-1830452</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201110232647669.png"></p><p>打开IGV查看情况，可以发现所在位置确实有4个read确实缺失了AAAT</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201111074645139.png"></p><h2 id="附-：VCF文件的了解"><a href="#附-：VCF文件的了解" class="headerlink" title="附 ：VCF文件的了解"></a>附 ：VCF文件的了解</h2><blockquote><p>全名是：Variant Call Format，它是存储变异位点的标准格式</p><p>VCF使用UTF-8编码，有两大部分：一部分是注释信息（以##开头），一部分是具体突变信息</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/image-20201111080451014.png"></p><p>数据文件的头信息（#表示），主要有CHROM、POS、ID、REF、ALT、QUAL、FILTER、INFO、FORAMT、SAMPLE【前8列必须要有】</p><ul><li><p>CHROM： 表示变异位点是在哪个contig 里call出来的，如果是人类全基因组的话那就是chr1…chr22，chrX,Y,M。</p></li><li><p>POS：变异位点相对于参考基因组所在的位置，如果是indel，就是第一个碱基所在的位置。</p></li><li><p>ID：如果call出来的SNP存在于dbSNP数据库里，就会显示相应的dbSNP里的rs编号。</p></li><li><p>REF和ALT：在这个变异位点处，参考基因组中所对应的碱基和研究对象基因组中所对应的碱基。【多个用逗号分隔；对于SNP是单个碱基的改变；对于InDel是碱基数量的改变】</p></li><li><p>QUAL：变异位点质量值（与测序数据一样也是用Phred格式表示）。Q=-10lgP， P是变异位点存在的概率。当Q=20时，错误率就控制在了0.01。</p></li><li><p>FILTER：通过标准的好的变异位点的FILTER一栏就会注释一个PASS，如果没有通过过滤，就会在FILTER这一栏提示除了PASS的其他信息。如果这一栏是一个“.”的话，就说明没有进行过任何过滤。</p></li><li><p>INFO：结合描述理解有关该位点的额外信息 【包含信息最多，形式为Tag=Value, 分号分隔】</p></li><li><p>FORMAT：变异位点格式</p></li><li><p>SMAPLE：使用的样本名称，由bam文件中@RG的SM标签决定</p></li></ul><p>其中变异位点格式，例如GT:AD:DP:GQ:PL</p><ul><li>GT:样品的基因型（genotype）： 表示这个样本的基因型，对于一个二倍体生物，GT值表示的是这个样本在这个位点所携带的两个等位基因。0表示跟REF一样；1表示表示跟ALT一样；2表示第二个ALT。当只有一个ALT 等位基因的时候，0/0表示纯和且跟REF一致；0/1表示杂合，两个allele一个是ALT一个是REF；1/1表示纯和且都为ALT</li><li>AD(Allele Depth)为sample中每一种allele的reads覆盖度,在diploid（二倍体，或可指代多倍型）中则是用逗号分隔的两个值，前者对应REF基因，后者对应ALT基因型</li><li>DP(Depth)为sample中该位点的覆盖度，是所支持的两个AD值（逗号前和逗号后）的加和</li><li>GQ:表示最可能的基因型的质量值。表示的意义同QUAL。</li><li>PL: 对应3个以逗号隔开的值，这三个值分别表示该位点基因型是0/0，0/1，1/1的没经过先验的标准化Phred-scaled似然值（L）。这个值越小，支持概率就越大，也就是说是这个基因型的可能性越大。</li></ul></blockquote><h2 id="附：参考资料"><a href="#附：参考资料" class="headerlink" title="附：参考资料"></a>附：参考资料</h2><ul><li><p><a href="https://mubu.com/doc/7A3T8hpUlLv#">学徒第5月-miRNA-seq实战演练</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/MicroRNA">miRNA-wikipedia</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/34878471">GATK4.0和全基因组数据分析实践（下） - 黄树嘉的文章 - 知乎</a></p></li><li><p><a href="https://www.cnblogs.com/emanlee/p/4562064.html">VCF （Variant Call Format）格式详解</a></p></li><li><p><a href="https://cloud.tencent.com/developer/news/180158">GATK4.0全基因组和全外显子组分析实战</a></p></li><li><p><a href="https://www.zhihu.com/question/64967200">如何理解人全外显子测序的Duplication问题？</a></p></li><li><p><a href="https://qiubio.com/archives/3207">GATK练习题</a></p></li><li><p><a href="https://www.jianshu.com/p/a84ff2b2ab59">Call变异？就是召唤啦！</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信资源与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【生信资源与实践】第二次上机报告</title>
      <link href="posts/8849.html"/>
      <url>posts/8849.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、RNA-seq-HISAT-StringTie-ballgown"><a href="#一、RNA-seq-HISAT-StringTie-ballgown" class="headerlink" title="一、RNA-seq (HISAT - StringTie - ballgown)"></a>一、RNA-seq (HISAT - StringTie - ballgown)</h2><p>使用的软件介绍</p><ol><li><p><strong>HISAT介绍</strong> <a href="http://ccb.jhu.edu/software/hisat/index.shtml">HISAT官网</a></p><p>HISAT全称为Hierarchical Indexing for Spliced Alignment of Transcripts，由约翰霍普金斯大学Steven Salzberg团队开发。它取代Bowtie/TopHat程序，能够将RNA-Seq的读取与基因组进行快速比对，该软件应用了两类不同的索引类型：代表全基因组的<strong>全局FM索引</strong>和大量的<strong>局部小索引</strong>，每个索引代表64000bp。以人类基因组为例，创建了48000个局部索引，每一个覆盖1024bp，最终可以覆盖这个3 billion 的碱基的基因组。这种存在交叉（overlap）的边界可以轻松的比对那些跨区域的read（可变剪切体）。尽管有很多索引，但是hisat会把他们使用合适方法压缩，最终只占4gb左右的内存。本次实验使用的是hisat2版本。</p></li><li><p><strong>SAMtools</strong></p><p>SAMtools是一个用于操作sam和bam文件的工具合集。能够实现二进制查看、格式转换、排序及合并等功能，结合sam格式中的flag、tag等信息，还可以完成比对结果的统计汇总。同时利用linux中的grep、awk等操作命令，还可以大大扩展samtools的使用范围与功能。</p></li><li><p><strong>StringTie</strong> <a href="http://www.ccb.jhu.edu/software/stringtie/">StringTie官网</a></p><p>基于参考基因组的转录组组装和定量，能够应用流神经网络算法和可选的de novo组装进行转录本组装并预计表达水平。与Cufflinks等程序相比，StringTie实现了更完整、更准确的基因重建，并更好地预测了表达水平。</p></li><li><p><strong>Ballgown</strong></p><p>Ballgown是组装转录组的统计分析工具的R包，用于差异表达分析，转录本结构的可视化以及组装转录本与注释的匹配。</p></li></ol><h3 id="1-1-准备工作，运行RNA-seq-pipeline-sh"><a href="#1-1-准备工作，运行RNA-seq-pipeline-sh" class="headerlink" title="1.1 准备工作，运行RNA_seq_pipeline.sh"></a>1.1 准备工作，运行RNA_seq_pipeline.sh</h3><p><code>mkdir 第二次上机</code>创建文件夹，<code> cp /project/liubl/RNA_seq_pipeline/RNA_seq_prepare.sh  ./</code>将RNA_seq_pipeline.sh 移动到此文件夹中，然后 <code>sh RNA_seq_prepare.sh</code>运行脚本，以创建软件、数据的软链接，拷贝work.sh脚本到当前文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/UM1wz93nkLqJxEH.png"></p><h3 id="1-2-命名变量，方便之后的命令输入，同时创建文件夹"><a href="#1-2-命名变量，方便之后的命令输入，同时创建文件夹" class="headerlink" title="1.2 命名变量，方便之后的命令输入，同时创建文件夹"></a>1.2 命名变量，方便之后的命令输入，同时创建文件夹</h3><p>在第二次上机文件夹中使用 <code>cd RNA_seq_pipeline/</code>进入RNA_seq_pipeline文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span> -ex<span class="token comment" spellcheck="true"># 是指此脚本使用/bin/sh 来执行</span></code></pre><pre class=" language-bash"><code class="language-bash">-x 调试用,打印每条命令执行情况-e 一个命令在执行后返回一个非0状态值时即error时,就退出</code></pre><p><strong>对变量命名，并创建文件夹</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#设置当前文件夹</span>PROJECT_HOME<span class="token operator">=</span><span class="token variable">$PWD</span><span class="token comment" spellcheck="true">#设置INDEX，DATA，RESULT</span>INDEX<span class="token operator">=</span><span class="token variable">$PROJECT_HOME</span>/indexDATA<span class="token operator">=</span><span class="token variable">$PROJECT_HOME</span>/dataRESULT<span class="token operator">=</span><span class="token variable">$PROJECT_HOME</span>/results<span class="token comment" spellcheck="true">#创建文件夹</span><span class="token function">mkdir</span> -p <span class="token variable">$INDEX</span><span class="token function">mkdir</span> -p <span class="token variable">$RESULT</span><span class="token function">mkdir</span> -p <span class="token variable">$RESULT</span>/ballgown</code></pre><p><img src="https://i.loli.net/2020/12/25/Zhku67yNF9fRarg.png"></p><h3 id="1-3-创建索引"><a href="#1-3-创建索引" class="headerlink" title="1.3 创建索引"></a>1.3 创建索引</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># build hisat2 index</span>hisat/hisat2-build <span class="token variable">$DATA</span>/chrX.fa <span class="token variable">$INDEX</span>/chr_index<span class="token function">wait</span></code></pre><p><img src="https://i.loli.net/2020/12/25/ZrhOdERgKuXkBw9.png"></p><p>运行结束</p><p><img src="https://i.loli.net/2020/12/25/dqn84YC25JUPsMj.png"></p><blockquote><p>为什么要用index？</p><p>hisat的index使用的是FM索引,FM 索引基于BWT算法，FM-index包括三部分:</p><p>①BWT（T），对于第一列只需要用数字分别表示ACGT的个数就好;last column 用00，01，10，11来记录ATCG; </p><p>②checkpoint data，每隔128位,提前计算每个ATCG的重复次数</p><p>③SA sample ，每32个位置设定读段所在的位置，仅需要回读到sample位置即可知道读段位置</p><p>相比其他构建索引方式（后缀树等）占用内存更小，有利于短读段快速回帖参考基因组上.</p><p><img src="https://i.loli.net/2020/12/25/Nf1zHSs9mL4ZFJd.png"></p></blockquote><h3 id="1-4-用hisat2将reads比对到基因组"><a href="#1-4-用hisat2将reads比对到基因组" class="headerlink" title="1.4 用hisat2将reads比对到基因组"></a>1.4 用hisat2将reads比对到基因组</h3><p>输入命令</p><pre class=" language-bash"><code class="language-bash">hisat/hisat2 -x <span class="token variable">$INDEX</span>/chr_index -1  <span class="token variable">$DATA</span>/ERR188044_chrX_1.fastq -2 <span class="token variable">$DATA</span>/ERR188044_chrX_2.fastq -S <span class="token variable">$RESULT</span>/ERR188044_chrX_reads.sam <span class="token operator">&amp;</span>hisat/hisat2 -x <span class="token variable">$INDEX</span>/chr_index -1  <span class="token variable">$DATA</span>/ERR188104_chrX_1.fastq -2 <span class="token variable">$DATA</span>/ERR188104_chrX_2.fastq -S <span class="token variable">$RESULT</span>/ERR188104_chrX_reads.sam <span class="token operator">&amp;</span>hisat/hisat2 -x <span class="token variable">$INDEX</span>/chr_index -1  <span class="token variable">$DATA</span>/ERR188234_chrX_1.fastq -2 <span class="token variable">$DATA</span>/ERR188234_chrX_2.fastq -S <span class="token variable">$RESULT</span>/ERR188234_chrX_reads.sam <span class="token operator">&amp;</span>hisat/hisat2 -x <span class="token variable">$INDEX</span>/chr_index -1  <span class="token variable">$DATA</span>/ERR188245_chrX_1.fastq -2 <span class="token variable">$DATA</span>/ERR188245_chrX_2.fastq -S <span class="token variable">$RESULT</span>/ERR188245_chrX_reads.sam <span class="token operator">&amp;</span>hisat/hisat2 -x <span class="token variable">$INDEX</span>/chr_index -1  <span class="token variable">$DATA</span>/ERR188257_chrX_1.fastq -2 <span class="token variable">$DATA</span>/ERR188257_chrX_2.fastq -S <span class="token variable">$RESULT</span>/ERR188257_chrX_reads.sam <span class="token operator">&amp;</span>hisat/hisat2 -x <span class="token variable">$INDEX</span>/chr_index -1  <span class="token variable">$DATA</span>/ERR188273_chrX_1.fastq -2 <span class="token variable">$DATA</span>/ERR188273_chrX_2.fastq -S <span class="token variable">$RESULT</span>/ERR188273_chrX_reads.sam <span class="token operator">&amp;</span><span class="token function">wait</span></code></pre><pre class=" language-bash"><code class="language-bash">-x 是指我们之前构建的参考基因组的位置和前缀-1 是指样本的R1文件-2 是指样本的R2文件-S 是指输出文件的名字和格式，一般使用sam格式<span class="token operator">&amp;</span> 后面加<span class="token operator">&amp;</span>是为了能够并行</code></pre><p>比对结果，共六个，以第二个为例进行分析：</p><p>第一部分描述的是pair-end模式（双端测序）下的一致比对结果：</p><ul><li><p>aligned concordantly就是read1和read2同时合理的比对到了基因组/转录组上。concordantly 0 times见第二部分</p></li><li><p>aligned concordantly exactly 1 time，exactly 1 time 就是只有一种比对结果。</p></li><li><p>&gt;1 times 就是read1和read2可以同时比对到多个地方。</p></li></ul><p>第二部分，pair-end模式下不一致的比对结果。</p><ul><li>concordantly 0 times就是read1和read2不能同时合理的同时比对到基因组/转录组上</li><li>aligned discordantly 1 time，discordantly比对就是read1和read2都能比对上，但是不合理（比对方向不对等）</li></ul><p>第三部分就是对剩余reads（既不能concordantly，也不是discordantly 1 time）的单端模式的比对</p><p><img src="https://i.loli.net/2020/12/25/rqEKHdpl9Cc7jOM.png"></p><h3 id="1-5-使用samtools进行排序和格式转换"><a href="#1-5-使用samtools进行排序和格式转换" class="headerlink" title="1.5 使用samtools进行排序和格式转换"></a>1.5 使用samtools进行排序和格式转换</h3><pre class=" language-bash"><code class="language-bash">samtools <span class="token function">sort</span> -@ 8 -o <span class="token variable">$RESULT</span>/ERR188044_chrX_reads.bam <span class="token variable">$RESULT</span>/ERR188044_chrX_reads.sam <span class="token operator">&amp;</span>samtools <span class="token function">sort</span> -@ 8 -o <span class="token variable">$RESULT</span>/ERR188104_chrX_reads.bam <span class="token variable">$RESULT</span>/ERR188104_chrX_reads.sam <span class="token operator">&amp;</span>samtools <span class="token function">sort</span> -@ 8 -o <span class="token variable">$RESULT</span>/ERR188234_chrX_reads.bam <span class="token variable">$RESULT</span>/ERR188234_chrX_reads.sam <span class="token operator">&amp;</span>samtools <span class="token function">sort</span> -@ 8 -o <span class="token variable">$RESULT</span>/ERR188245_chrX_reads.bam <span class="token variable">$RESULT</span>/ERR188245_chrX_reads.sam <span class="token operator">&amp;</span>samtools <span class="token function">sort</span> -@ 8 -o <span class="token variable">$RESULT</span>/ERR188257_chrX_reads.bam <span class="token variable">$RESULT</span>/ERR188257_chrX_reads.sam <span class="token operator">&amp;</span>samtools <span class="token function">sort</span> -@ 8 -o <span class="token variable">$RESULT</span>/ERR188273_chrX_reads.bam <span class="token variable">$RESULT</span>/ERR188273_chrX_reads.sam <span class="token operator">&amp;</span></code></pre><pre class=" language-bash"><code class="language-bash">sort命令格式<span class="token variable"><span class="token variable">`</span> samtools <span class="token function">sort</span> <span class="token punctuation">[</span>-l level<span class="token punctuation">]</span> <span class="token punctuation">[</span>-m maxMem<span class="token punctuation">]</span> <span class="token punctuation">[</span>-o out.bam<span class="token punctuation">]</span> <span class="token punctuation">[</span>-O format<span class="token punctuation">]</span> <span class="token punctuation">[</span>-n<span class="token punctuation">]</span> <span class="token punctuation">[</span>-T tmpprefix<span class="token punctuation">]</span> <span class="token punctuation">[</span>-@ threads<span class="token punctuation">]</span> <span class="token punctuation">[</span>in.sam<span class="token operator">|</span>in.bam<span class="token operator">|</span>in.cram<span class="token punctuation">]</span><span class="token variable">`</span></span>sort进行排序-@ 8 设置排序和压缩是的线程数量，默认是单线程。这里设置为8线程-o 设置输出文件和位置<span class="token variable">$RESULT</span>/ERR188273_chrX_reads.sam  输入sam文件<span class="token operator">&amp;</span> 允许并行</code></pre><p>输入命令，将sam文件进行排序，并输出为bam文件</p><p><img src="https://i.loli.net/2020/12/25/9UwVBcGqWDCQPez.png"></p><h3 id="1-6-使用stringtie对每个样本进行转录本组装"><a href="#1-6-使用stringtie对每个样本进行转录本组装" class="headerlink" title="1.6 使用stringtie对每个样本进行转录本组装"></a>1.6 使用stringtie对每个样本进行转录本组装</h3><p>比对上的reads将会被呈递给StringTie进行<strong>转录本组装</strong>，会针对每个bam文件生成一个gtf文件，它主要记录了转录本的组装信息</p><p>输入命令</p><pre class=" language-bash"><code class="language-bash">stringtie/stringtie -p 8 -G <span class="token variable">$DATA</span>/chrX.gtf -o <span class="token variable">$RESULT</span>/ERR188044.gtf <span class="token variable">$RESULT</span>/ERR188044_chrX_reads.bam <span class="token operator">&amp;</span>stringtie/stringtie -p 8 -G <span class="token variable">$DATA</span>/chrX.gtf -o <span class="token variable">$RESULT</span>/ERR188104.gtf <span class="token variable">$RESULT</span>/ERR188104_chrX_reads.bam <span class="token operator">&amp;</span>stringtie/stringtie -p 8 -G <span class="token variable">$DATA</span>/chrX.gtf -o <span class="token variable">$RESULT</span>/ERR188234.gtf <span class="token variable">$RESULT</span>/ERR188234_chrX_reads.bam <span class="token operator">&amp;</span>stringtie/stringtie -p 8 -G <span class="token variable">$DATA</span>/chrX.gtf -o <span class="token variable">$RESULT</span>/ERR188245.gtf <span class="token variable">$RESULT</span>/ERR188245_chrX_reads.bam <span class="token operator">&amp;</span>stringtie/stringtie -p 8 -G <span class="token variable">$DATA</span>/chrX.gtf -o <span class="token variable">$RESULT</span>/ERR188257.gtf <span class="token variable">$RESULT</span>/ERR188257_chrX_reads.bam <span class="token operator">&amp;</span>stringtie/stringtie -p 8 -G <span class="token variable">$DATA</span>/chrX.gtf -o <span class="token variable">$RESULT</span>/ERR188273.gtf <span class="token variable">$RESULT</span>/ERR188273_chrX_reads.bam <span class="token operator">&amp;</span></code></pre><pre class=" language-bash"><code class="language-bash">-p  8    指定组装转录本的线程数（CPU）。默认值是1, 这里指定为1-G 参数指定基因组注释文件，-o 输出的 gtf 路径<span class="token variable">$RESULT</span>/ERR188273_chrX_reads.bam <span class="token operator">&amp;</span> <span class="token keyword">:</span> 输入bam文件</code></pre><p><img src="https://i.loli.net/2020/12/25/1JEpGKP6uIeozgF.png"></p><p>使用<code>head -10 ERR188234.gtf</code>查看GTF文件<br><img src="https://i.loli.net/2020/12/25/LzqMkfIPYZNu9vU.png"></p><blockquote><p><strong>GTF文件：记录组装的转录本信息</strong></p><ul><li><p><strong>seqname</strong>: 染色体，contig, 或 scaffold</p></li><li><p><strong>source</strong>: GTF文件的源文件。</p></li><li><p><strong>feature</strong>: 特征类型；如：exon, transcript, mRNA, 5’UTR。</p></li><li><p><strong>start</strong>: 开始位置，使用基于1的索引</p></li><li><p><strong>end</strong>: 结束位置，使用基于1的索引</p></li><li><p><strong>score</strong>: 组装的转录本的可信度分数。如果转录本 与a read alignment bundle有连接，则StringTie输出常数值1000。</p></li><li><p><strong>strand</strong>: 正向链： ‘+’； 反向链： ‘-‘.</p></li><li><p><strong>frame</strong>: CDS特征的 Frame or phase 。 StringTie不使用该字段，只记录一个“.”。</p></li><li><p><strong>attributes</strong>:</p></li><li><p><strong>gene_id</strong>: A unique identifier for a single gene and its child transcript and exons based on the alignments’ file name.</p></li><li><p><strong>transcript_id</strong>: A unique identifier for a single transcript and its child exons based on the alignments’ file name.</p></li><li><p><strong>exon_number</strong>: A unique identifier for a single exon, starting from 1, within a given transcript.</p></li><li><p><strong>reference_id</strong>: The transcript_id in the reference annotation (optional) that the instance matched.</p></li><li><p><strong>ref_gene_id</strong>: The gene_id in the reference annotation (optional) that the instance matched.</p></li><li><p><strong>ref_gene_name</strong>: The gene_name in the reference annotation (optional) that the instance matched.</p></li><li><p><strong>cov</strong>: The average per-base coverage for the transcript or exon.</p></li><li><p><strong>FPKM</strong>: <strong>Fragments per kilobase of transcript per million read pairs</strong>. This is the number of pairs of reads aligning to this feature, normalized by the total number of fragments sequenced (in millions) and the length of the transcript (in kilobases).</p></li><li><p><strong>TPM</strong>: <strong>Transcripts per million</strong>. This is the number of transcripts from this particular gene normalized first by gene length, and then by sequencing depth (in millions) in the sample. A detailed explanation and a comparison of TPM and FPKM can be found <a href="http://www.rna-seqblog.com/rpkm-fpkm-and-tpm-clearly-explained/">here</a>, and TPM was defined <a href="http://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-12-323">by B. Li and C. Dewey here</a>.</p></li></ul></blockquote><h3 id="1-7-stringtie合并转录本"><a href="#1-7-stringtie合并转录本" class="headerlink" title="1.7 stringtie合并转录本"></a>1.7 stringtie合并转录本</h3><p>因为有些样本的转录本可能仅仅被部分reads覆盖，无法被第二步的StringTie组装出来。merge步骤可以创建出所有样本里面都有的转录本，方便下一步的对比。在合并模式下，stringtie将所有样品的GTF为文件作为输入，并将这些转录本组装成非冗余的转录本集合，用以生成一个跨多个RNA-seq样品的全局的、统一的转录本。</p><p>输入命令</p><pre class=" language-bash"><code class="language-bash">stringtie/stringtie --merge -p 8 -G  <span class="token variable">$DATA</span>/chrX.gtf -o stringtie_merged.gtf  <span class="token variable">$RESULT</span>/*.gtf·</code></pre><pre class=" language-bash"><code class="language-bash">-- merge 合并-p 线程-G 注释文件-o 输出<span class="token variable">$RESULT</span>/*.gtf  输入上一步每个样本的转录文件</code></pre><p><img src="https://i.loli.net/2020/12/25/SPu9onz7YTf6btW.png"></p><p>查看结果，得到的<code>stringtie_merged.gtf</code>就在RNA_seq_pipeline目录下，使用 <code>head -10 stringtie_merged.gtf</code>预览</p><p><img src="https://i.loli.net/2020/12/25/qJIbe7urYjUcZ2z.png"></p><h3 id="1-8-使用stringle计算表达量并且为Ballgown包提供输入文件"><a href="#1-8-使用stringle计算表达量并且为Ballgown包提供输入文件" class="headerlink" title="1.8 使用stringle计算表达量并且为Ballgown包提供输入文件"></a>1.8 使用stringle计算表达量并且为Ballgown包提供输入文件</h3><pre class=" language-bash"><code class="language-bash">stringtie/stringtie -e -B -p 8 -G stringtie_merged.gtf -o <span class="token variable">$RESULT</span>/ballgown/ERR188044/ERR188044.gtf <span class="token variable">$RESULT</span>/ERR188044_chrX_reads.bam <span class="token operator">&amp;</span>stringtie/stringtie -e -B -p 8 -G stringtie_merged.gtf -o <span class="token variable">$RESULT</span>/ballgown/ERR188104/ERR188104.gtf <span class="token variable">$RESULT</span>/ERR188104_chrX_reads.bam <span class="token operator">&amp;</span>stringtie/stringtie -e -B -p 8 -G stringtie_merged.gtf -o <span class="token variable">$RESULT</span>/ballgown/ERR188234/ERR188234.gtf <span class="token variable">$RESULT</span>/ERR188234_chrX_reads.bam <span class="token operator">&amp;</span>stringtie/stringtie -e -B -p 8 -G stringtie_merged.gtf -o <span class="token variable">$RESULT</span>/ballgown/ERR188245/ERR188245.gtf <span class="token variable">$RESULT</span>/ERR188245_chrX_reads.bam <span class="token operator">&amp;</span>stringtie/stringtie -e -B -p 8 -G stringtie_merged.gtf -o <span class="token variable">$RESULT</span>/ballgown/ERR188257/ERR188257.gtf <span class="token variable">$RESULT</span>/ERR188257_chrX_reads.bam <span class="token operator">&amp;</span>stringtie/stringtie -e -B -p 8 -G stringtie_merged.gtf -o <span class="token variable">$RESULT</span>/ballgown/ERR188273/ERR188273.gtf <span class="token variable">$RESULT</span>/ERR188273_chrX_reads.bam <span class="token operator">&amp;</span></code></pre><pre class=" language-bash"><code class="language-bash">-e:用于指定是否仅为参考转录本估计表达丰度；-B:用于指定是否输出 Ballgown table 文件；-p: 用于指定线程数<span class="token punctuation">;</span>-G :用于指定已组装的注释文件；-o:用于指定输出结果的文件名；</code></pre><p> 运行命令</p><p><img src="https://i.loli.net/2020/12/25/AwktQBZgD25IVbM.png"></p><p><img src="https://i.loli.net/2020/12/25/6AuvlJWK3VhRm1z.png"></p><p>查看<code>$RESULT/ballgown/ERR188234/ERR188234.gtf</code></p><p><img src="https://i.loli.net/2020/12/25/MKmBjClr1hxzAST.png" alt="image-20201023163606232"></p><h3 id="1-9-Ballgown表达量分析"><a href="#1-9-Ballgown表达量分析" class="headerlink" title="1.9  Ballgown表达量分析"></a>1.9  Ballgown表达量分析</h3><pre class=" language-bash"><code class="language-bash">Rscript ./RunBallgown.r</code></pre><p>输入命令</p><p><img src="https://i.loli.net/2020/12/25/kwyxbJVQcm941GT.png"></p><p><img src="https://i.loli.net/2020/12/25/z9ReZmsfWXPyunr.png"></p><p>使用<code>ls</code>命令，发现多了一个result文件，将文件通过FileZilla软件传输到个人电脑上，查看result.pdf文件</p><p><img src="https://i.loli.net/2020/12/25/OUPLF2yBmfYo1Hl.png"></p><p><img src="https://i.loli.net/2020/12/25/FA68xmvhs3HZN4r.png"></p><p><img src="https://i.loli.net/2020/12/25/WJAQBNwqsbpj64T.png"></p><h3 id="1-10-使用IGV查看比对情况"><a href="#1-10-使用IGV查看比对情况" class="headerlink" title="1.10 使用IGV查看比对情况"></a>1.10 使用IGV查看比对情况</h3><p>输入下面命令，使用samtools对bam建立索引，得到bai文件</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#samtools 对BAM文件建立索引</span>samtools index ERR188044_chrX_reads.bam <span class="token operator">&amp;</span>samtools index ERR188104_chrX_reads.bam <span class="token operator">&amp;</span>samtools index ERR188234_chrX_reads.bam <span class="token operator">&amp;</span>samtools index ERR188245_chrX_reads.bam <span class="token operator">&amp;</span>samtools index ERR188257_chrX_reads.bam <span class="token operator">&amp;</span>samtools index ERR188273_chrX_reads.bam <span class="token operator">&amp;</span></code></pre><p><img src="https://i.loli.net/2020/12/25/sNLTXbWVlHYy28o.png"></p><p>导入ERR188004_chr_reads.bam，选择参考基因组hg19 chrX，位置chrX:10,143,411-10,143,552，得到如下图结果</p><p><img src="https://i.loli.net/2020/12/25/OUhCcGRP5Zkl7Jq.png"></p><blockquote><p>绿红蓝棕色分别代表A、T、C、G，灰色代表序列和参考序列一致，若不一致coverage将以ATCG对应颜色显示</p></blockquote><p>发现大部分读段没有mapping到外显子上，才知道这次参考基因组使用的hg38，于是改为hg38</p><p><img src="https://i.loli.net/2020/12/25/cNZ9oOmlIG14QaR.png"></p><p>然后导入ERR188004_chr_reads.bam（需要把bai文件放在同一文件夹下），选择参考基因组hg38 chrX，位置chrX:10,135,678-10,144,820，接下来查看其他样本同一位置的比对情况</p><p><img src="https://i.loli.net/2020/12/25/vrWlo68ezhikSwa.png"></p><p>导入ERR188104_chr_reads.bam </p><p><img src="https://i.loli.net/2020/12/25/sGp7BofzDURHyFh.png"></p><p>剩下bam文件如上导入，不再赘述，可以看到不同转录本的表达差异。</p><h2 id="二、Gene-Assembly"><a href="#二、Gene-Assembly" class="headerlink" title="二、Gene Assembly"></a>二、Gene Assembly</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>由于仪器测序读长的限制等，在建库时会将DNA随机打断为小片段的序列，因此，基因组组装就是将小片段的序列连接起来，但是序列之间的联系十分复杂，常用构建Graph来进行表示，然后在对Graph进行简化、拼接，即<strong>reads→contigs→scaffolds</strong>。</p><ol><li><strong>ALLPATHS-LG</strong></li></ol><p><a href="http://www.broadinstitute.org/software/allpaths-lg/blog/">ALLPATHS-LG</a>是一个基因组组装软件，适合于组装short reads数据，由Computational Research and Development group at the Broad Institute开发。ALLPATHS-LG是现在行业内公认进行基因组<em>De novo</em>（从头组装）组装效果最好的软件,适合于短reads数据。</p><p>和其他组装软件不同的是，allpaths-lg要求<strong>至少两个文库</strong>：</p><p>第一个文库的插入片段长度不能超过测序读长的两倍，这样可以保证双端测序的reads之间存在overlap，这样的文库类型称之为<strong>fragment</strong></p><p>第二个文库的插入片段通常大于3kb,超长读长有利于基因组的组装，这样的文库类型称之为<strong>jumping.</strong></p><p>除了插入片段外，allpaths-lg对测序深度也有要求，推荐100X以上。</p><p>AllPATHS-LG使用<strong>de Bruijin Graph（DBG）</strong>算法，这是目前常用的二代测序拼接算法。</p><p><strong>其步骤：</strong></p><p>1）构建DBG图，将reads分割为一系列连续的kmer；所谓kmer，即为一段短的DNA片段。<strong>k为一个奇数</strong>，k等于几，就称为几mer。例如一段7bp的序列，则可以称为7mer。kmer必须为奇数，根本原因是为了避免正反义链混淆。比如 ：5-mer的 CGCGC，反向互补后是 GCGCG， 它们是不同的；这就不会像 4-mer，CGCG发现它反向互补后仍然是CGCG。<strong>k值越大</strong>可辨别更多的小重复序列，越容易把DBG转换为唯一的序列，但得到的拼接过程含有更多的gaps；<strong>小的k值</strong>对应的DBG能够得到较好的连通性，但是算法的复杂度会提高，repeats序列处理会更复杂，增加了错拼的可能性。</p><p>2）合并DBG图；</p><p>3）构建contig：寻找最优路径（经过每一个节点且仅经过一次，即欧拉行走），最优路径对应的碱基序列构成一个contig；</p><p>4)构建scaffold：通过<strong>PE reads</strong>( paired-end <em>reads</em>)位置确定contig之间的相对位置和方向，组装contig，填充contig之间的gap，得到scaffold序列。</p><p><img src="https://i.loli.net/2020/12/25/vbZK6t58GTgilNo.png"></p><p><img src="https://i.loli.net/2020/12/25/AMBrSnd2vKiLIHh.png"></p><ol start="2"><li><p>GCE </p><p>GCE(Genome Characteristics Estimation) 是华大基因用于<a href="https://www.plob.org/tag/%E5%9F%BA%E5%9B%A0%E7%BB%84">基因组</a>评估的软件，</p><p>其文献为：<a href="http://www.researchgate.net/publication/255722390_Estimation_of_genomic_characteristics_by_analyzing_k-mer_frequency_in_de_novo_genome_projects">Estimation of genomic characteristics by analyzing k-mer frequency in de novo genome projects</a>。</p><p>Github地址：<a href="https://github.com/BioInfoTools/GCE">https://github.com/BioInfoTools/GCE</a></p><p>GCE 软件包中主要包含 kmer_freq_hash 和 gce 两支程序。前者用于进行 kmer 的频数统计，后者在前者的结果上进行基因组大小的准确估算。</p></li><li><p>FASTQC</p><p>FastQC是一款基于Java的软件，一般都是在linux环境下使用命令行运行，它可以快速多线程地对测序数据进行质量评估（Quality Control）</p><p>拿到原始数据后我们会首先采用fastqc程序进行质控，看原始数据质量情况，fastqc会生成一个html结果报告，根据图形化界面，我们可以判断下机数据情况是否符合分析要求。但fastqc 软件主要是针对全基因组测序的，并且各建库方法不同，其评判标准也会有所差距；<strong>不能只是一味的寻求全部结果通过</strong>。</p></li></ol><h3 id="2-1-环境变量配置"><a href="#2-1-环境变量配置" class="headerlink" title="2.1 环境变量配置"></a>2.1 环境变量配置</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#before using allpath, you have add /project/hts-demo/genome_assembly/bin/gcc-4.9.1/bin/bin/</span><span class="token comment" spellcheck="true"># and /project/hts-demo/genome_assembly/bin/allpathslg/bin/ to you local profile, because allpath relies on one gcc that this ubuntu version can not support.</span><span class="token comment" spellcheck="true">#so you have to add gcc to your local profile</span><span class="token function">export</span> LD_LIBRARY_PATH<span class="token operator">=</span>/project/hts-demo/genome_assembly/bin/gcc-4.9.1/bin/lib64/:<span class="token variable">$LD_LIBRARY_PATH</span>PATH<span class="token operator">=</span><span class="token string">"/project/hts-demo/genome_assembly/bin/gcc-4.9.1/bin/bin/:/project/hts-demo/genome_assembly/bin/allpathslg/bin/:<span class="token variable">$PATH</span>"</span></code></pre><p>新版的ALLPATHS-LG需求gcc 4.7.0及以上版本，这里将gcc加入环境变量中，使得allpath能够编译程序</p><p><img src="https://i.loli.net/2020/12/25/PNvcEzQH27wesDK.png"></p><h3 id="2-2-变量命名"><a href="#2-2-变量命名" class="headerlink" title="2.2  变量命名"></a>2.2  变量命名</h3><pre class=" language-bash"><code class="language-bash">PROJECT_HOME<span class="token operator">=</span><span class="token string">"<span class="token variable">$PWD</span>"</span>BIN<span class="token operator">=</span><span class="token variable">$PROJECT_HOME</span>/binDATA<span class="token operator">=</span><span class="token variable">$PROJECT_HOME</span>/dataRESULT<span class="token operator">=</span><span class="token variable">$PROJECT_HOME</span>/resultGCE<span class="token operator">=</span><span class="token variable">$RESULT</span>/gceFASTQC<span class="token operator">=</span><span class="token variable">$RESULT</span>/fastqcALLPATH<span class="token operator">=</span><span class="token variable">$RESULT</span>/allpathlg</code></pre><p><img src="https://i.loli.net/2020/12/25/xw3NAC6SZP5iFVs.png"></p><p>查看下bin文件夹下有什么东西</p><p><img src="https://i.loli.net/2020/12/25/BSEQ2wPAjMTCmVq.png"></p><p>绿色高亮的kmer_freq_hash和kmer_freq_pread文件后面有带*，说明是可执行文件</p><p>绿色荧光高亮的gce文件，是因为linux系统认为这是一个高风险的目录文件，因为任何人都可以进入到该目录并进行读写入操作</p><p><img src="https://i.loli.net/2020/12/25/GBsaeXmFyh78MQN.png"></p><h3 id="2-3-GCE估计基因组大小和kmer分布"><a href="#2-3-GCE估计基因组大小和kmer分布" class="headerlink" title="2.3 GCE估计基因组大小和kmer分布"></a>2.3 GCE估计基因组大小和kmer分布</h3><p>①输入命令</p><pre class=" language-bash"><code class="language-bash"><span class="token variable">$BIN</span>/kmer_freq_pread -k 17 -l <span class="token variable">$DATA</span>/frags.list -q 33 -m 1  -p <span class="token variable">$GCE</span>/frags.17-kmer 2<span class="token operator">></span> <span class="token variable">$GCE</span>/kmer_freq_pread <span class="token operator">&amp;</span><span class="token operator">>></span>/dev/null</code></pre><p>运行<code>kmer_freq_pread</code>查看参数</p><p><img src="https://i.loli.net/2020/12/25/U2HSB7PL56qh9tx.png"></p><p>运行<code>kmer_freq_hash</code>查看参数, 发现kmer_freq_pread其实是kmer_freq_hash的一个版本</p><p><img src="https://i.loli.net/2020/12/25/fowjhObIp1FQm6z.png"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#命令解释</span>-k 17 设置kmer大小， 默认值为17，kmer的数量和基因序列有数量关系从而评估基因组的大小-l frags.list    设置我们制作好的输入文件，文本文件，其中每行为一个fastaq文件路径-q 33     设置质量值的ascii偏移，默认是64，我们的数据是illumina1.8+所以是33-m  估算模型的选择，离散型0，连续型1，默认为0，对真实数据推荐选择1-p <span class="token variable">$GCE</span>/frags.17-kmer  设置输出文件的前缀2<span class="token operator">></span> <span class="token variable">$GCE</span>/kmer_freq_pread <span class="token operator">&amp;</span><span class="token operator">>></span>/dev/null  2<span class="token operator">></span>输出日志信息到文件，，<span class="token operator">&amp;</span>可以代表任意（标准输入输出或错误），<span class="token operator">>></span>代表追加 <span class="token operator">&amp;</span><span class="token operator">>></span>/dev/null就是把标准输出信息和错误信息都重定向给/dev/null。/dev/null是一个特殊的设备文件，这个文件接收到任何数据都会被丢弃。因此，null这个设备通常也被称为位桶（bit bucket）或黑洞。</code></pre><p><img src="https://i.loli.net/2020/12/25/4WmQSRe2s19hxuN.png"></p><p>②查看结果</p><p>使用<code> ls $GCE</code>, 前两个为结果输出文件<img src="https://i.loli.net/2020/12/25/sQijnYNSdAVRveD.png"></p><p>使用<code>cat $GCE/kmer_freq_pread</code> 查看$GCE/kmer_freq_pread ，发现为空</p><p><img src="https://i.loli.net/2020/12/25/NQiE4So6gdW9vpX.png"></p><pre><code>但如果把代码改为`$BIN/kmer_freq_pread -k 17 -l $DATA/frags.list -q 33 -m 1  -p $GCE/frags.17-kmer 2&gt; $GCE/kmer_freq_pread `, 即去掉后面的`&amp;&gt;&gt;/dev/null`, 再使用`cat $GCE/kmer_freq_pread` 查看$GCE/kmer_freq_pread 将得到如下图内容：</code></pre><p><img src="https://i.loli.net/2020/12/25/vGkRdIArSEmNKUz.png"></p><p><img src="https://i.loli.net/2020/12/25/bxiSpCU2mecWK1g.png"></p><p>所以kmer_freq_pread其实是一个log日志文件。若去掉代码中的2&gt; 则直接将运行结果输出</p><p>使用 <code> less $GCE/frags.17-kmer.freq.stat</code> 查看frags.17-kmer.freq.stat信息。kmer_freq_hash 的主要结果文件为 species.freq.stat。该文件有 2 列：第1列是kmer重复的次数，第二列是kmer的种类数。该文件有255行，第225行表示kmer重复次数&gt;=255的kmer的总的种类数。</p><p><img src="https://i.loli.net/2020/12/25/xvkRZQW3ACzuIro.png"></p><p><img src="https://i.loli.net/2020/12/25/hW2yRftOrEwoNSl.png"></p><p>使用<code>gzip  -d frags.17-kmer.freq.gz</code>解压frags.17-kmer.freq.gz</p><p>使用<code>less $GCE/frags.17-kmer.freq</code>查看解压出来的文件</p><p><img src="https://i.loli.net/2020/12/25/SDpn7Gl6mKMUBzr.png"></p><p>这是对所有的kmer出现次数的一个统计</p><p><img src="https://i.loli.net/2020/12/25/6MwVIypHB3m2vad.png"></p><h3 id="2-4-使用FASTQC进行质量控制"><a href="#2-4-使用FASTQC进行质量控制" class="headerlink" title="2.4 使用FASTQC进行质量控制"></a>2.4 使用FASTQC进行质量控制</h3><pre class=" language-bash"><code class="language-bash"><span class="token variable">$BIN</span>/fastqc/fastqc -o <span class="token variable">$FASTQC</span> -f fastq <span class="token variable">$DATA</span>/frags.A.fastq <span class="token variable">$DATA</span>/frags.B.fastq <span class="token operator">&amp;</span> <span class="token operator">>></span>/dev/null</code></pre><p>参数介绍</p><pre class=" language-bash"><code class="language-bash">-o，结果输出路径；-f --format 有效的格式是bam、sam、bam_mapped、sam_mapped和fastq，导入两个fastq是因为双端测序<span class="token operator">&amp;</span> <span class="token operator">>></span>/dev/null 把标准输出和错误都重定向给黑洞</code></pre><p>发现这里&amp;和&gt;&gt;间多了一个空格，所以依然会输出过程：</p><p><img src="https://i.loli.net/2020/12/25/cXlbmzNVgq2pZIR.png"></p><p>结果为result/fastqc/*.html文件，打开fileZilla，有两个html文件将html文件传到个人电脑用浏览器打开(zip压缩包其实就是html各部分内容)</p><p><img src="https://i.loli.net/2020/12/25/HFyErS5RQZYiw7c.png"></p><p>①frags.A_fastqc.html</p><p>结果分为绿色的”PASS”，黄色的”WARN”和红色的”FAIL”。</p><p><img src="https://i.loli.net/2020/12/25/ypoiCNhtPuq6aBW.png"></p><p>1)基本信息</p><p><img src="https://i.loli.net/2020/12/25/LqmWSzK8gEZN35I.png"></p><p>2)Per base sequence quality</p><p>横轴代表位置，纵轴quality，quality=-10*log10(p)，p为测错的概率。所以一条reads某位置出错概率为0.01时，其quality就是20。</p><p>红色横线表示中位数，蓝色折线是平均数；黄色块是25%-75%区间，上下的触须是10%-90%区间（即类似于箱式图)；</p><p>若任一位置的下四分位数低于10或中位数低于25，报”WARN”；若任一位置的下四分位数低于5或中位数低于20，报”FAIL”.</p><p><img src="https://i.loli.net/2020/12/25/bGTvZn18isoANFr.png" alt="per_base_quality"></p><p>3)每条reads的quality的均值的分布</p><pre><code>横轴为quality，纵轴是reads数目。当峰值小于27（错误率0.2%）时报"WARN"，当峰值小于20（错误率1%）时报"FAIL"。</code></pre><p><img src="https://i.loli.net/2020/12/25/vnigIpXtaVhxj6T.png" alt="per_sequence_quality"></p><p>②查看frags.B_fastqc.html</p><p>1)基本信息</p><p><img src="https://i.loli.net/2020/12/25/5DAIqCfmsYj2yMe.png"></p><p>2)Per base sequence quality</p><p><img src="https://i.loli.net/2020/12/25/Bl51ZvknPORDYTb.png"></p><p>3)3)每条reads的quality的均值的分布</p><p><img src="https://i.loli.net/2020/12/25/TCAEYd7roIa1pvB.png"></p><h3 id="2-5-使用AllPath-LG进行组装文库"><a href="#2-5-使用AllPath-LG进行组装文库" class="headerlink" title="2.5 使用AllPath-LG进行组装文库"></a>2.5 使用AllPath-LG进行组装文库</h3><h4 id="①将Fastq转换为ALLPATH-LG支持的输入格式"><a href="#①将Fastq转换为ALLPATH-LG支持的输入格式" class="headerlink" title="①将Fastq转换为ALLPATH-LG支持的输入格式"></a>①将Fastq转换为ALLPATH-LG支持的输入格式</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#assembly</span><span class="token function">mkdir</span> -p <span class="token variable">$ALLPATH</span>/result.genome/data  <span class="token comment" spellcheck="true">#用于将转换后的数据文件放入到此目录下</span><span class="token comment" spellcheck="true">#inputs preparation</span><span class="token comment" spellcheck="true">#运行以下命令，将fastq文件转成运行ALLPATH-LG所需要的文件</span>PrepareAllPathsInputs.pl \        DATA_DIR<span class="token operator">=</span><span class="token variable">$ALLPATH</span>/result.genome/data \ <span class="token comment" spellcheck="true">#result.genome必须和csv文件中的organism_name相同</span>        PLOIDY<span class="token operator">=</span>1 \ <span class="token comment" spellcheck="true">##生成ploidy文件，1表示基因组为单倍体型；2为双倍体型，allpaths-lg目前只支持单倍体和二倍体</span>        IN_GROUPS_CSV<span class="token operator">=</span><span class="token variable">$DATA</span>/in_groups.csv \ <span class="token comment" spellcheck="true">#in_groups.csv用于指出测序数据的存放路径</span>        IN_LIBS_CSV<span class="token operator">=</span><span class="token variable">$DATA</span>/in_libs.csv \ <span class="token comment" spellcheck="true"># in_libs.csv用于给出文库的特性</span>        GENOME_SIZE<span class="token operator">=</span>200000\        OVERWRITE<span class="token operator">=</span>True <span class="token operator">|</span><span class="token function">tee</span> <span class="token variable">$ALLPATH</span>/prepare.out <span class="token operator">>></span>/dev/null <span class="token comment" spellcheck="true">#是否覆盖存在的文件。可以设置该选项为True</span>        <span class="token comment" spellcheck="true">#tee命令用于读取标准输入的数据，并将其内容输出成文件</span></code></pre><p> 在allpath/bin目录下，有一个名为PrepareAllPathsInputs.pl的可执行文件。</p><p><img src="https://i.loli.net/2020/12/25/zwCyokEfVKiZPpO.png"></p><p>这个文件就是用来准备输入文件的。这个文件需要读取以下两个文件：in_groups.csv和in_libs.csv</p><p>in_groups.csv文件的解释：</p><blockquote><p>group_name:数据独特的代号,每一份数据有一个代号；</p><p>library_name:数据所属文库的名字；</p><p>filename:数据文件所存放位置。可以为相对位置，文件名可以包含’*’和’?’(但是扩展名中不能有该符号，因为要根据扩展名识别文件类型)，从而代表paired数据。支持的文件类型有’.bam’,’fasta’,’fa’,’fastq’,’fq’,’fastq.gz’和’fq.gz’。</p></blockquote><p>in_libs.csv文件的解释：</p><blockquote><p>library_name:和in_groups.csv中的相匹配；</p><p>project_name:project的名字；</p><p>organism_name:测序物种的名字；</p><p>type:文库类型，fragment代表插入片段短，存在overlap的文库；jumping代表插入片段非常长的文库</p><p>paired: 0代表单端测序，1代表双端测序;</p><p>frag_size:小片段文库插入片段长度的均值；</p><p>frag_stddev:小片段文库的插入片段长度估算的标准偏差；</p><p>insert_size:大片段文库插入片段长度的均值；</p><p>insert_stddev:大片段文库插入片段长度估算的标准偏差；</p><p>read_orientation:reads的方向，小片段文库为inward，大片段文库为outward；</p><p>genomic_start:reads从该位置开始，读入数据，如果不为0，之前的碱基都被剪掉；</p><p>genomic_end:reads从该位置开始，停止读入数据，如果不为0，之后的碱基都被剪掉。</p></blockquote><p>运行结束后</p><p>使用<code>less $ALLPATH/prepare.out</code>查看输出信息</p><p><img src="https://i.loli.net/2020/12/25/qPR38kvQHbMs1hW.png"></p><p><img src="https://i.loli.net/2020/12/25/uv6lk2GD9Y8Z7eQ.png"></p><p>在输出目录会生成如下文件    </p><p>每个文库的序列会生成对应的.fastb, .pairs, qualb三个文件；ploidy 记录染色体倍性；read_cache 是临时目录。</p><p><img src="https://i.loli.net/2020/12/25/hDypLX6eCZEjm5S.png"></p><h4 id="②准备好输入文件后，使用RunAllPathsLG这个命令来进行基因组组装"><a href="#②准备好输入文件后，使用RunAllPathsLG这个命令来进行基因组组装" class="headerlink" title="②准备好输入文件后，使用RunAllPathsLG这个命令来进行基因组组装"></a>②准备好输入文件后，使用RunAllPathsLG这个命令来进行基因组组装</h4><pre class=" language-bash"><code class="language-bash">RunAllPathsLG \        PRE<span class="token operator">=</span><span class="token variable">$ALLPATH</span> \ <span class="token comment" spellcheck="true">#程序运行的根目录，所有的其他目录全在该目录下</span>        REFERENCE_NAME<span class="token operator">=</span>result.genome \ <span class="token comment" spellcheck="true">#参考基因组目录名称，位于PRE目录下，若有参考基因组，可放于此目录下</span>        DATA_SUBDIR<span class="token operator">=</span>data \  <span class="token comment" spellcheck="true">#DATA子目录，位于REFERENCE_NAME目录下，程序从该目录下读取数据。</span>        RUN<span class="token operator">=</span>run \ <span class="token comment" spellcheck="true">#位于DATA_SUBDIR目录下，将生成的中间文件和结果文件存储与该目录中。</span>        SUBDIR<span class="token operator">=</span>test \        TARGETS<span class="token operator">=</span>standard \        OVERWRITE<span class="token operator">=</span>True <span class="token operator">|</span><span class="token function">tee</span> -a <span class="token variable">$ALLPATH</span>/assemble.out <span class="token operator">>></span>/dev/null</code></pre><p>执行截图</p><p><img src="https://i.loli.net/2020/12/25/SWpDFcCznxf5MJj.png"></p><p>上述命令中的5个参数构成了如下的目录结构</p><p><code>PRE/REFERENCE_NAME/DATA_SUBDIR/RUN/SUBDIR</code></p><p>结果为<code>demo/genome_assembly/result/allpathlg/result.genome/data/run/ASSEMBLIES/test/final.*.fastg</code></p><h4 id="③查看基因组组装结果"><a href="#③查看基因组组装结果" class="headerlink" title="③查看基因组组装结果"></a>③查看基因组组装结果</h4><p>使用<code>ls final.*.fastg</code>查看有多少文件</p><p><img src="https://i.loli.net/2020/12/25/jMlkbfFJ1Qw75DB.png"></p><p>使用<code>less $ALLPATH/assemble.out</code>查看输出信息</p><p><img src="https://i.loli.net/2020/12/25/pat2ET4gkqJz5su.png"><img src="https://i.loli.net/2020/12/25/wHChB7xfWREDqSO.png"></p><p>使用<code>less final.contigs.fastg</code>查看final.contigs.fastg</p><p><img src="https://i.loli.net/2020/12/25/3vE9wh1DjL4QGlP.png"></p><p>使用<code>less final.assembly.fastg</code>查看final.assembly.fastg</p><p><img src="https://i.loli.net/2020/12/25/wjqo8FSMGNQ67lz.png"></p><h2 id="附：Tmux的使用"><a href="#附：Tmux的使用" class="headerlink" title="附：Tmux的使用"></a>附：Tmux的使用</h2><p>打开一个终端窗口，在里面输入命令，这种用户与计算机的临时交互，称为<strong>一次会话（session）</strong>。</p><p>由于我们使用的是ssh登录linux服务器，为了断电断网能够继续执行命令，则可以使用tmux来运行命令。</p><p>tmux就是会话与窗口的<strong>解绑工具</strong>，窗口关闭后会话并不终止，会继续运行，还允许在单个串口同时访问多个会话，方便多命令行的操作。</p><p><strong>tmux的主要命令</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 新建会话</span>tmux new -s <span class="token operator">&lt;</span>session-name<span class="token operator">></span><span class="token comment" spellcheck="true">#命令可以查看当前所有的 Tmux 会话。</span>tmux <span class="token function">ls</span><span class="token comment" spellcheck="true"># 重新接入某个已存在的会话</span>tmux attach -t <span class="token operator">&lt;</span>session-name<span class="token operator">></span><span class="token comment" spellcheck="true">#杀死某个会话</span>tmux kill-session -t <span class="token operator">&lt;</span>session-name<span class="token operator">></span></code></pre><p>主要快捷键：</p><ul><li><code>Ctrl+b d</code>：分离当前会话。</li><li><code>Ctrl+b s</code>：列出所有会话。</li><li><code>Ctrl+b $</code>：重命名当前会话。</li></ul><p>Tmux 的最简操作流程：</p><ol><li>新建会话<code>tmux new -s my_session</code>。</li><li>在 Tmux 窗口运行所需的程序。</li><li>按下快捷键<code>Ctrl+b d</code>将会话分离。</li><li>下次使用时，重新连接到会话<code>tmux attach-session -t my_session</code>。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2019/10/tmux.html">Tmux 使用教程 by 阮一峰</a></li><li><a href="https://www.plob.org/article/9388.html">使用 GCE 进行基因组大小评估</a></li><li><a href="https://www.plob.org/article/5987.html">用FastQC检查二代测序原始数据的质量</a></li><li><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;ved=2ahUKEwiizN74v9nsAhWMxYsBHdXuDfwQFjACegQIBRAC&amp;url=http://www.chenlianfu.com/?tag=allpaths-lg&amp;usg=AOvVaw2tqfoBTFp--5c-LMqhWYpw">AllPaths-LG | 陈连福的生信博客</a></li><li><a href="https://www.jianshu.com/p/d122522a1fd1">基因组De novo组装和 ALLPATHS-LG使用</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信资源与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【生信资源与实践】第一次上机Linux基础命令&amp;RNA_seq</title>
      <link href="posts/2c94.html"/>
      <url>posts/2c94.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、linux"><a href="#一、linux" class="headerlink" title="一、linux"></a>一、linux</h2><blockquote><ul><li><p><a href="https://zhuanlan.zhihu.com/p/32705686">Linux简史</a></p></li><li><p>Linux与GNU是一回事吗？</p></li></ul><p>GNU 这个名字是“GNU’s Not Unix”的递归首字母缩写词. GNU 项目创始于一九八四年，旨在开发一个类似 Unix ，且为 自由软件 的完整的操作系统。GNU 的内核尚未完成，所以 GNU 使用 Linux 作为其内核，而该系统的其余部分主要是由 GNU 工程编写和提供的程序组成。GNU 和 Linux 以这样的方式组合成为 GNU/Linux 操作系统。</p></blockquote><h3 id="1-1-技巧"><a href="#1-1-技巧" class="headerlink" title="1.1 技巧"></a><strong>1.1 技巧</strong></h3><ul><li><p>自动补全：在敲出 文件／目录／命令 的前几个字母之后，按下 tab 键</p></li><li><p>按 上／下 光标键可以在曾经使用过的命令之间来回切换</p></li><li><p>如果想要退出选择，并且不想执行当前选中的命令，可以按 ctrl + c</p></li><li><p>快速删除已经输入命令</p><ul><li>ctrl + w 往回删除一个单词，光标放在最末尾</li><li>ctrl + u 删除光标以前的字符</li><li>ctrl + k 删除光标以后的字符</li><li>ctrl + a 移动光标至的字符头</li><li>ctrl + e 移动光标至的字符尾</li><li>ctrl + l 清屏</li></ul></li></ul><h3 id="1-2-基础命令"><a href="#1-2-基础命令" class="headerlink" title="1.2 基础命令"></a><strong>1.2 基础命令</strong></h3><table><thead><tr><th align="left">命令</th><th>功能</th></tr></thead><tbody><tr><td align="left">man command</td><td>查阅 <code>command</code> 命令的使用手册，<code>man</code> <em>是</em> <strong>manual</strong> <em>的缩写</em></td></tr><tr><td align="left">command –help</td><td>显示 <code>command</code> 命令的帮助信息</td></tr><tr><td align="left">ls</td><td>查看当前文件夹下的内容，-lh显示详细信息和文件大小，-a显示隐藏文件<br><strong>通配符的使用</strong> （*,?,[abc],[a-z])：列出特定文件和文件夹，</td></tr><tr><td align="left">tree</td><td>命令可以以树状图列出文件目录结构</td></tr><tr><td align="left">pwd</td><td>查看当前所在文件夹</td></tr><tr><td align="left">cd [目录名]</td><td>切换文件夹<br>cd ~切换到当前用户的主目录(/home/用户目录)<br>cd .. 切换到上级目录<br>cd -可以在最近两次工作目录之间来回切换</td></tr><tr><td align="left">clear</td><td>清屏</td></tr><tr><td align="left">touch [文件名]</td><td>如果文件不存在，新建文件</td></tr><tr><td align="left">mkdir [目录名]</td><td>创建目录，-p可以递归创建目录</td></tr><tr><td align="left">rm [文件名/ -r 文件夹]</td><td>删除指定的文件名，<br>-r递归地删除目录下的内容，<strong>删除文件夹</strong> 时必须加此参数<br>-f强制删除，忽略不存在的文件，无需提示</td></tr><tr><td align="left">cp</td><td>-i 覆盖文件前提示<br>-r 若给出的源文件是目录文件，则 cp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td></tr><tr><td align="left">mv</td><td><code>mv</code> 命令可以用来 <strong>移动</strong> <strong>文件</strong> 或 <strong>目录</strong>，也可以给 <strong>文件或目录重命名</strong><br>-i：交互式操作，覆盖前先行询问用户<br>-u：当源文件比目标文件新或者目标文件不存在时，才执行移动操作</td></tr><tr><td align="left">echo</td><td>重定向，echo Hello Python &gt; 1.txt，将 echo 输出的信息保存到 1.txt 里</td></tr><tr><td align="left">history</td><td>查看历史运行命令</td></tr><tr><td align="left">who</td><td>查看当前在线用户</td></tr><tr><td align="left">which</td><td>查看命令位置<br>which ls</td></tr><tr><td align="left">tar</td><td>压缩文件 <br><code>tar -zcvf  打包文件 .tar.gz  要被压缩的文件／路径...</code>  <br>解压缩文件 <br><code>tar -zxvf 打包文件.tar.gz  -C 目标路径</code></td></tr><tr><td align="left">passwd  用户名</td><td>更改登录密码</td></tr><tr><td align="left">ssh 用户名@ip</td><td>远程登录</td></tr><tr><td align="left">scp 用户名@ip:文件名或路径 用户名@ip:文件名或路径</td><td>远程复制文件，或者可以用FileZilla等软件在图形页面下进行文件传输</td></tr><tr><td align="left">which</td><td>可以查看执行命令所在位置</td></tr><tr><td align="left">ps aux</td><td><code>process status</code> 查看进程的详细状况</td></tr><tr><td align="left">top</td><td>动态显示运行中的进程并且排序</td></tr><tr><td align="left">htop</td><td>与Linux传统的top相比，htop更加人性化。</td></tr><tr><td align="left">df -h</td><td><code>disk free</code> 显示磁盘剩余空间</td></tr><tr><td align="left">du -h [目录名]</td><td><code>disk usage</code> 显示目录下的文件大小</td></tr></tbody></table><h3 id="1-3-查看文件内容"><a href="#1-3-查看文件内容" class="headerlink" title="1.3 查看文件内容"></a><strong>1.3 查看文件内容</strong></h3><table><thead><tr><th align="left">命令</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">cat 文件名</td><td align="left">查看文件内容、创建文件、文件合并、追加文件内容等功能<br>-b 对非空输出行编号<br>-n对输出的所有行编号<br>cat &gt; 1.txt 创建文件覆盖内容<br>cat &gt;&gt;1.txt 追加内容</td></tr><tr><td align="left">more/less 文件名</td><td align="left">可以用于分屏显示文件内容，每次只显示一页内容<br><strong>less： 由于more不能后退，就取more的反义词less加上后退功能</strong><br>q退出，b后退，f前进</td></tr><tr><td align="left">head -n</td><td align="left">显示文件前多少行内容</td></tr><tr><td align="left">tail -n</td><td align="left">显示文件末尾多少行内容<br>tail -n+2 从第二行开始显示</td></tr></tbody></table><h3 id="1-4-文本处理"><a href="#1-4-文本处理" class="headerlink" title="1.4 文本处理"></a>1.4 文本处理</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>grep 搜索文本 文件名</td><td><strong>-n显示匹配行及行号</strong><br>-v显示不包含匹配文本的所有行（相当于<strong>求反</strong>）<br>-i忽略大小写<br>-c ‘文字’ 文件 →某个字符串出现的个数，<br><strong>模式搜索</strong>文本文件内容<br>‘^a’，搜寻以 <strong>a</strong> 开头的行<br>‘ke$’行尾，搜寻以 <strong>ke</strong> 结束的行<br>grep -A 3 打印匹配行的后3行<br>grep -B 3 打印匹配行的后3行<br>grep -C 3 打印匹配行的前后3行</td></tr><tr><td>cut</td><td>cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出<br>-d ‘ ’：自定义分隔符，默认为制表符。<br>-f ：提取哪些字段<br>cut -f 1,4-7 1.txt 显示1.txt第1列和4到7列内容</td></tr><tr><td>sort</td><td>用于将文本文件内容加以排序<br>sort -k2 -nr test.bed  ：<br>-k2，优先按第二列排序<br>-t ‘,’:设定间隔符<br>nr ：-n按数字大小排序，默认按照ASCII码排序，-r倒序<br>-u去掉重复行<br></td></tr><tr><td>uniq -c</td><td>统计重复次数，使用前需要用sort排序</td></tr><tr><td>wc</td><td>配合管道，wc -l 统计行数<br>不加任何参数会依次打印行数、单词数、字节数</td></tr><tr><td>awk</td><td>awk的列从1计数，$1是第一列，$2是第2列……<br>-F ‘ ,’ 指定分隔符<br>-OFS，指定输出分隔符</td></tr><tr><td>sed</td><td>行处理工具<br>sed -n \17,19\ p hmmsearch.out<br>-n选项会很严肃地警告sed 命令：除非是明确表明要输出的行，否则不要给我胡乱输出！<br>-n选项经常和 p 配合使用，其含义就是，输出那些匹配的行。</td></tr></tbody></table><h3 id="1-5-vim"><a href="#1-5-vim" class="headerlink" title="1.5  vim"></a>1.5  vim</h3><p>vim有三种模式</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201225190902-2020-12-25.png"><br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/2156635-20201108165416825-489408072-2020-12-25.png"></p><h4 id="1-5-1-复制粘贴与删除撤回"><a href="#1-5-1-复制粘贴与删除撤回" class="headerlink" title="1.5.1 复制粘贴与删除撤回"></a>1.5.1 复制粘贴与删除撤回</h4><p>全部删除：按esc键后，先按gg（到达顶部），然后dG(选中内容光标移到最后一行 ,是大写相当于shift+G)</p><p>全部复制：按esc键后，先按gg，然后ggyG</p><p>全选高亮显示：按esc键后，先按gg，然后ggvG或者ggVG</p><p>单个删除：x</p><p>单行复制：按esc键后，然后yy（<strong>y</strong> 复制<strong>选</strong>中内容到0号寄存器 ，**+y** 复制<strong>选</strong>中内容到＋寄存器，也就是系统的剪贴板，供其他程序用 ）</p><p>单行删除：按esc键后，然后dd</p><p>粘贴：按esc键后，然后p</p><p>撤销： u；重做：Ctrl+r</p><h4 id="1-5-2-查找"><a href="#1-5-2-查找" class="headerlink" title="1.5.2 查找"></a>1.5.2 查找</h4><p>按esc键后，/“str”查找</p><p>n: 下一个</p><p>N：上一个</p><h4 id="1-5-3-退出-末行模式"><a href="#1-5-3-退出-末行模式" class="headerlink" title="1.5.3 退出-末行模式"></a>1.5.3 退出-末行模式</h4><p>:q 退出</p><p>:q! 退出并不保存</p><p>:w 保存</p><p>:wq 保存并退出</p><p>:x 保存并退出</p><blockquote><p><strong>vi 和vim 的区别</strong></p><p>Vi （Visual Interface）是 Linux下基于Shell 的文本编辑器，Vim （Visual Interface iMproved）是 Vi的增强版本，扩展了很多功能，比如对程序源文件的语法高亮。不管是 Vi 还是 Vim，我们习惯上都管它叫 Vi，但实际上用的更多的是 Vim。在系统里用 alias命令看一下 vi，可以发现用到的其实是vim。</p><p>vim只能粘贴50行的问题：在当前用户主目录(~)/.vimrc（如果不存在，新建这个文件），添加一行,设置寄存器保存的行数, 即最大值为500。set viminfo=’1000,&lt;500</p></blockquote><p>参考： <a href="http://c.biancheng.net/cpp/html/2735.html">10分钟掌握Linux vi编辑器常见命令的使用，最简单的vi编辑器教程</a></p><h2 id="二、RNA-seq"><a href="#二、RNA-seq" class="headerlink" title="二、RNA-seq"></a>二、RNA-seq</h2><h3 id="2-1-准备工作"><a href="#2-1-准备工作" class="headerlink" title="2.1 准备工作"></a>2.1 准备工作</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将pipelinesh复制到自己的目录下</span><span class="token function">cp</span> /project/hts-demo/pipeline.sh  ./<span class="token comment" spellcheck="true"># 运行pipeline.sh</span>./pipeline.sh</code></pre><p>运行代码</p><p><img src="https://i.loli.net/2020/10/22/4kMtazV2ClWp13Y.png"></p><p>得到demo文件夹</p><img src="https://i.loli.net/2020/10/22/nldVM2FpyfOskzb.png" style="zoom:50%;"><p>再开一个窗口（方便之后的复制），查看demo/RNA/work.sh文件</p><img src="https://i.loli.net/2020/10/22/rxDbUlS7pP4naFu.png" style="zoom:67%;"><h3 id="2-2-变量命名"><a href="#2-2-变量命名" class="headerlink" title="2.2  变量命名"></a>2.2  变量命名</h3><pre class=" language-bash"><code class="language-bash">PROJECT_HOME<span class="token operator">=</span><span class="token variable">$PWD</span>INDEX<span class="token operator">=</span><span class="token variable">$PROJECT_HOME</span>/indexDATA<span class="token operator">=</span><span class="token variable">$PROJECT_HOME</span>/dataRESULT<span class="token operator">=</span><span class="token variable">$PROJECT_HOME</span>/results<span class="token function">mkdir</span> -p <span class="token variable">$INDEX</span><span class="token function">mkdir</span> -p <span class="token variable">$RESULT</span></code></pre><p>输入命令，对路径进行命名，是为了简化接下来的代码</p><p><img src="https://i.loli.net/2020/10/22/Zu5kNG14HpDnfEq.png"></p><h3 id="2-3-使用Bowtie构建索引"><a href="#2-3-使用Bowtie构建索引" class="headerlink" title="2.3 使用Bowtie构建索引"></a>2.3 使用Bowtie构建索引</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># build bowtie2 index</span>bowtie2-build ucsc.hg19.chr21.fasta <span class="token variable">$INDEX</span>/ucsc.hg19.chr21.fasta</code></pre><p>运行命令</p><img src="https://i.loli.net/2020/10/22/SnLuApMVbh8EDvr.png" style="zoom: 33%;"><p>运行结束</p><img src="https://i.loli.net/2020/10/22/I8hyMqGflj9FuxL.png" style="zoom: 33%;"><p>发现index文件多了以bt2结尾的文件</p><p><img src="https://i.loli.net/2020/10/22/qxBk3vXQoKjOCwe.png" alt="image-20201018164144757"></p><h3 id="2-4-使用tophat2将reads片段比对到基因组上"><a href="#2-4-使用tophat2将reads片段比对到基因组上" class="headerlink" title="2.4  使用tophat2将reads片段比对到基因组上"></a>2.4  使用tophat2将reads片段比对到基因组上</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mapping with tophat2</span>tophat2 -o <span class="token variable">$RESULT</span>/SRR493366.tophat <span class="token variable">$INDEX</span>/ucsc.hg19.chr21.fasta <span class="token variable">$DATA</span>/SRR493366.chr21_1.fastq <span class="token variable">$DATA</span>/SRR493366.chr21_2.fastq <span class="token operator">&amp;</span>tophat2 -o <span class="token variable">$RESULT</span>/SRR493367.tophat <span class="token variable">$INDEX</span>/ucsc.hg19.chr21.fasta <span class="token variable">$DATA</span>/SRR493367.chr21_1.fastq <span class="token variable">$DATA</span>/SRR493367.chr21_2.fastq <span class="token operator">&amp;</span>tophat2 -o <span class="token variable">$RESULT</span>/SRR493368.tophat <span class="token variable">$INDEX</span>/ucsc.hg19.chr21.fasta <span class="token variable">$DATA</span>/SRR493368.chr21_1.fastq <span class="token variable">$DATA</span>/SRR493368.chr21_2.fastq <span class="token operator">&amp;</span>tophat2 -o <span class="token variable">$RESULT</span>/SRR493369.tophat <span class="token variable">$INDEX</span>/ucsc.hg19.chr21.fasta <span class="token variable">$DATA</span>/SRR493369.chr21_1.fastq <span class="token variable">$DATA</span>/SRR493369.chr21_2.fastq <span class="token operator">&amp;</span>tophat2 -o <span class="token variable">$RESULT</span>/SRR493370.tophat <span class="token variable">$INDEX</span>/ucsc.hg19.chr21.fasta <span class="token variable">$DATA</span>/SRR493370.chr21_1.fastq <span class="token variable">$DATA</span>/SRR493370.chr21_2.fastq <span class="token operator">&amp;</span>tophat2 -o <span class="token variable">$RESULT</span>/SRR493371.tophat <span class="token variable">$INDEX</span>/ucsc.hg19.chr21.fasta <span class="token variable">$DATA</span>/SRR493371.chr21_1.fastq <span class="token variable">$DATA</span>/SRR493371.chr21_2.fastq <span class="token operator">&amp;</span></code></pre><p>运行命令</p><img src="https://i.loli.net/2020/10/22/OmfFCGexlL7UHJp.png" style="zoom:33%;"><p>运行结束</p><img src="https://i.loli.net/2020/10/22/r9xhsVRG8OE3CpM.png" style="zoom:33%;"><p><strong>比对后得到的6个bam文件</strong>：</p><p>results/SRR493366.tophat/accepted_hits.bam</p><p>results/SRR493367.tophat/accepted_hits.bam</p><p>results/SRR493368.tophat/accepted_hits.bam</p><p>results/SRR493369.tophat/accepted_hits.bam</p><p>results/SRR493370.tophat/accepted_hits.bam</p><p>results/SRR493371.tophat/accepted_hits.bam</p><blockquote><p>当我们测序得到的fastq数据map到基因组之后，会得到一个以sam或bam为扩展名的文件。这里，SAM的全称是sequence alignment/map format。而<strong>BAM就是SAM的二进制文件</strong>，也就是压缩格式的sam文件。 </p></blockquote><p>使用命令<code> samtools view accepted_hits.bam</code>查看SRR493366.tophat/accepted_hits.bam</p><img src="https://i.loli.net/2020/10/22/9Sik1CjxqmyPBs5.png" style="zoom:33%;"><h4 id="2-4-1-使用IGV查看BAM文件"><a href="#2-4-1-使用IGV查看BAM文件" class="headerlink" title="2.4.1 使用IGV查看BAM文件"></a><strong>2.4.1 使用IGV查看BAM文件</strong></h4><p>①先使用samtools对6个bam文件进行排序和构建索引</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#samtools 对bam进行排序</span>samtools <span class="token function">sort</span> accepted_hits.bam -o accepted_hits.sort.bam<span class="token comment" spellcheck="true">#samtools 对BAM文件建立索引</span>samtools index accepted_hits.sort.bam</code></pre><p>以SRR493366.tophat为例，如下图</p><p><img src="https://i.loli.net/2020/10/22/JFELbCXUm92nOfG.png"></p><p>然后对其他五个文件夹也是如此处理</p><p><img src="https://i.loli.net/2020/10/22/4gy8qCGLlW21xIY.png"></p><p>②使用具有sftp功能的软件FileZilla将Linux服务器上的文件传到自己电脑</p><blockquote><p>FileZilla  win 32位便携版 [<a href="https://download.filezilla.cn/client/windows/FileZilla_3.50.0_win32.zip">下载地址</a>]</p></blockquote><p>输入Linux服务器ip地址211.67.31.245，自己的用户名，密码，端口22，点击链接即可</p><p><img src="https://i.loli.net/2020/10/22/CDU2PzsvfRewTX4.png">        ③安装并打开IGV</p><blockquote><p>IGV -Win版 included java [ <a href="https://data.broadinstitute.org/igv/projects/downloads/2.8/IGV_Win_2.8.10-WithJava-installer.exe">下载地址</a>]</p></blockquote><p>将bam文件导入，选择hg19，chr21，通过调节右上角的页面缩放和点击上方的染色体位置来显示比对区域</p><p><img src="https://i.loli.net/2020/10/22/juLhgswTmyx9tpX.png"></p><p>④查看比对结果</p><p>SRR493366、SRR493367、SRR493368的比对结果：（位置-chr21:17,195,557-17,206,837）</p><p><img src="https://i.loli.net/2020/10/22/2O4b1ASKTGPqueY.png"></p><p>SRR493369、SRR493370、SRR4933671的比对结果：（位置-chr21:17,195,557-17,206,837）</p><p><img src="https://i.loli.net/2020/10/22/k8lUQxVrBtPAHz4.png"></p><h3 id="2-5-使用Cufflinks计算表达水平"><a href="#2-5-使用Cufflinks计算表达水平" class="headerlink" title="2.5  使用Cufflinks计算表达水平"></a>2.5  使用Cufflinks计算表达水平</h3><p>Cufflinks下主要包含cufflinks,cuffmerge,cuffcompare和cuffdiff等几支主要的程序。主要用于转录组的组装和差异表达分析。</p><p>cufflinks可以通过tophat2生成的accepted_hits.bam文件计算isoform的FPKM值然后输出gtf文件（GTF全称为gene transfer format，主要是用来对基因进行注释）</p><p>cuffmerge的作用是将cufflinks生成的trans.gtf文件整合成一个文件，方便后面cuffdiff的进一步分析，但此次上机并没用到。</p><p>cuffdiff算出bam文件里面的差异表达基因。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># calculate expression level</span>cufflinks -G ucsc.hg19.chr21.genes.gtf -o <span class="token variable">$RESULT</span>/SRR493366.cufflinks <span class="token variable">$RESULT</span>/SRR493366.tophat/accepted_hits.bam <span class="token operator">&amp;</span>cufflinks -G ucsc.hg19.chr21.genes.gtf -o <span class="token variable">$RESULT</span>/SRR493367.cufflinks <span class="token variable">$RESULT</span>/SRR493367.tophat/accepted_hits.bam <span class="token operator">&amp;</span>cufflinks -G ucsc.hg19.chr21.genes.gtf -o <span class="token variable">$RESULT</span>/SRR493368.cufflinks <span class="token variable">$RESULT</span>/SRR493368.tophat/accepted_hits.bam <span class="token operator">&amp;</span>cufflinks -G ucsc.hg19.chr21.genes.gtf -o <span class="token variable">$RESULT</span>/SRR493369.cufflinks <span class="token variable">$RESULT</span>/SRR493369.tophat/accepted_hits.bam <span class="token operator">&amp;</span>cufflinks -G ucsc.hg19.chr21.genes.gtf -o <span class="token variable">$RESULT</span>/SRR493370.cufflinks <span class="token variable">$RESULT</span>/SRR493370.tophat/accepted_hits.bam <span class="token operator">&amp;</span>cufflinks -G ucsc.hg19.chr21.genes.gtf -o <span class="token variable">$RESULT</span>/SRR493371.cufflinks <span class="token variable">$RESULT</span>/SRR493371.tophat/accepted_hits.bam <span class="token operator">&amp;</span></code></pre><pre class=" language-bash"><code class="language-bash">-G 转录组的参考文件</code></pre><p>运行命令</p><img src="https://i.loli.net/2020/10/22/Ls7PIlEReuGChNF.png" style="zoom:60%;"><img src="https://i.loli.net/2020/10/22/2Gi1zAY7x39SRJa.png" style="zoom:67%;"><p>生成的文件</p><pre><code>gene.fpkm ：gene的 fpkm 计算结果（基因表达量）isoforms.fpkm ：isoforms (可以理解为 gene 的各个外显子)的 fpkm 计算结果（转录本表达量）skipped.gtf： 跳过的基因的转录本信息transcripts.gtf ：转录组的gtf,该文件包含Cufflinks的组装结果isoforms</code></pre><p>查看结果，使用<code>cat genes.fpkm_tracking | cut -f 1,10-12</code>截取第1列和10-12列查看FPKM值</p><blockquote><p>RPKM = Reads Per Kilobase per Million mapped reads</p><p>FPKM = Fragments Per Kilobase per Million mapped reads</p><p>RPKM中的R指的是Reads针对单端测序，FPKM中的F是指Fragments, 针对双端测序我们现在测序一般来说都是测双端测序（paired-end sequencing），那么在mapping回参考基因组的时候就会有两条reads，分别是read1和read2，分别来源于建库打断的5’ 端和3’端。那么这2条reads就可以在参考基因组上确定1个小的片段，这个片段就叫fragment.</p><p>FPKM能够矫正掉<strong>gene长度</strong>以及<strong>测序深度</strong>对gene表达定量的影响</p></blockquote><p>可以看到不是所有的基因都表达，不同的样本不同的基因表达水平也不同</p><p>results/SRR493366.cufflinks/genes.fpkm_tracking</p><img src="https://i.loli.net/2020/10/22/te94OiI3Y5PZmxQ.png" style="zoom: 33%;"><p>results/SRR493367.cufflinks/genes.fpkm_tracking</p><img src="https://i.loli.net/2020/10/22/dAaHXIwegqus4Ut.png" style="zoom: 33%;"><p>results/SRR493368.cufflinks/genes.fpkm_tracking</p><img src="https://i.loli.net/2020/10/22/6aiJUXQDlZeCEFu.png" style="zoom: 33%;"><p>results/SRR493369.cufflinks/genes.fpkm_tracking</p><img src="https://i.loli.net/2020/10/22/TdcZePkyqhr5lxL.png" style="zoom: 33%;"><p>results/SRR493370.cufflinks/genes.fpkm_tracking</p><img src="https://i.loli.net/2020/10/22/Z9MNvP5uohs3JVj.png" style="zoom: 33%;"><p>results/SRR493371.cufflinks/genes.fpkm_tracking</p><img src="https://i.loli.net/2020/10/22/Zen2CjpV17BMAgu.png" style="zoom: 33%;"><h3 id="2-6-使用Cuffdiff—根据比对结果，计算差异表达水平"><a href="#2-6-使用Cuffdiff—根据比对结果，计算差异表达水平" class="headerlink" title="2.6 使用Cuffdiff—根据比对结果，计算差异表达水平"></a>2.6 使用Cuffdiff—根据比对结果，计算差异表达水平</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># find differentially expressed genes</span>cuffdiff ucsc.hg19.chr21.genes.gtf \    -o <span class="token variable">$RESULT</span>/cuffdiff \    -L SCRAMBLE,HOXA1KD \    <span class="token variable">$RESULT</span>/SRR493366.tophat/accepted_hits.bam,<span class="token variable">$RESULT</span>/SRR493367.tophat/accepted_hits.bam,<span class="token variable">$RESULT</span>/SRR493368.tophat/accepted_hits.bam \    <span class="token variable">$RESULT</span>/SRR493369.tophat/accepted_hits.bam,<span class="token variable">$RESULT</span>/SRR493370.tophat/accepted_hits.bam,<span class="token variable">$RESULT</span>/SRR493371.tophat/accepted_hits.bam</code></pre><p>运行命令</p><img src="https://i.loli.net/2020/10/22/Xmp9BHWUcRvYGbe.png" style="zoom:60%;"><img src="https://i.loli.net/2020/10/22/5mZAQ43l9vFrfkD.png" style="zoom:60%;"><p>结果路径<code>results/cuffdiff/genes.fpkm_tracking</code>, 使用<code>cat genes.fpkm_tracking | cut -f 1,10-17</code>查看</p><img src="https://i.loli.net/2020/10/22/czrYQl1ZeL68jsJ.png" style="zoom: 33%;"><h2 id="附：IGV的使用"><a href="#附：IGV的使用" class="headerlink" title="附：IGV的使用"></a>附：IGV的使用</h2><ol><li><p>载入bam文件后会产生3个相关的tracks:</p><ul><li>Alignment track :显示每个的reads的比对情况</li><li>Coverage track：显示覆盖率和测序深度,如果某核苷酸与参考序列不同（超过20%reads）时，IGV会标出不同的颜色。即：A→绿色；C→蓝色；G→橙色;T→红色。</li><li>Splice Junction Track：提供一个可选的横跨剪切位点(spanning splice junctions)的reads视图。红色向上弧形表示可变剪切基因位于正链，蓝色向下为负链；弧形的高度和厚度(thickness)与reads覆盖度成比例；</li></ul></li><li><p>补充IGV的颜色意思</p><p>资料：</p><ul><li><p><a href="https://www.youtube.com/watch?v=YpNg0hNUuo8&amp;list=PLSplvWwdPpSoyXjQ0xPs46CcA9Nzano9F&amp;index=1">官方youtube</a></p></li><li><p><a href="https://software.broadinstitute.org/software/igv/interpreting_insert_size">Interpreting Color by Insert Size</a> </p></li><li><p><a href="https://software.broadinstitute.org/software/igv/interpreting_pair_orientations">Interpreting Color by Pair Orientation</a></p></li></ul><p>在read上单独颜色显示的代表单碱基突变，颜色越深代表质量越高</p></li></ol><p><img src="https://img2020.cnblogs.com/blog/2156635/202010/2156635-20201030114441261-531023951.png"></p><p>灰色代表read质量高，白色代表质量为0</p><p><img src="https://i.loli.net/2020/10/24/UpRIrFwgsxXVmQb.jpg"></p><p>I代表单碱基插入</p><p><img src="https://img2020.cnblogs.com/blog/2156635/202010/2156635-20201030114441713-1237682213.jpg"></p><p>黑线代表可能的缺失</p><p><img src="https://img2020.cnblogs.com/blog/2156635/202010/2156635-20201030114442114-1554546844.jpg"></p><p>红色read：可能存在缺失</p><p>蓝色read：可能存在插入</p><p>绿色：重串联重复</p><p>青色、蓝色：倒置、反向重复</p><p><img src="https://img2020.cnblogs.com/blog/2156635/202010/2156635-20201030114442587-156462245.png"></p><img src="https://img2020.cnblogs.com/blog/2156635/202010/2156635-20201030114355878-1332977985.png" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信资源与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿巛的Hexo博客搭建</title>
      <link href="posts/a881.html"/>
      <url>posts/a881.html</url>
      
        <content type="html"><![CDATA[<ul><li>图片加载优化</li><li>滚动条美化</li><li>增加artitalk说说页面</li><li>博客优化</li><li>CDN加速</li><li>绑定域名(github、coding双绑定)</li><li>证书认证</li><li>滚动条美化</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/***** 滚动条 *****/</span><span class="token comment" spellcheck="true">/* 滚动条里面的小方块 */</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar-thumb</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FF2A68</span><span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span><span class="token number">45</span>deg,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">25%</span>,transparent <span class="token number">25%</span>,transparent <span class="token number">50%</span>,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">50%</span>,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">75%</span>,transparent <span class="token number">75%</span>,transparent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 滚动条的轨道 */</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar-track</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ffcaca</span>ff<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 滚动条整体部分 */</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="全站CDN加速"><a href="#全站CDN加速" class="headerlink" title="全站CDN加速"></a>全站CDN加速</h2><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科<br>用法：</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code></pre><h2 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h2><p>SEO（Search Engine Optimization）：汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。 ——百度百科<br>请参考这篇博文：<a href="https://blog.sky03.cn/posts/42790.html#toc-heading-18">https://blog.sky03.cn/posts/42790.html#toc-heading-18</a></p><h2 id="新建文章自动打开本地-Markdown-编辑器"><a href="#新建文章自动打开本地-Markdown-编辑器" class="headerlink" title="新建文章自动打开本地 Markdown 编辑器"></a>新建文章自动打开本地 Markdown 编辑器</h2><p>写新文章时，需要控制台执行 hexo new “文章名字”，这样就会在_posts 下生成一篇新文章，但需要手动打开，挺麻烦，只需要在站点根目录下新建 scripts 目录，然后再新建 auto_open.js，在文件填入一下内容</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Hexo 2.x 用户复制这段</span><span class="token comment" spellcheck="true">//hexo.on('new', function(path){</span>  <span class="token comment" spellcheck="true">//spawn('start  "markdown编辑器绝对路径.exe" ' + path);</span><span class="token comment" spellcheck="true">//});</span><span class="token comment" spellcheck="true">// Hexo 3 用户复制这段</span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//   spawn('start  "D:\Program Files\Typora\Typora.exe" ' + data.path); // Typora</span>  <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'start  "D:\\Program_Files\\Microsoft VS Code\\Code.exe" '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//VSCode</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>The Python Challenge Daily Record</title>
      <link href="posts/c134.html"/>
      <url>posts/c134.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.pythonchallenge.com/">Python Challenge</a>是首个谜语编程网站。挑战者需要连续挑战33个需要编程才能解开的谜题以锻炼自己的编程能力。</p><p>该网站建立于2005年，至今已经有三百多万位访客浏览并尝试解决该网站的谜题。</p><blockquote><p>Python Challenge is a game in which each level can be solved by a bit of (Python) programming.</p><p>The Python Challenge was written by Nadav Samet.</p><p>All levels can be solved by straightforward and very short scripts.(well, except of level 32.)</p><p>Python Challenge welcomes programmers of all languages. You will be able to solve most riddles in any programming language, but some of them will require Python.</p><p>Sometimes you’ll need extra modules. All can be downloaded for free from the internet.</p><p>It is just for fun - nothing waits for you at the end.</p><p>Keep the scripts you write - they might become useful.</p></blockquote><p>希望每天都能坚持刷题哈！🚩(然而并没有…)</p><h2 id="level-0-2020-10-28"><a href="#level-0-2020-10-28" class="headerlink" title="level_0_2020.10.28"></a>level_0_2020.10.28</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/def/0.html">http://www.pythonchallenge.com/pc/def/0.html</a><br><img src="https://i.loli.net/2020/11/14/HC8xwDEoN4hPyvn.png" alt="热身关"><br><strong>🖊Learned</strong><br>代码的强大<br>回顾一下乘方运算(这可能是python语法里最熟的之一了)</p><p><strong>🔑Solution</strong><br>就按照图片给的乘方算吧!</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! level 0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 274877906944</span></code></pre><h2 id="level-1-map-2020-10-27"><a href="#level-1-map-2020-10-27" class="headerlink" title="level_1_map_2020.10.27"></a>level_1_map_2020.10.27</h2><p>Link : <a href="http://www.pythonchallenge.com/pc/def/274877906944.html">http://www.pythonchallenge.com/pc/def/274877906944.html</a><br><img src="https://i.loli.net/2020/11/14/Y2EqrAsKB9lHtQi.png" alt="level_1"><br><strong>🖊Learned</strong><br>其实还可以用map方法，但是需要用if判断，不然空格括号也被翻译了。<br><code>ord(char)</code>:返回char的ASCII序列值<br><code>chr(num)</code>:返回ASCII码对应的字符</p><p><strong>🔑Solution</strong><br>根据所给图片提示,发现K和M,O和Q,E和G都差两个字母,所以应该就是做一个映射表,把给的字符翻译出来</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> stringorginal_str <span class="token operator">=</span> "g fmnc wms bgblr rpylqjyrc gr zw fylb<span class="token punctuation">.</span> rfyrq ufyr amknsrcpq ypc dmp<span class="token punctuation">.</span> bmgle \gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle<span class="token punctuation">.</span> sqgle qrpgle<span class="token punctuation">.</span>kyicrpylq<span class="token punctuation">(</span><span class="token punctuation">)</span> gq pcamkkclbcb<span class="token punctuation">.</span> lmu ynnjw ml rfc spj<span class="token punctuation">.</span>"trans <span class="token operator">=</span> str<span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">,</span>                      string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># string.ascii_lowercase = abcdefghijklmnopqrstuvwxyz</span><span class="token comment" spellcheck="true"># string.ascii_lowercase[2:] + string.ascii_lowercase[:2] cdefghijklmnopqrstuvwxyzab</span><span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>changed_str <span class="token operator">=</span> orginal_str<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>changed_str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that's why this text is so long.</span><span class="token comment" spellcheck="true"># using string.maketrans() is recommended. now apply on the url.</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'map'</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ocr</span></code></pre><h2 id="level-2-ocr-2020-10-28"><a href="#level-2-ocr-2020-10-28" class="headerlink" title="level_2_ocr_2020.10.28"></a>level_2_ocr_2020.10.28</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/def/ocr.html">http://www.pythonchallenge.com/pc/def/ocr.html</a><br><img src="https://i.loli.net/2020/11/14/RL6ucAMmJ3k4vNn.png" alt="level_2"><br><strong>🖊Learned</strong><br><strong>request和urllib的区别：</strong><br>我们在使用python爬虫时，需要模拟发起网络请求，主要用到的库有requests库和python内置的urllib库，一般建议使用requests，它是对urllib的再次封装，它们使用的主要区别：<br>requests可以直接构建常用的get和post请求并发起，urllib一般要先构建get或者post请求，然后再发起请求。</p><p><strong>正则：</strong></p><ul><li><code>requests.get(url).text</code> 获得html内容</li><li><code>re.search</code> 找到匹配的字符串，只匹配一次</li><li>获得需要处理的内容，\s可以匹配空格、Tab空白符）</li><li><code>match.group(n)</code>返回子字符串,注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。</li><li><code>.</code>匹配除了换行的任意字符,<code>\s</code>匹配任何Unicode空白字符（包括 [ \t\n\r\f\v] ,?对它前面的正则式匹配0到1次重复</li></ul><p><strong>🔑Solution</strong><br>查看页面源代码,发现后面有一堆乱七八糟的字符,我们的任务就是把里面参杂的字母给挑出来</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#  level2</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">from</span> collections <span class="token keyword">import</span> Counterhtml <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>    <span class="token string">"http://www.pythonchallenge.com/pc/def/ocr.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment" spellcheck="true"># 获取HTML文档</span>text <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;!--\n(%(.|\s)+)?\n-->"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'output/level_2_data.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span>final_text <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"[a-z]"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># findall 返回字符串列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>final_text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 或者直接对所有字符计数</span><span class="token comment" spellcheck="true"># final_text = re.search("&lt;!--\n%(.|\s)+", text).group()</span><span class="token comment" spellcheck="true"># q = Counter(final_text)  # 对里面的所有字符计数</span><span class="token comment" spellcheck="true"># print(q)</span><span class="token comment" spellcheck="true"># t = [i for i in q if q[i] == 1]  # 找出只出现一次的字符</span><span class="token comment" spellcheck="true"># print("".join(t))</span><span class="token comment" spellcheck="true"># 输出了equality</span><span class="token triple-quoted-string string">""" 另一种方法，使用了urllibimport urllib.request as urimport reurl = "http://www.pythonchallenge.com/pc/def/ocr.html"def main():    global url    response = ur.urlopen(url)    body = response.read()    print(body)    text = re.search("&lt;!--\n%(.|\s)+", body.decode())    dic = {}    # print(text.group(0))    for x in text.group(0):        if x not in dic:            dic[x] = 1        else:            dic[x] += 1    for k,v in dic.items():        print(k,v)    for i in dic:        if (dic[i] == 1 and 'a' &lt;= i &lt;= 'z'):            print(i, end='')if __name__ == '__main__':    main()"""</span></code></pre><h2 id="level-3-equality-2020-10-29"><a href="#level-3-equality-2020-10-29" class="headerlink" title="level 3_equality_2020.10.29"></a>level 3_equality_2020.10.29</h2><p>Link : <a href="http://www.pythonchallenge.com/pc/def/equality.html">http://www.pythonchallenge.com/pc/def/equality.html</a><br><img src="https://i.loli.net/2020/11/14/dXmwRVtqJkvEosO.png" alt="level_3"></p><p><strong>🖊Learned</strong></p><ul><li>findall用括号自动返回子串，当给出的正则表达式中带有多个括号时，列表的元素为多个字符串组成的tuple</li><li><code>re.findall(r'[^A-Z][A-Z]{3}([a-z])[A-Z]{3}[^A-Z]', text)</code>匹配时需要注意既然约定了3个大写字母,那外围就是小写字母了!</li></ul><p><strong>🔑Solution</strong><br>根据图片底下的文字提示,需要找到源代码中被三个大写字母包围的小写字母,然后把它们拼接在一起,为linklist<br>打开 <a href="http://www.pythonchallenge.com/pc/def/linkedlist.html">http://www.pythonchallenge.com/pc/def/linkedlist.html</a> 提示linkedlist.php<br>再打开 <a href="http://www.pythonchallenge.com/pc/def/linkedlist.php">http://www.pythonchallenge.com/pc/def/linkedlist.php</a></p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> rehtml <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.pythonchallenge.com/pc/def/equality.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>texttext <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">'&lt;!--\n((.|\s)+)?\n-->'</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'level_3_data.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span>results <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'[^A-Z][A-Z]{3}([a-z])[A-Z]{3}[^A-Z]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#linkedlist</span><span class="token comment" spellcheck="true"># ? 如果不括号起来，得到的结果会是</span><span class="token comment" spellcheck="true"># !['qIQNlQSLi', 'eOEKiVEYj', 'aZADnMCZq', 'bZUTkLYNg', 'uCNDeHSBj', 'kOIXdKBFh', 'dXJVlGZVm', 'gZAGiLQZx', 'vCJAsACFl', 'qKWGtIDCj']</span><span class="token comment" spellcheck="true"># 所以说findall用括号自动返回子串，当给出的正则表达式中带有多个括号时，列表的元素为多个字符串组成的tuple</span></code></pre><h2 id="level-4-linkedlist-2020-10-30"><a href="#level-4-linkedlist-2020-10-30" class="headerlink" title="level_4_linkedlist_2020.10.30"></a>level_4_linkedlist_2020.10.30</h2><p>Link :<a href="http://www.pythonchallenge.com/pc/def/linkedlist.php">http://www.pythonchallenge.com/pc/def/linkedlist.php</a><br><img src="https://i.loli.net/2020/11/14/1a8I2zg9c3CShUB.png" alt="level_4头图"><br><strong>🖊Learned</strong><br>要注意函数的局部变量和全局变量呀<br>request 尝试多次连接页面</p><pre class=" language-python"><code class="language-python">    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            <span class="token keyword">return</span> html        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>RequestException<span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p><strong>🔑Solution</strong><br>点击<a href="http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345">linkedlist.php?nothing=12345</a>这个链接,进入的页面显示and the next nothing is 44827,反复操作,发现这一关就是疯狂跳转网页</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">next_page</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> steps <span class="token comment" spellcheck="true"># 使得函数内的step和全局变量为一个变量</span>    html <span class="token operator">=</span> gethtml<span class="token punctuation">(</span>f<span class="token string">"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing={link}"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        hint <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">'.*\s(\d+)'</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> AttributeError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小心前面有诡计！"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'stop'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        steps <span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>steps<span class="token punctuation">,</span> hint<span class="token punctuation">)</span>        <span class="token keyword">return</span> hint<span class="token keyword">def</span> <span class="token function">gethtml</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    因为发现request经常会卡住无响应，所以封装了这个函数，用于重试    '''</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            <span class="token keyword">return</span> html        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>RequestException<span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        link <span class="token operator">=</span> next_page<span class="token punctuation">(</span>link<span class="token punctuation">)</span>        <span class="token keyword">if</span> link <span class="token operator">==</span> <span class="token string">'stop'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>steps <span class="token operator">=</span> <span class="token number">1</span>link <span class="token operator">=</span> <span class="token number">12345</span>run<span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Yes. Divide by two and keep going.</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'怕啥，那我就输入8022继续跑'</span><span class="token punctuation">)</span>run<span class="token punctuation">(</span><span class="token number">8022</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 16044//2=8022</span><span class="token comment" spellcheck="true"># 最终输出结果peak.html，打开http://www.pythonchallenge.com/pc/def/peak.html</span></code></pre><h2 id="level-5-peak-2020-10-31"><a href="#level-5-peak-2020-10-31" class="headerlink" title="level_5_peak_2020.10.31"></a>level_5_peak_2020.10.31</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/def/peak.html">http://www.pythonchallenge.com/pc/def/peak.html</a></p><p><img src="https://i.loli.net/2020/10/31/gGHW3n5NeKUZBY9.png" alt="level_5"></p><p><strong>🖊Learned</strong><br>爬虫</p><ul><li><code>requests.get(url).text</code> 是获得纯文本内容</li><li><code>requests.get(url).content</code>是二进制内容</li><li><code>urllib.urlopen(url)</code> 返回的是文件对象，用read()查看</li></ul><p>pickle<br><code>pickle</code>是python语言的一个标准模块，能对数据进行序列化和反序列化，序列化过程将文本信息转变为二进制数据流。反序列化便可以得到原始的数据。这样便于存储数据和发送数据</p><ul><li><code>pickle.dump() </code>序列化</li><li><code>pickle.load()</code> 反序列化方法</li></ul><p><strong>🔑Solution</strong><br>点击<a href="http://www.pythonchallenge.com/pc/def/banner.p">banner.p</a>，发现页面只有这样的长~条</p><pre><code>(lp0(lp1(S' 'p2I95tp3aa(lp4(g2I14tp5a(S'#'p6I5tp7a(g2I70tp8a(g6I5tp9a(g2I1tp10aa(lp11(g2I15tp12</code></pre><p>之前源代码提示”peak hell sounds familiar “,peak hell 的谐音是pickle，就用pickle处理数据，发现是一个二维数组，每行都以[(‘ ‘/‘#’, 数字)],这种形式存放内容单位, 而列表的每行数字相加都为95，猜测前面是打印的内容，后面跟着是打印的数量，最后竟然在终端输出为一个大大的“channel”!</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> pickle<span class="token comment" spellcheck="true"># 获取二进制的数据</span>content<span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.pythonchallenge.com/pc/def/banner.p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token comment" spellcheck="true"># print(content)</span>data <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 发现是一个二维数组，每行都以[(' '/'#', 数字)],这种形式存放内容单位</span><span class="token keyword">for</span> line <span class="token keyword">in</span> data<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 列表的每行相加都为95，猜测前面是打印的内容，后面跟着是打印的数量</span><span class="token keyword">for</span> line <span class="token keyword">in</span> data<span class="token punctuation">:</span>    output <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> line<span class="token punctuation">:</span>        output <span class="token operator">+=</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##得到channel的输出</span><span class="token comment" spellcheck="true">## http://www.pythonchallenge.com/pc/def/channel.html</span></code></pre><p><strong>Output</strong></p><pre><codecode></pre><h2 id="level-6-channel-2020-11-1"><a href="#level-6-channel-2020-11-1" class="headerlink" title="level_6_channel_2020.11.1"></a>level_6_channel_2020.11.1</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/def/channel.html">http://www.pythonchallenge.com/pc/def/channel.html</a></p><p><img src="https://i.loli.net/2020/11/14/Iu7NkRG8coOTPZs.jpg"><br><strong>🖊Learned</strong><br>python中如何打开压缩包<br><code>channel_zip = zipfile.ZipFile(zip_file, "r")</code>创建压缩包对象<br><code>channel_zip.open('readme.txt', 'r')</code> 打开压缩包里的某个文件</p><p><strong>🔑Solution</strong><br>查看源代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- &lt;-- zip --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>now there are pairs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>channel.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- The following has nothing to do with the riddle itself. I justthought it would be the right point to offer you to donate to thePython Challenge project. Any amount will be greatly appreciated.-thesamet--></span></code></pre> <!-- <-- zip --><p>如果把注释去掉就是html &lt;– zip，暗示把html改为zip</p><p>提示是zip，于是改url，发现可下载zip！（城会玩！）</p><p><img src="https://i.loli.net/2020/11/14/8RCsjhBYHVJLSTt.png"></p><p>查看压缩包，发现里面有一个readme.txt, 剩下的文件是一大坨以数字命名的txt,阅读readme, 发现这一关和linklist类似,谜底和peak关又类似, 最后答案为hockey</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> io<span class="token keyword">import</span> re<span class="token keyword">import</span> zipfile  <span class="token comment" spellcheck="true"># #导入对zip文件处理的模块 zipfile</span><span class="token comment" spellcheck="true">##获取二进制数据</span>zip_get <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>    <span class="token string">"http://www.pythonchallenge.com/pc/def/channel.zip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token comment" spellcheck="true"># StringIO和BytesIO是在内存中操作str和bytes的方法，使得和读写文件具有一致的接口</span>zip_file <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>zip_get<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#将函数返回的压缩包的二进制数据在内存中读</span>channel_zip <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>zip_file<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#以只读方式打开压缩包</span><span class="token keyword">print</span><span class="token punctuation">(</span>channel_zip<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#打印压缩包内的文件名列表</span><span class="token comment" spellcheck="true">#阅读 readme.txt</span><span class="token keyword">with</span> channel_zip<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'readme.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#文件里的内容是byte字节，所以用utf-8读取</span> <span class="token triple-quoted-string string">"""得到如下提示 welcome to my zipped list.# hint1: start from 90052# hint2: answer is inside the zip"""</span>file_name_next <span class="token operator">=</span> <span class="token string">"90052"</span>  <span class="token comment" spellcheck="true"># 阅读readme.txt的提示</span>comment <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true"># 阅读 46145.txt，说要collect the comments</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    file_comment <span class="token operator">=</span> channel_zip<span class="token punctuation">.</span>getinfo<span class="token punctuation">(</span>file_name_next <span class="token operator">+</span> <span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>comment<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>        <span class="token string">"utf-8"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 以utf-8方式读取压缩包内的各个文件</span>    <span class="token comment" spellcheck="true">#comment是个什么东东？？</span>    comment <span class="token operator">+=</span> file_comment    <span class="token keyword">with</span> channel_zip<span class="token punctuation">.</span>open<span class="token punctuation">(</span>file_name_next <span class="token operator">+</span> <span class="token string">".txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 阅读文件内容</span>        file_content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>file_content<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 尝试查找下一个线索，用正则查找数字</span>        file_name_next <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"\d+"</span><span class="token punctuation">,</span> file_content<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#没有则中断</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span>zip_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>Output</strong></p><pre><code>**********************************************************************************************************************************                                                            ****   OO    OO    XX      YYYY    GG    GG  EEEEEE NN      NN  ****   OO    OO  XXXXXX   YYYYYY   GG   GG   EEEEEE  NN    NN   ****   OO    OO XXX  XXX YYY   YY  GG GG     EE       NN  NN    ****   OOOOOOOO XX    XX YY        GGG       EEEEE     NNNN     ****   OOOOOOOO XX    XX YY        GGG       EEEEE      NN      ****   OO    OO XXX  XXX YYY   YY  GG GG     EE         NN      ****   OO    OO  XXXXXX   YYYYYY   GG   GG   EEEEEE     NN      ****   OO    OO    XX      YYYY    GG    GG  EEEEEE     NN      ****                                                            ****************************************************************** **************************************************************</code></pre><p>所谓的comment其实可以通过banzip查看,”空白”的注释应该是空格或者换行符</p><p><img src="https://i.loli.net/2020/11/15/Bb4tqPk7efEyZho.png" alt="使用banzip查看压缩包内容"></p><h2 id="level-7-oxygen-2020-11-2"><a href="#level-7-oxygen-2020-11-2" class="headerlink" title="level_7_oxygen_2020.11.2"></a>level_7_oxygen_2020.11.2</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/def/hockey.html">http://www.pythonchallenge.com/pc/def/hockey.html</a></p><p><strong>🖊Learned</strong><br>这是第一次遇到PIL,后面PIL就是老盆友咯!<br>img.getpixel((x,y)) 获得像素值<br>img.size 获得w和h</p><p><strong>🔑Solution</strong><br>it’s in the air. look at the letters. letter指的是hockey，说在空气中，空气那就是氮气、氧气、二氧化碳等东西，猜测是氧气oxygen。</p><p>于是打开<a href="http://www.pythonchallenge.com/pc/def/oxygen.html%EF%BC%8C%E5%8F%91%E7%8E%B0%E7%AC%AC%E4%B8%83%E5%85%B3%E8%B0%9C%E9%A2%98%EF%BC%8C%E5%8F%AA%E6%9C%89%E4%B8%80%E5%BC%A0%E5%9B%BE%EF%BC%8C%E4%B8%AD%E9%97%B4%E6%9C%89%E4%B8%AA%E7%81%B0%E5%B8%A6html%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B">http://www.pythonchallenge.com/pc/def/oxygen.html，发现第七关谜题，只有一张图，中间有个灰带html代码如下</a><br><img src="https://i.loli.net/2020/11/14/xiZeBmbaCh3L4oJ.png"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>smarty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oxygen.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>获取图片，对其进行处理</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> io<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image  <span class="token comment" spellcheck="true"># Python Imaging Library导入Image</span>url <span class="token operator">=</span> <span class="token string">'http://www.pythonchallenge.com/pc/def/oxygen.png'</span>image <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>contentimg_io <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>image<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#二进制数据放入内存</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img_io<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#打开图片，创建图片对象</span><span class="token comment" spellcheck="true"># img.show() # 显示图像，启动一个窗口</span><span class="token comment" spellcheck="true"># print(img.size)  #629,95</span><span class="token comment" spellcheck="true"># 灰色带大概在图片中间部位</span>width<span class="token punctuation">,</span> height <span class="token operator">=</span> img<span class="token punctuation">.</span>sizey <span class="token operator">=</span> height <span class="token operator">//</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true">##灰色带的大致区域设为y</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>mode<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查看图片像素模式，RGBA，带alpha通道</span><span class="token comment" spellcheck="true"># 获取中间条带的信息</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pixel<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#打印各个点的像素信息</span></code></pre><p>筛选出灰色带</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pixel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出结果：开头的115重复5次，中间的重复7次，最后重复8次</p><pre><code>115 115 115 115 115 109 109 109 109 109 109 109 97 97 97 97 97 97 97 114 114 114 114 114 114 114 116 116 116 116 116 116 116 32 32 32 32 32 32 32 103 103 103 103 103 103 103 117 117 117 117 117 117 117 121 121 121 121 121 121 121 44 44 44 44 44 44 44 32 32 32 32 32 32 32 121 121 121 121 121 121 121 111 111 111 111 111 111 111 117 117 117 117 117 117 117 ... 52 52 52 52 52 52 52 44 44 44 44 44 44 44 32 32 32 332 32 32 32 49 49 49 49 49 49 49 48 48 48 48 48 48 48 53 53 53 53 53 53 53 44 44 44 4 4 44 44 44 32 32 32 32 32 32 32 49 49 49 49 49 49 49 49 49 49 49 49 49 49 54 54 54 544 54 54 54 44 44 44 44 44 44 44 32 32 32 32 32 32 32 49 49 49 49 49 49 49 50 50 50 50 550 50 50 49 49 49 49 49 49 49 93 93 93 93 93 93 93 93</code></pre><p>把每个灰度值提取出来</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#尝试 给字符串去重, 但是发现会自动排序🤣丢失信息</span><span class="token triple-quoted-string string">""" grey_list = []for x in range(width):    pixel = img.getpixel((x, y))    if pixel[1] == pixel[0] and pixel[0] == pixel[2]:        grey_list.append(pixel[0])grey_set = set(grey_list) #用set去重print(grey_set) """</span><span class="token comment" spellcheck="true"># 每七个取一个数字</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pixel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>得到数字串</p><pre><code>115 109 97 114 116 32 103 117 121 44 32 121 111 117 32 109 97 100 101 32 105 116 46 32 116104 101 32 110 101 120 116 32 108 101 118 101 108 32 105 115 32 91 49 48 53 44 32 49 49 4844 32 49 49 54 44 32 49 48 49 44 32 49 48 51 44 32 49 49 52 44 32 49 48 53 44 32 49 49 54                         4432 49 50 49 93</code></pre><p>猜测把字符串用ASCII码翻译</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pixel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ! 得到 smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]</span></code></pre><p>最后的处理, 得到integrity</p><pre class=" language-python"><code class="language-python">hint <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">]</span><span class="token keyword">for</span> num <span class="token keyword">in</span> hint<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#integrity</span></code></pre><p><strong>💻Code</strong><br>完整代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> io<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image  <span class="token comment" spellcheck="true"># Python Imaging Library导入Image</span>url <span class="token operator">=</span> <span class="token string">'http://www.pythonchallenge.com/pc/def/oxygen.png'</span>image <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>contentimg_io <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>image<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 二进制数据放入内存</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img_io<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打开图片，创建图片对象</span><span class="token comment" spellcheck="true"># img.show() # 显示图像，启动一个窗口</span><span class="token comment" spellcheck="true"># print(img.size)  #629,95</span><span class="token comment" spellcheck="true"># 灰色带大概在图片中间部位</span>width<span class="token punctuation">,</span> height <span class="token operator">=</span> img<span class="token punctuation">.</span>sizey <span class="token operator">=</span> height <span class="token operator">//</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># 灰色带的大致区域设为y</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>mode<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查看图片像素模式，RGBA，带alpha通道</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pixel<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印各个点的像素信息</span><span class="token comment" spellcheck="true"># 得到各个点的RGBA值后，先对灰色像素带处理</span><span class="token comment" spellcheck="true"># 每七个取一个数字</span><span class="token comment" spellcheck="true"># ?猜测把字符串用ASCII码翻译</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pixel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ! 得到 smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]</span>hint <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">]</span><span class="token keyword">for</span> num <span class="token keyword">in</span> hint<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># integrity</span></code></pre><h2 id="level-8-integrity-2020-11-3"><a href="#level-8-integrity-2020-11-3" class="headerlink" title="level 8_integrity_2020.11.3"></a>level 8_integrity_2020.11.3</h2><p>Link : <a href="http://www.pythonchallenge.com/pc/def/integrity.html">http://www.pythonchallenge.com/pc/def/integrity.html</a></p><p><strong>🖊Learned</strong></p><blockquote><p>bz2 模块是 bzip2 库的接口，用于压缩数据以进行存储或传输。提供了三种 API：</p><p>​    “一次性” 压缩 / 解压缩功能，用于操作大堆数据,<a href="https://docs.python.org/zh-cn/3/library/bz2.html#bz2.compress"><code>compress()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/bz2.html#bz2.decompress"><code>decompress()</code></a> 函数。<br>​            用于处理数据流的迭代压缩 / 解压缩对象,<a href="https://docs.python.org/zh-cn/3/library/bz2.html#bz2.BZ2Compressor"><code>BZ2Compressor</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/bz2.html#bz2.BZ2Decompressor"><code>BZ2Decompressor</code></a> 类。<br>​            类似文件的类，支持与未压缩文件一样的读写,<a href="https://docs.python.org/zh-cn/3/library/bz2.html#bz2.open"><code>open()</code></a> 函数和 <a href="https://docs.python.org/zh-cn/3/library/bz2.html#bz2.BZ2File"><code>BZ2File</code></a> 类。<br>————————————————</p></blockquote><p>然后总结一下bz2的用法，首先输入的解压数据得是二进制，<code>bz2.BZ2Decompressor()</code>是创建一个Decompressor，还是得用decompress来解压数据，不过这是逐步处理而不是一次性将数据全放入内存！</p><p>记住b’BZ..’二进制数据BZ开头就是用bz2压缩的,之后也会经常遇到</p><p><strong>🔑Solution</strong></p><p>查看源代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>working hard?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integrity.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>640<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>480<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">usemap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#notinsect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>notinsect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poly<span class="token punctuation">"</span></span>        <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>179,284,214,311,255,320,281,226,319,224,363,309,339,222,371,225,411,229,404,242,415,252,428,233,428,214,394,207,383,205,390,195,423,192,439,193,442,209,440,215,450,221,457,226,469,202,475,187,494,188,494,169,498,147,491,121,477,136,481,96,471,94,458,98,444,91,420,87,405,92,391,88,376,82,350,79,330,82,314,85,305,90,299,96,290,103,276,110,262,114,225,123,212,125,185,133,138,144,118,160,97,168,87,176,110,180,145,176,153,176,150,182,137,190,126,194,121,198,126,203,151,205,160,195,168,217,169,234,170,260,174,282<span class="token punctuation">"</span></span>        <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../return/good.html<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#303030<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Where is the missing link?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--un: 'BZh91AY&amp;SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00 \x00!\x9ah3M\x07&lt;]\xc9\x14\xe1BA\x06\xbe\x084'pw: 'BZh91AY&amp;SY\x94$|\x0e\x00\x00\x00\x81\x00\x03$ \x00!\x9ah3M\x13&lt;]\xc9\x14\xe1BBP\x91\xf08'--></span></code></pre><p>Where is the missing link? 链接缺失，area有属性的coords好像有问题，输入进去</p><p>难道有鬼？？？</p><pre class=" language-python"><code class="language-python">may_hint <span class="token operator">=</span> <span class="token string">"179,284,214,311,255,320,281,226,319,224,363,309,339,222,371,225,411,229,404,242,415,252,428,233,428,214,394,207,383,205,390,195,423,192,439,193,442,209,440,215,450,221,457,226,469,202,475,187,494,188,494,169,498,147,491,121,477,136,481,96,471,94,458,98,444,91,420,87,405,92,391,88,376,82,350,79,330,82,314,85,305,90,299,96,290,103,276,110,262,114,225,123,212,125,185,133,138,144,118,160,97,168,87,176,110,180,145,176,153,176,150,182,137,190,126,194,121,198,126,203,151,205,160,195,168,217,169,234,170,260,174,282"</span>mh_list <span class="token operator">=</span> may_hint<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mh_list<span class="token punctuation">)</span><span class="token keyword">for</span> num <span class="token keyword">in</span> mh_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""output result：it seems terrible!!!³ĜÖķÿŀęâĿàūĵœÞųáƛåƔòƟüƬéƬÖƊÏſÍƆÃƧÀƷÁƺÑƸ×ǂÝǉâǕÊǛ»Ǯ¼Ǯ©ǲǫyǝǡ`Ǘ^ǊbƼ[ƤWƕ\ƇXŸRŞOŊRĺUıZī`ĢgĔnĆrá{Ô}¹°°¶¾~ÂyÆ~ËÍ Ã¨Ù©êªĄ®Ě³"""</span></code></pre><p>好吧是我想多了，还有其他信息</p><p>点击超链接，看到让人输出用户名和密码</p><p><img src="https://i.loli.net/2020/11/14/mX5UOF8JTP6h3wW.png"></p><p>看到最后一段的注释好像就是对应的用户名un和密码pw，问题是这玩意怎么解！！！</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--un: 'BZh91AY&amp;SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00 \x00!\x9ah3M\x07&lt;]\xc9\x14\xe1BA\x06\xbe\x084'pw: 'BZh91AY&amp;SY\x94$|\x0e\x00\x00\x00\x81\x00\x03$ \x00!\x9ah3M\x13&lt;]\xc9\x14\xe1BBP\x91\xf08'--></span></code></pre><p>注意到开头BZ，查阅之后得知是bzip2压缩, 把un和pw字符串进行解压就可以得到答案了</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> bz2un <span class="token operator">=</span> b<span class="token string">'BZh91AY&amp;SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00 \x00!\x9ah3M\x07&lt;]\xc9\x14\xe1BA\x06\xbe\x084'</span>pw <span class="token operator">=</span> b<span class="token string">'BZh91AY&amp;SY\x94$|\x0e\x00\x00\x00\x81\x00\x03$ \x00!\x9ah3M\x13&lt;]\xc9\x14\xe1BBP\x91\xf08'</span><span class="token comment" spellcheck="true"># 1. 逐步处理</span><span class="token keyword">print</span><span class="token punctuation">(</span>bz2<span class="token punctuation">.</span>BZ2Decompressor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>un<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bz2<span class="token punctuation">.</span>BZ2Decompressor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>pw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 一次性处理</span><span class="token keyword">print</span> <span class="token punctuation">(</span>bz2<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>un<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>bz2<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>pw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output:</span><span class="token comment" spellcheck="true"># b'huge'</span><span class="token comment" spellcheck="true"># b'file'</span></code></pre><p>然后就输入用户名huge，密码file进入第九关啦！</p><p><a href="http://www.pythonchallenge.com/pc/return/good.html">点击进入下一关</a></p><h2 id="level-9-good-2020-11-4"><a href="#level-9-good-2020-11-4" class="headerlink" title="level_9_good_2020.11.4"></a>level_9_good_2020.11.4</h2><p>Link :<a href="http://www.pythonchallenge.com/pc/return/good.html">http://www.pythonchallenge.com/pc/return/good.html</a></p><p><strong>🖊Learned</strong></p><p>今天要学习的内容：</p><ul><li><a href="https://www.runoob.com/python/python-func-zip.html">Python zip() 函数</a>，经常用于列表两个两个处理</li><li><a href="https://zhuanlan.zhihu.com/p/59849190">Python Pillow 库 ImageDraw 绘制图像模块</a></li><li><a href="https://www.jianshu.com/p/171ce1d0656e">python Image</a></li></ul><p>PIL.Image.new(mode, size, color=0)</p><ul><li>mode 颜色模式，9种，分别为1(非黑即白)，L(灰色），P（8bit,调色板模式)，RGB，RGBA，CMYK，YCbCr，I，F。</li><li>size 大小（500，500）</li><li>color 默认黑色</li></ul><p>Web客户端授权验证</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用户名</span>user <span class="token operator">=</span> <span class="token string">"huge"</span><span class="token comment" spellcheck="true"># 密码</span>passwd <span class="token operator">=</span> <span class="token string">"file"</span><span class="token comment" spellcheck="true"># Web服务器 IP</span>url <span class="token operator">=</span> <span class="token string">"http://www.pythonchallenge.com/pc/return/good.html"</span><span class="token comment" spellcheck="true"># 1. 构建一个密码管理对象，用来保存需要处理的用户名和密码</span>passwdmgr <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPPasswordMgrWithDefaultRealm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 添加账户信息，第一个参数realm是与远程服务器相关的域信息，一般没人管它都是写None，后面三个参数分别是 Web服务器、用户名、密码</span>passwdmgr<span class="token punctuation">.</span>add_password<span class="token punctuation">(</span>None<span class="token punctuation">,</span> url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 构建一个HTTP基础用户名/密码验证的HTTPBasicAuthHandler处理器对象，参数是创建的密码管理对象</span>httpauth_handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPBasicAuthHandler<span class="token punctuation">(</span>passwdmgr<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4. 通过 build_opener()方法使用这些代理Handler对象，创建自定义opener对象，参数包括构建的 proxy_handler</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>httpauth_handler<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5. 可以选择通过install_opener()方法定义opener为全局opener</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6. 构建 Request对象</span>request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 7. 定义opener为全局opener后，可直接使用urlopen()发送请求</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 8. 打印响应内容</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>好像有点长~哇</p><p><strong>🔑Solution</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDraw<span class="token comment" spellcheck="true">#改天用正则表达式改下</span>first <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">146</span><span class="token punctuation">,</span> <span class="token number">399</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">,</span> <span class="token number">403</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">393</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">391</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">386</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">381</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">371</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>second <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">146</span><span class="token punctuation">,</span> <span class="token number">186</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#创建图片对象，背景为白色，模式为非黑即白</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>img<span class="token punctuation">)</span></code></pre><p>打印first</p><pre class=" language-python"><code class="language-python">draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>first<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> first<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://i.loli.net/2020/11/14/niUgVLqSEk8sT3x.png" width="50%"><p>打印second</p><pre class=" language-python"><code class="language-python">draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>second<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> second<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://i.loli.net/2020/11/14/XCBEkIuJLOo3pjH.png" width="50%;"><p>合并</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># draw.line(list(zip(first[0::2], first[1::2])))</span><span class="token comment" spellcheck="true"># draw.line(list(zip(second[0::2], second[1::2])))</span>draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>first<span class="token punctuation">)</span>draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>second<span class="token punctuation">)</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://i.loli.net/2020/11/14/nlBoNPd1jp3GEvc.png" width="50%"><p>换一种画图</p><pre class=" language-python"><code class="language-python">img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>img<span class="token punctuation">)</span>draw<span class="token punctuation">.</span>polygon<span class="token punctuation">(</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>first<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> first<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>draw<span class="token punctuation">.</span>polygon<span class="token punctuation">(</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>second<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> second<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201226131057-2020-12-26.png" width="50%"><p>所以答案就是bull啦</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDraw<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> re<span class="token comment" spellcheck="true"># 用户名</span>user <span class="token operator">=</span> <span class="token string">"huge"</span><span class="token comment" spellcheck="true"># 密码</span>passwd <span class="token operator">=</span> <span class="token string">"file"</span><span class="token comment" spellcheck="true"># Web服务器 IP</span>url <span class="token operator">=</span> <span class="token string">"http://www.pythonchallenge.com/pc/return/good.html"</span><span class="token comment" spellcheck="true"># 1. 构建一个密码管理对象，用来保存需要处理的用户名和密码</span>passwdmgr <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPPasswordMgrWithDefaultRealm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 添加账户信息，第一个参数realm是与远程服务器相关的域信息，一般没人管它都是写None，后面三个参数分别是 Web服务器、用户名、密码</span>passwdmgr<span class="token punctuation">.</span>add_password<span class="token punctuation">(</span>None<span class="token punctuation">,</span> url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 构建一个HTTP基础用户名/密码验证的HTTPBasicAuthHandler处理器对象，参数是创建的密码管理对象</span>httpauth_handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPBasicAuthHandler<span class="token punctuation">(</span>passwdmgr<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4. 通过 build_opener()方法使用这些代理Handler对象，创建自定义opener对象，参数包括构建的 proxy_handler</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>httpauth_handler<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5. 可以选择通过install_opener()方法定义opener为全局opener</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6. 构建 Request对象</span>request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 7. 定义opener为全局opener后，可直接使用urlopen()发送请求</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 8. 打印响应内容</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>first_str <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"first:\n((.|\s)+)\n\nsecond:"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>first_num <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">,</span> first_str<span class="token punctuation">)</span>first_num <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> first_num<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>first_num<span class="token punctuation">)</span>second_str <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">'second:\n((.|\s)+)'</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>second_num <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">,</span> second_str<span class="token punctuation">)</span>second_num <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> second_num<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>second_num<span class="token punctuation">)</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>img<span class="token punctuation">)</span>draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>first_num<span class="token punctuation">)</span>draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>second_num<span class="token punctuation">)</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># img = Image.new('RGB', (500, 500))</span><span class="token comment" spellcheck="true"># draw = ImageDraw.Draw(img)</span><span class="token comment" spellcheck="true"># draw.polygon(list(zip(first_num[0::2], first_num[1::2])), fill="white")</span><span class="token comment" spellcheck="true"># draw.polygon(list(zip(second_num[0::2], second_num[1::2])), fill="brown")</span><span class="token comment" spellcheck="true"># img.show()</span></code></pre><p><a href="http://www.pythonchallenge.com/pc/return/bull.html">点击进入下一关</a></p><h2 id="level-10-bull-2020-11-5"><a href="#level-10-bull-2020-11-5" class="headerlink" title="level_10_bull_2020.11.5"></a>level_10_bull_2020.11.5</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/return/bull.html">http://www.pythonchallenge.com/pc/return/bull.html</a><br><img src="https://i.loli.net/2020/11/14/g5mdp2QahHuecCU.png"></p><p><strong>🖊Learned</strong><br>这一关考察数学归纳还有编程功底, 计算每个字符出现的重复次数的方法需要学习一下, 虽然可以直接通过python的库实现<br><strong>🔑Solution</strong><br>点击图片，看到</p><pre><code>a = [1, 11, 21, 1211, 111221,...]</code></pre><p>所以这题的意思就是找规律</p><p>1，1个1→11</p><p>2个1→21</p><p>1个2一个1→1211</p><p>1个1，1个2，2个1→111221</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># len(a[30]) = ?</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 运行30次</span>    position <span class="token operator">=</span> <span class="token number">0</span>    repeats <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> position <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> repeats <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">and</span> a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>repeats<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">:</span>            repeats <span class="token operator">+=</span> <span class="token number">1</span>        b <span class="token operator">+=</span> str<span class="token punctuation">(</span>repeats <span class="token operator">-</span> position<span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span>        position <span class="token operator">=</span> repeats    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    b <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>得到5080</p><p>所以点击进入下一关： <a href="http://www.pythonchallenge.com/pc/return/5808.html">http://www.pythonchallenge.com/pc/return/5808.html</a></p><h2 id="level-11-5808-amp-pillow-2020-11-6"><a href="#level-11-5808-amp-pillow-2020-11-6" class="headerlink" title="level_11_5808&amp;pillow_2020.11.6"></a>level_11_5808&amp;pillow_2020.11.6</h2><p>翻译了一整天的药学作业的两篇论文，copy了两万多字，差点吐血🤮</p><p>好了，今晚还是继续挑战python吧</p><h3 id="🖊Learned的知识-pillow"><a href="#🖊Learned的知识-pillow" class="headerlink" title="🖊Learned的知识-pillow"></a>🖊Learned的知识-pillow</h3><p>感觉好几关都和图像处理有关欸！就稍微补一点pillow库的知识吧</p><p><a href="https://liam.page/2015/04/22/pil-tutorial-basic-usage/">PIL 简明教程 - 基本用法</a></p><p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320027235877860c87af5544f25a8deeb55141d60c5000#0">廖雪峰 - Pillow</a></p><p><a href="https://www.jianshu.com/p/e8d058767dfa#%E5%9B%BE%E5%83%8F%E9%80%9A%E9%81%93%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2%E8%A3%81%E5%89%AA">python PIL 图像处理</a></p><p>PIL：Python Imaging Library，已经是Python平台事实上的图像处理标准库了。PIL功能非常强大，但API却非常简单易用。但由于PIL仅支持到Python 2.7，加上年久失修，于是一群志愿者在PIL的基础上创建了兼容的版本，名字叫<a href="https://github.com/python-pillow/Pillow">Pillow</a>，支持最新Python 3.x，又加入了许多新特性，因此，我们可以直接安装使用Pillow。</p><pre class=" language-python"><code class="language-python"> pip install pillow</code></pre><h4 id="图像打开，保存"><a href="#图像打开，保存" class="headerlink" title="图像打开，保存"></a>图像打开，保存</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token comment" spellcheck="true"># 打开一个jpg图像文件，注意是当前路径:</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'test.jpg'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获得图像尺寸:</span>w<span class="token punctuation">,</span> h <span class="token operator">=</span> im<span class="token punctuation">.</span>size <span class="token comment" spellcheck="true"># 注意，比如尺寸是640，480，实际为0-639，0-479</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Original image size: %sx%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Resize image to: %sx%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>w<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> h<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把缩放后的图像用jpeg格式保存:</span>im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'thumbnail.jpg'</span><span class="token punctuation">,</span> <span class="token string">'jpeg'</span><span class="token punctuation">)</span></code></pre><h4 id="图片切片"><a href="#图片切片" class="headerlink" title="图片切片"></a>图片切片</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#box变量是一个四元组(左，上，右，下)。</span>box <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>bottom<span class="token punctuation">)</span><span class="token punctuation">)</span>region <span class="token operator">=</span> im<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>box<span class="token punctuation">)</span></code></pre><h4 id="图片缩放"><a href="#图片缩放" class="headerlink" title="图片缩放"></a>图片缩放</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 缩放到50%:</span>im<span class="token punctuation">.</span>thumbnail<span class="token punctuation">(</span><span class="token punctuation">(</span>w<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> h<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  thumbnail会保持宽高比</span><span class="token comment" spellcheck="true"># 如果要重设大小和比例可以用resize，Image.ANTIALIAS是高质量滤镜</span>img <span class="token operator">=</span> img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span></code></pre><h4 id="使用matplotlib-pyplot"><a href="#使用matplotlib-pyplot" class="headerlink" title="使用matplotlib.pyplot"></a>使用matplotlib.pyplot</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltimg <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'assets/cave.jpg'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#打开图像</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token string">"beauty"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'origin'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#box变量是一个四元组(左，上，右，下)。</span>box <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">260</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>roi <span class="token operator">=</span> img<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>box<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'roi'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>roi<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/11/14/7ISiFbVpC29mDTO.png"></p><h4 id="新建图像"><a href="#新建图像" class="headerlink" title="新建图像"></a>新建图像</h4><pre class=" language-python"><code class="language-python">odd_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a>高斯模糊</h4><pre class=" language-python"><code class="language-python">im2 <span class="token operator">=</span> im<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>BLUR<span class="token punctuation">)</span>im2<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'blur.jpg'</span><span class="token punctuation">,</span> <span class="token string">'jpeg'</span><span class="token punctuation">)</span></code></pre><h4 id="生成字母验证码图片"><a href="#生成字母验证码图片" class="headerlink" title="生成字母验证码图片"></a>生成字母验证码图片</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageDraw<span class="token punctuation">,</span> ImageFont<span class="token punctuation">,</span> ImageFilter<span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 随机字母:</span><span class="token keyword">def</span> <span class="token function">rndChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> chr<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 随机颜色1:</span><span class="token keyword">def</span> <span class="token function">rndColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 随机颜色2:</span><span class="token keyword">def</span> <span class="token function">rndColor2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 240 x 60:</span>width <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">4</span>height <span class="token operator">=</span> <span class="token number">60</span>image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建Font对象:</span>setfont <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'C:/windows/fonts/Arial.ttf'</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建Draw对象:</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 填充每个像素:</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        draw<span class="token punctuation">.</span>point<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span>rndColor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出文字:</span><span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rndChar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token operator">=</span>setfont<span class="token punctuation">,</span> fill<span class="token operator">=</span>rndColor2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 模糊:</span>image <span class="token operator">=</span> image<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>BLUR<span class="token punctuation">)</span>image<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'code.jpg'</span><span class="token punctuation">,</span> <span class="token string">'jpeg'</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/11/14/2yhrMLeH8QngKUC.jpg"></p><p><strong>🔑Solution</strong></p><p>查看网页源代码，odd even 提示很明显了，就是处理图片偶数和奇数像素点</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>odd even<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cave.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>640<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>480<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gold<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>把图保存到本地，如果把这张图放大，就会发现像素块是间隔排列的</p><p><img src="https://i.loli.net/2020/11/14/5qYKj2CQuB4MswU.png"></p><p><strong>💻Code</strong><br>于是就快乐的码代码啦！</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 本来想直接用requests但是这个网站http://www.pythonchallenge.com/pc/return/cave.jpg需要输入账号和密码才能访问</span><span class="token comment" spellcheck="true"># import requests</span><span class="token comment" spellcheck="true"># import io</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token comment" spellcheck="true"># 就暂时不知道如何处理，就把图片先直接保存到本地了</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>r<span class="token string">"assets/cave.jpg"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印图片格式，大小，颜色模式</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>format<span class="token punctuation">,</span> img<span class="token punctuation">.</span>size<span class="token punctuation">,</span> img<span class="token punctuation">.</span>mode<span class="token punctuation">)</span>width<span class="token punctuation">,</span> height <span class="token operator">=</span> img<span class="token punctuation">.</span>size<span class="token comment" spellcheck="true"># ? 为什么宽度和高度要除以2呢？</span>odd_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>even_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>origin_img_1 <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>origin_img_2 <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(img.getpixel((640, 480)))</span><span class="token comment" spellcheck="true"># 对xy都为奇数，xy都为偶数和其他都打印</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        color <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 然后再放入新像素里</span>            even_img<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token operator">=</span>color<span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            odd_img<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token operator">=</span>color<span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            origin_img_1<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token operator">=</span>color<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            origin_img_2<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token operator">=</span>color<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示图片</span>odd_img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>even_img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>origin_img_1<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>origin_img_2<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存图片</span>odd_img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'output\level_11_odd.png'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span>even_img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'output\level_11_even.png'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span>origin_img_1<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'output\level_11_origin_1.png'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span>origin_img_2<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'output\level_11_origin_2.png'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span></code></pre><p>得到的结果会发现odd和even是同一张图，而origin_1和origin_2也是同一张图，相当于是给的图片里放了4张图，两种图</p><p><img src="https://i.loli.net/2020/11/15/hOt3bEveocDF9Sj.png" alt="藏文字的图"></p><p><img src="https://i.loli.net/2020/11/14/2CImv51jyeGuRfM.png" alt="原图"></p><p>原理大概就是这样，用OneNote画的</p><p><img src="https://i.loli.net/2020/11/14/KqNaCX1TykZWD7I.png"></p><p>所以根据这个原理，其实尝试自己也可以搞一张图，但是效果并不好</p><p>注意藏文字的图文字一定要暗（如果背景黑的话），主要自己是直接用python画的，没有渐变，所以有点生硬，只好把颜色调的很暗才不那么明显。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDraw<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageFontimg <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>r<span class="token string">"assets/wallhaven-vg8mo8.jpg"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(w, h)</span><span class="token comment" spellcheck="true">###** 自己也在图片上写一个文字**###</span>draw_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">)</span><span class="token punctuation">)</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>draw_img<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#选择文字字体和大小</span>setFont <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'C:/windows/fonts/msyh.ttc'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#设置文字颜色</span>fillColor <span class="token operator">=</span> <span class="token string">"#030800"</span><span class="token comment" spellcheck="true">#写入文字</span>draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'傻逼'</span><span class="token punctuation">,</span> font<span class="token operator">=</span>setFont<span class="token punctuation">,</span> fill<span class="token operator">=</span>fillColor<span class="token punctuation">)</span>draw_img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">,</span> h <span class="token operator">=</span> img<span class="token punctuation">.</span>sizeoutput_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">960</span><span class="token punctuation">,</span> <span class="token number">540</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 缩放大小</span><span class="token comment" spellcheck="true"># img.thumbnail((320, 240)) 因为thumbnail会保持宽高比，实际大小为240*240</span>img <span class="token operator">=</span> img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">960</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">540</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 获取当前图片的像素</span>            color <span class="token operator">=</span> draw_img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 然后再放入新像素里</span>        <span class="token keyword">elif</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            color <span class="token operator">=</span> draw_img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            color <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        output_img<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token operator">=</span>color<span class="token punctuation">)</span>output_img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>output_img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"output/try.png"</span><span class="token punctuation">)</span>draw_img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"output/draw.png"</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/11/14/toJBKS8TMUdWv6s.png" alt="藏文字的图"></p><p><img src="https://i.loli.net/2020/11/14/248rDqWKUiw3TJp.png" alt="合成的图片"></p><p>所以点击进入下一关： <a href="http://www.pythonchallenge.com/pc/return/evil.html">http://www.pythonchallenge.com/pc/return/evil.html</a></p><h2 id="level-12-evil-2020-11-7"><a href="#level-12-evil-2020-11-7" class="headerlink" title="level_12_evil_2020.11.7"></a>level_12_evil_2020.11.7</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/return/evil.html">http://www.pythonchallenge.com/pc/return/evil.html</a></p><p><img src="https://i.loli.net/2020/11/14/bkphDU3lxgujKGN.png" alt="level_12_evil"></p><p><strong>🖊Learned</strong><br>data[i::5]每个五个取一个,得到的就是按顺序发的牌嘛!</p><p><strong>🔑Solution</strong></p><p>一开始看见这图片的像素有问题，试着用level11的方法处理的一下，果不其然——</p><p>这图是由4张一样图合并出来的，然而并没有什么用🤮</p><p>发现封面图片被命名为evil1，因为图片描述的是发牌，于是自然想到evil2，evil3，evil4<br><a href="http://www.pythonchallenge.com/pc/return/evil2.jpg">http://www.pythonchallenge.com/pc/return/evil2.jpg</a></p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201227090034-2020-12-27.png" alt="evil2，not jpg-_.gfx"><br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201227090127-2020-12-27.png" alt="evil3，no more evils..."></p><p>用edge打开<a href="http://www.pythonchallenge.com/pc/return/evil4.jpg">http://www.pythonchallenge.com/pc/return/evil4.jpg</a><br>得到的只是一个小方格<br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201227090510-2020-12-27.png" alt="evil4"><br>但是到了IE竟然就显示”Bert is evil! go back!” 这句话暂时不知道有什么用，留着！<br><img src="https://i.loli.net/2020/11/14/PSUwEAVN2fmOZrH.png"></p><p>目前所以关键线索在evil2身上，点击<a href="http://www.pythonchallenge.com/pc/return/evil2.gfx">http://www.pythonchallenge.com/pc/return/evil2.gfx</a><br>自动下载evil2.gfx文件，打开之后发现是二进制文件<br>根据封面图的牌被分成了五份，于是猜想也要将gfx文件分五份</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> io<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"assets/evil2.gfx"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> gfx<span class="token punctuation">:</span>    data <span class="token operator">=</span> gfx<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(data) 二进制数据</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    piece <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 为什么要每隔5个取一个呢？——dealing card 😶</span>    im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>piece<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 为的是看图片 </span>    <span class="token comment" spellcheck="true"># im.show() #发现预览第四张图有问题？OSError: image file is truncated 说图像文件被截断</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"output/level_12_%d.%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> im<span class="token punctuation">.</span>format<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> w<span class="token punctuation">:</span>        w<span class="token punctuation">.</span>write<span class="token punctuation">(</span>piece<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 写入文件</span></code></pre><p>最后得到五张图</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/level_12-2020-12-27.jpg" height="500px"><p>所以答案就是disproportional啦<br><a href="http://www.pythonchallenge.com/pc/return/disproportional.html">点击进入下一关</a></p><h2 id="level-13-XML-RPC-2020-11-8"><a href="#level-13-XML-RPC-2020-11-8" class="headerlink" title="level_13_XML-RPC_2020.11.8"></a>level_13_XML-RPC_2020.11.8</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/return/disproportional.html">http://www.pythonchallenge.com/pc/return/disproportional.html</a></p><p>暂时决定虽然要坚持每天闯一关，但是就少废话了，花更多的时间记录python相关知识，学学pandas、matplotlib可能更理智点，没必要把解题过程详细码出来（反正基本都是参考别人的）</p><p><strong>🖊Learned</strong><br><strong>XML-RPC:</strong><br>XML-RPC（XML Remote Procedure Call，即XML远程方法调用），RPC是Remote Procedure Call的缩写，即远程方法调用，是一种在本地的机器上调用远端机器上的一个过程（方法）的技术，这个过程也被大家称为“分布式计算”，是为了提高各个分立机器的“互操作性”而发明出来的技术。</p><p>这种远程过程调用使用http作为传输协议，xml作为传送信息的编码格式。</p><p><strong>🔑Solution</strong><br>网页源代码，phone that <remote> evil，提示拨打给远程的evil</remote></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>call him<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disprop.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>640<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>480<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">usemap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#evil<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>evil<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>326,177,45<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../phonebook.php<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gold<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>    phone that <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remote</span> <span class="token punctuation">/></span></span> evil<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>打开phonebook.php，得到一个xml但是报错了</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>methodResponse</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fault</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>struct</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>member</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>faultCode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>int</span><span class="token punctuation">></span></span>105<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>int</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>member</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>member</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>faultString<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>XML error: Invalid document end at line 1, column 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>member</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>struct</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fault</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>methodResponse</span><span class="token punctuation">></span></span></code></pre><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> xmlrpc<span class="token punctuation">.</span>clienturl <span class="token operator">=</span> <span class="token string">"http://www.pythonchallenge.com/pc/phonebook.php"</span>conn <span class="token operator">=</span> xmlrpc<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ServerProxy<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>system<span class="token punctuation">.</span>listMethods<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['phone', 'system.listMethods', 'system.methodHelp', 'system.methodSignature', 'system.multicall', 'system.getCapabilities']</span><span class="token comment" spellcheck="true"># 看到方法中有phone</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>system<span class="token punctuation">.</span>methodHelp<span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Returns the phone of a person</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>system<span class="token punctuation">.</span>methodSignature<span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [['string', 'string']]</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>phone<span class="token punctuation">(</span><span class="token string">"Bert"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 还记得evil4.jpg的"Bert is evil! go back!"吗？</span><span class="token comment" spellcheck="true"># 最终结果555-ITALY</span></code></pre><p>点击进入下一关：  <a href="http://www.pythonchallenge.com/pc/return/italy.html">http://www.pythonchallenge.com/pc/return/italy.html</a></p><h2 id="level-14-italy-2020-11-9"><a href="#level-14-italy-2020-11-9" class="headerlink" title="level_14_italy_2020.11.9"></a>level_14_italy_2020.11.9</h2><p><img src="https://pic4.zhimg.com/80/v2-f5f7c5f6878289bfd2e95d5ab99826bd.png"></p><p><strong>🖊Learned</strong><br>这一关主要靠算法<br><code>directions = [(1,0),(0,1),(-1,0),(0,-1)]</code>这种方式真的巧妙<br>像这种绕圈的时候要把长度*2(l=100,d=200),这样通过step = d//2, d -= 1, 就可以得到螺线式走走法</p><p><strong>🔑Solution</strong><br>通过这图里的圈圈面包,猜测要把下面的wire.png也绕成一团</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imageim <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'assets/wire.png'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (10000, 1),是一个长条</span>hint_im <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>directions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token comment" spellcheck="true"># x从-1开始,这样第一个点为(0,0)</span>d <span class="token operator">=</span> <span class="token number">200</span>  <span class="token comment" spellcheck="true"># 步长设为200，是为了出现(100，99，99，98),(98,97,97,96)...的螺线性走法</span><span class="token keyword">while</span> d <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 跑一圈</span>    <span class="token keyword">for</span> v <span class="token keyword">in</span> directions<span class="token punctuation">:</span>        steps <span class="token operator">=</span>d<span class="token operator">//</span><span class="token number">2</span>        <span class="token comment" spellcheck="true"># 跑一条直线</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> range<span class="token punctuation">(</span>steps<span class="token punctuation">)</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span>y <span class="token operator">=</span>x<span class="token operator">+</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token operator">+</span>v<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            hint_im<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            p <span class="token operator">+=</span> <span class="token number">1</span>        d <span class="token operator">-=</span> <span class="token number">1</span>hint_im<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>hint_im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'output/level_14_hint.img'</span><span class="token punctuation">)</span></code></pre><p>得到猫图<br><img src="https://pic4.zhimg.com/80/v2-33a36f418680e298e730f27701b0b200.png" alt="cat"></p><p>另外如果把d改为100的话，会得到一张蛮有意思的图</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imageim <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'assets/wire.png'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (10000, 1)</span>hint_im <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delta <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>d <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment" spellcheck="true"># 如果直接设置为100，步长就成了100，99，98，97...</span><span class="token keyword">while</span> d <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 跑一圈</span>    <span class="token keyword">for</span> v <span class="token keyword">in</span> delta<span class="token punctuation">:</span>        steps <span class="token operator">=</span> d        <span class="token comment" spellcheck="true"># 跑一条直线</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> range<span class="token punctuation">(</span>steps<span class="token punctuation">)</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token operator">+</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">+</span>v<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            hint_im<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            p <span class="token operator">+=</span> <span class="token number">1</span>        d <span class="token operator">-=</span> <span class="token number">1</span>hint_im<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic4.zhimg.com/80/v2-0e9fa3f9c977e3ed693b4f080e58bf65.png"><br>于是点击：<a href="http://www.pythonchallenge.com/pc/return/cat.html">http://www.pythonchallenge.com/pc/return/cat.html</a><br>得到hint: and its name is uzi. you’ll hear from him later.<br>再点击：<a href="http://www.pythonchallenge.com/pc/return/uzi.html">http://www.pythonchallenge.com/pc/return/uzi.html</a><br>进入level 15</p><h2 id="level-15-datetime-2020-11-10"><a href="#level-15-datetime-2020-11-10" class="headerlink" title="level_15_datetime _2020.11.10"></a>level_15_datetime _2020.11.10</h2><p><img src="https://pic4.zhimg.com/80/v2-0f8c17a3b2936d56ed46e504409fb451.png"></p><p><strong>🖊Learned</strong><br>datetime<br><code>d = datetime.date(year, 1, 26)</code>创建一个日期对象<br><code>d.isoweeklevel()</code> 返回今天是星期几,Monlevel==1,Sunlevel==7</p><p>calendar判断闰年</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断闰年</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>isleap<span class="token punctuation">(</span><span class="token number">1006</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 结果为 False</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>isleap<span class="token punctuation">(</span><span class="token number">1016</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 结果为 True</span></code></pre><p><strong>🔑Solution</strong></p><blockquote><p>Combinated with all hints,so we are looking for a person, who’s related to that particular date, and he is not the youngest…<br>The key is to find what year it was.</p></blockquote><p>于是这一关就是要找到正确的日期,再通过日期来推测那个人是谁<br>日历上显示的是1__6年1月26日为星期一,再看图片下方显示二月有29天,所以这一年就还闰年,所以就可以通过遍历找到符合条件的年份</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">import</span> calendar<span class="token comment" spellcheck="true"># 判断闰年</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>isleap<span class="token punctuation">(</span><span class="token number">1006</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 结果为 False</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>isleap<span class="token punctuation">(</span><span class="token number">1016</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 结果为 True</span><span class="token comment" spellcheck="true"># 所以从1016年开始每20年检查一次</span><span class="token keyword">for</span> year <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1016</span><span class="token punctuation">,</span> <span class="token number">1996</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    d <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span>isoweeklevel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># return level of the week, where Monlevel==1,Sunlevel==7</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#####output###</span><span class="token triple-quoted-string string">"""11761356157617561976"""</span><span class="token comment" spellcheck="true"># hint: &lt;!-- he ain't the youngest, he is the second --></span><span class="token comment" spellcheck="true"># so we choose 1756</span><span class="token comment" spellcheck="true"># hint: &lt;!-- todo: buy flowers for tomorrow --></span><span class="token comment" spellcheck="true"># so we look at 1756-1-27</span></code></pre><p>search the Internet,it turns out that level is the birthlevel of Morzart<br><img src="https://pic4.zhimg.com/80/v2-ad0333fa1bed4567f48c101b475c72c8.png"></p><p>so click this <a href="http://www.pythonchallenge.com/pc/return/mozart.html">link</a>, to level 16</p><p>PS: I just found writing in Engslish is much more convinent for markdown</p><h2 id="level-16-mozart-2020-11-11"><a href="#level-16-mozart-2020-11-11" class="headerlink" title="level_16_mozart_2020.11.11"></a>level_16_mozart_2020.11.11</h2><p>Link : <a href="http://www.pythonchallenge.com/pc/return/mozart.html">http://www.pythonchallenge.com/pc/return/mozart.html</a><br>今天双十一啦，可惜我啥也没买，继续刷题吧！<br><img src="https://pic4.zhimg.com/80/v2-a1b87902b7e9e867338f52bef9af76f0.png" alt="Image"></p><p>方法一：使用ImageChops.offset()对图像进行偏移</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageChops<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># NumPy 是一个主要用于数组计算的数学库</span><span class="token comment" spellcheck="true"># ImageChops 模块包含许多算术图像操作，称为通道操作（“chops”）。这些可以用于各种用途，包括特殊效果、图像合成、算法绘制等</span>image <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"assets/mozart.gif"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成图像像素直方图，找到频数正好为image.height的整倍的，因为从图中可以看到pink每行都出现了</span><span class="token comment" spellcheck="true"># 我们的任务就是把每行像素都移动，让pink组成一整块</span>frequency <span class="token operator">=</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> image<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> image<span class="token punctuation">.</span>height <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>frequency<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [2400]</span><span class="token keyword">print</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">2400</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回频次为2400的x轴坐标195，即pink颜色</span>tmp <span class="token operator">=</span> image<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>tmp<span class="token punctuation">.</span>frombytes<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">195</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>height <span class="token operator">*</span> tmp<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tmp<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#(left, upper, right, lower)-tuple.</span>    box <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span>    row <span class="token operator">=</span> image<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>box<span class="token punctuation">)</span>    bytes_data <span class="token operator">=</span> row<span class="token punctuation">.</span>tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> bytes_data<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">195</span><span class="token punctuation">)</span>    row <span class="token operator">=</span> ImageChops<span class="token punctuation">.</span>offset<span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token operator">-</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># offset 偏移量</span>    image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>row<span class="token punctuation">,</span> box<span class="token punctuation">)</span>image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"output/level_16_mozart.gif_1.gif"</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic4.zhimg.com/80/v2-2f7ef0326d5fb12bb41cd5b11cd7b8a7.gif" alt="Image"><br>方法二：使用numpy.roll对图片进行偏移<br>不知道为什么得到的是灰色的？？？</p><pre class=" language-python"><code class="language-python">image <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"assets/mozart.gif"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>mode<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 模式“P”为8位彩色图像，它的每个像素用8个bit表示，其对应的彩色值是按照调色板查询出来的。</span><span class="token comment" spellcheck="true"># roll th image</span>shifted <span class="token operator">=</span> <span class="token punctuation">[</span>bytes<span class="token punctuation">(</span>np<span class="token punctuation">.</span>roll<span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token operator">-</span>row<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">195</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># print(shifted)</span><span class="token comment" spellcheck="true"># 根据二进制数据创建图像</span>Image<span class="token punctuation">.</span>frombytes<span class="token punctuation">(</span><span class="token string">"P"</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>size<span class="token punctuation">,</span> b<span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>shifted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"output/level_16_mozart.gif_2"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># romance</span></code></pre><p><img src="https://pic4.zhimg.com/80/v2-28895d771fe0487fc63264c776c9d3fe.gif" alt="Image"></p><p>今日所学<br>ImageChops 模块包含许多算术图像操作，称为通道操作（“chops”）。这些可以用于各种用途，包括特殊效果、图像合成、算法绘制等<br>NumPy 是一个主要用于数组计算的数学库</p><ul><li>Image.histogram()返回图像的直方图。直方图作为像素计数列表返回，它的x轴是像素值，y轴是对应的像素在图像里的数量。</li><li>PIL.ImageChops.offset(image, xoffset, yoffset=None),返回数据被给定距离偏移的图像的副本。数据环绕边缘。如果 yoffset 如果省略，则假定等于 X偏移.</li><li>Image.paste(im,box)将一张图粘贴到另一张图像上。变量box或者是一个给定左上角的2元组，或者是定义了左，上，右和下像素坐标的4元组，或者为空（与（0，0）一样）。如果给定4元组，被粘贴的图像的尺寸必须与区域尺寸一样。</li><li>np.array(image),image类 转 numpy，一行一行的用数字代表各个像素</li><li>tolist()将数组或者矩阵转换成列表</li><li>list.index(),从列表中找出某个值第一个匹配项的索引位置。</li><li>numpy.roll(a,&nbsp;shift,&nbsp;axis=None)沿着给定轴滚动数组元素。超出最后位置的元素将会滚动到第一个位置。<pre class=" language-python"><code class="language-python">a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>roll<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [ 2  3  4  5  6  7  8  9 10  0  1]</span></code></pre></li></ul><p>click to next level: <a href="http://www.pythonchallenge.com/pc/return/romance.html">http://www.pythonchallenge.com/pc/return/romance.html</a></p><h2 id="level-17-romance-2020-11-12"><a href="#level-17-romance-2020-11-12" class="headerlink" title="level_17_romance_2020.11.12"></a>level_17_romance_2020.11.12</h2><p>这一关基本是爬虫+复习关了，好难，直接copy代码了🤢<br>参考资料：</p><ul><li><a href="https://www.jianshu.com/p/ea3ae84022e5">Python Challenge[17]-Recgat简书</a></li><li><a href="http://kwangka.github.io/2015/01/31/pc17/">Python Challenge (Level 17)曾梦想仗剑走天涯</a></li><li><a href="https://www.hackingnote.com/en/python-challenge-solutions/level-17">hackingnote</a></li></ul><h3 id="cookie和获取cookie"><a href="#cookie和获取cookie" class="headerlink" title="cookie和获取cookie"></a>cookie和获取cookie</h3><p><a href="https://zhuanlan.zhihu.com/p/22396872">Cookie 是什么</a><br><a href="https://blog.csdn.net/MuWinter/article/details/75313476">如何查看cookies</a></p><p>Cookie 是浏览器访问服务器后，服务器传给浏览器的一段数据。浏览器需要保存这段数据，不得轻易删除。<br>第一个作用是识别用户身份。<br>第二个作用是记录历史。<br><img src="https://pic4.zhimg.com/80/v2-f2cb2b740b2589d354433051c8823b75.png" alt="Image"><br><strong>如何获取cookie</strong></p><ul><li>使用httplib2库，cookie信息包含在httplib2.Http().request()返回的Response实例中。<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> httplib2<span class="token punctuation">,</span>reh <span class="token operator">=</span> httplib2<span class="token punctuation">.</span>Http<span class="token punctuation">(</span><span class="token string">'.Cache'</span><span class="token punctuation">)</span>url<span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token string">'http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing='</span><span class="token punctuation">,</span> <span class="token string">'12345'</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'info=(.*)'</span><span class="token punctuation">)</span>info <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">while</span> num<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>resp<span class="token punctuation">,</span>content<span class="token operator">=</span>h<span class="token punctuation">.</span>request<span class="token punctuation">(</span>url<span class="token operator">+</span>num<span class="token punctuation">)</span>info <span class="token operator">+=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>resp<span class="token punctuation">[</span><span class="token string">'set-cookie'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>num <span class="token operator">=</span> content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span></code></pre></li><li>使用urllib库获取cookie信息<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requesth <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>cookie <span class="token operator">=</span> h<span class="token punctuation">.</span>getheader<span class="token punctuation">(</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">)</span></code></pre></li></ul><p><strong>设置cookie</strong><br>Request：模拟浏览器发送GET请求（GET-从指定的资源请求数据。），就需要使用Request对象，通过往Request对象添加HTTP头，我们就可以把请求伪装成浏览器</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span> urlopen<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote_plusreq <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Cookie"</span><span class="token punctuation">:</span> <span class="token string">"info="</span> <span class="token operator">+</span> quote_plus<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="urllib-parse"><a href="#urllib-parse" class="headerlink" title="urllib.parse"></a>urllib.parse</h3><p>parse是解析的意思，urllib.parse提供了一些辅助方法，用于对url进行编码、解码。url中是不能出现一些特殊的符号的，有些符号有特殊的用途。我们知道以get方式提交数据的时候，会在url中添加key=value这样的字符串，所以在value中是不允许有’=’，因此要对其进行编码；与此同时服务器接收到这些参数的时候，要进行解码，还原成原始的数据。<br>quote_plus：这个方法是将一些特殊的字符串转换为固定的一些符号字母数字组合</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parsed <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">'a&amp;b/c'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#未编码斜线</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a%26b/c</span>d1 <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote_plus<span class="token punctuation">(</span><span class="token string">'a&amp;b/c'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#编码了斜线</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a%26b%2Fc</span></code></pre><p>unquote/unquote_plus</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token operator">>></span><span class="token operator">></span> parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span><span class="token string">'1+2'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#不解码加号</span><span class="token string">'1+2'</span><span class="token operator">>></span><span class="token operator">></span> parse<span class="token punctuation">.</span>unquote_plus<span class="token punctuation">(</span><span class="token string">'1+2'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#把加号解码为空格</span><span class="token string">'1 2'</span></code></pre><p>urlencode，将一些传入的元素使用&amp;串联起来，效果如下：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"appid"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"mch_id"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"body"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"out_trade_no"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"total_fee"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"spbill_create_ip"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"notify_url"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"trade_type"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"nonce_str"</span><span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token string">'appid=1&amp;mch_id=1&amp;body=1&amp;out_trade_no=1&amp;total_fee=1&amp;spbill_create_ip=1&amp;notify_url=1&amp;trade_type=1&amp;nonce_str=1'</span></code></pre><p>经urllib.parse.unquote_to_bytes(string)方法转换返回的对象可以正常解压，该方法功能是将%xx转义替换为其等效的single-octet字符（unquote_plus()和unquote()是单个字符），以字节对象返回。不像unquote_plus()能将+转为空格，unquote_to_bytes()需要手动替换。</p><h3 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h3><p>refer to level 4 <a href="http://www.pythonchallenge.com/pc/def/linkedlist.php">http://www.pythonchallenge.com/pc/def/linkedlist.php</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> unquote_plus<span class="token punctuation">,</span>unquote_to_bytes<span class="token keyword">import</span> re<span class="token punctuation">,</span> bz2<span class="token keyword">def</span> <span class="token function">geth</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    i<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            h <span class="token operator">=</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> h        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            i <span class="token operator">+=</span><span class="token number">1</span>num <span class="token operator">=</span> <span class="token string">'12345'</span>info <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    h <span class="token operator">=</span> geth<span class="token punctuation">(</span><span class="token string">'http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing='</span><span class="token operator">+</span>num<span class="token punctuation">)</span>    raw <span class="token operator">=</span> h<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span>    cookie <span class="token operator">=</span>h<span class="token punctuation">.</span>getheader<span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(cookie)</span>    info <span class="token operator">+=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'info=(.*?);'</span><span class="token punctuation">,</span>cookie<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'the next busynothing is (\d+)'</span><span class="token punctuation">,</span>raw<span class="token punctuation">)</span>    <span class="token keyword">if</span> match <span class="token operator">==</span>None<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        num <span class="token operator">=</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(info)</span><span class="token triple-quoted-string string">"""BZh91AY%26SY%94%3A%E2I%00%00%21%19%80P%81%11%00%AFg%9E%A0+%00hE%3DM%B5%23%D0%D4%D1%E2%8D%06%A9%FA%26S%D4%D3%21%A1%EAi7h%9B%9A%2B%BF%60%22%C5WX%E1%ADL%80%E8V%3C%C6%A8%DBH%2632%18%A8x%01%08%21%8DS%0B%C8%AF%96KO%CA2%B0%F1%BD%1Du%A0%86%05%92s%B0%92%C4Bc%F1w%24S%85%09%09C%AE%24%90"""</span>res <span class="token operator">=</span> unquote_to_bytes<span class="token punctuation">(</span>info<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 暂时不知道为什么要把加变成空格，不过info确实有一个+啦</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bz2<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># is it the 26th already? call his father and inform him that "the flowers are on their way". he'll understand.</span><span class="token comment" spellcheck="true"># 提示找Mozart父亲Leopold"</span></code></pre><p>提示到第13关，继续打电话</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># refer to level 13</span><span class="token keyword">from</span> xmlrpc<span class="token punctuation">.</span>client <span class="token keyword">import</span> ServerProxyconn <span class="token operator">=</span> ServerProxy<span class="token punctuation">(</span><span class="token string">"http://www.pythonchallenge.com/pc/phonebook.php"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>phone<span class="token punctuation">(</span><span class="token string">"Leopold"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output 555-VIOLIN</span><span class="token comment" spellcheck="true"># http://www.pythonchallenge.com/pc/return/violin.html</span><span class="token comment" spellcheck="true"># no! i mean yes! but ../stuff/violin.php.</span></code></pre><p>点开<a href="http://www.pythonchallenge.com/pc/stuff/violin.php">violin.php</a>，根据前面的提示，告诉他爹”the flowers are on their way”</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span>urlopen<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote_plus<span class="token comment" spellcheck="true">#is it the 26th already?</span><span class="token comment" spellcheck="true"># call his father and inform him that "the flowers are on their way". he'll understand.</span>url <span class="token operator">=</span> url <span class="token operator">=</span> <span class="token string">"http://www.pythonchallenge.com/pc/stuff/violin.php"</span>msg <span class="token operator">=</span> <span class="token string">"the flowers are on their way"</span>req <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Cookie"</span><span class="token punctuation">:</span> <span class="token string">"info="</span> <span class="token operator">+</span> quote_plus<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>output</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>it's me. what do you want?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leopold.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>oh well, don't you dare to forget the balloons.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="level-18-ballons-2020-11-13"><a href="#level-18-ballons-2020-11-13" class="headerlink" title="level_18_ballons_2020.11.13"></a>level_18_ballons_2020.11.13</h2><p><img src="https://pic4.zhimg.com/80/v2-35ed8d88887ea76a93f2742932cedc83.png" alt="Image"><br>Link: <a href="http://www.pythonchallenge.com/pc/return/balloons.html">http://www.pythonchallenge.com/pc/return/balloons.html</a></p><h3 id="1-区分两个数据的异同difflib-Differ-compare-a-b"><a href="#1-区分两个数据的异同difflib-Differ-compare-a-b" class="headerlink" title="1.区分两个数据的异同difflib.Differ().compare(a, b)"></a>1.区分两个数据的异同difflib.Differ().compare(a, b)</h3><p><code>difflib.Differ().compare(a, b)</code> will generate<br>lines start with +: appear in a not in b<br>lines start with -: appear in b not in a<br>others: appear in both</p><h3 id="2-bytes-amp-int-str-16"><a href="#2-bytes-amp-int-str-16" class="headerlink" title="2.bytes()&amp;int(str,16)"></a>2.bytes()&amp;int(str,16)</h3><p>16进制形式的字符如何转成字节码，用bytes()<br>首先要先用int(str,16)将字符列表转化为10进制的数字列表，才能用bytes()</p><h3 id="3-list-53"><a href="#3-list-53" class="headerlink" title="3.list [:53]"></a>3.list [:53]</h3><p>忘了，列表切片是左开右闭了……😳</p><pre class=" language-python"><code class="language-python">bytes<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">158</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">219</span><span class="token punctuation">,</span> <span class="token number">243</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># → b'J\x9e\xc6\x05\n\xb9\x8d\xdb\xf3P\x8dJdp\x9ay1\x95'</span></code></pre><p>go to <a href="http://www.pythonchallenge.com/pc/return/bright.html">http://www.pythonchallenge.com/pc/return/bright.html</a>, show </p><blockquote><p>ness<br>so go to <a href="http://www.pythonchallenge.com/pc/return/brightness.html">http://www.pythonchallenge.com/pc/return/brightness.html</a></p><!-- maybe consider deltas.gz --></blockquote><p>下载delta.gz,打开delta.txt，明显看到两栏很相似的信息，前面提示这一关要tell the difference，对于这两栏的信息，我们要用到difflib来比较它们，然后将得到的信息decode，输出为三张图片<br><img src="https://pic4.zhimg.com/80/v2-824904b23ee2f5cbd6bd6cf282d84b8c.png" alt="delta.txt"><br><strong>解题代码</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gzip<span class="token keyword">import</span> difflibdata <span class="token operator">=</span> gzip<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"assets/deltas.gz"</span><span class="token punctuation">)</span>d1<span class="token punctuation">,</span> d2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> line <span class="token keyword">in</span> data<span class="token punctuation">:</span>    d1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 选择53是列表左开右闭，记得每一行需要手动加\n</span>    d2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 因为后面自带\n</span>compare <span class="token operator">=</span> difflib<span class="token punctuation">.</span>Differ<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>compare<span class="token punctuation">(</span>d1<span class="token punctuation">,</span> d2<span class="token punctuation">)</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"output/level_18_f.png"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"output/level_18_f1.png"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>f2 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"output/level_18_f2.png"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> compare<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print(line)</span>    <span class="token comment" spellcheck="true"># print([int(hex, 16) for hex in line[2:].strip().split(" ") if hex])</span>    bs <span class="token operator">=</span> bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>int<span class="token punctuation">(</span>hex<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">for</span> hex <span class="token keyword">in</span> line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token keyword">if</span> hex<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># appear in d1 not in d2</span>    <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>        f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span>bs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># appear in d2 not in d1</span>    <span class="token keyword">elif</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>        f2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>bs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># appear in both</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>bs<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>f2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic4.zhimg.com/80/v2-52ca5bb9b74c6c1a7d80ee1d58d94be0.png" alt="f"></p><div align="center" style="color:red">f.png</div><p><img src="https://pic4.zhimg.com/80/v2-4df5f46e8ff0e6af8a5f8b355c32574f.png" alt="f1"></p><div align="center" style="color:red">f2.png</div><p><img src="https://pic4.zhimg.com/80/v2-b2d6a66e7468e84f9e2fc1c7ce145539.png" alt="f2"></p><div align="center" style="color:red">f2.png</div><p>so next level: <a href="http://www.pythonchallenge.com/pc/hex/bin.html">http://www.pythonchallenge.com/pc/hex/bin.html</a><br>username: butter<br>password: fly</p><h2 id="level-19-bin-2020-11-14"><a href="#level-19-bin-2020-11-14" class="headerlink" title="level_19_bin_2020.11.14"></a>level_19_bin_2020.11.14</h2><p><a href="https://www.cnblogs.com/yongdaimi/p/10722355.html">音频属性相关：声道、采样率、采样位数、样本格式、比特率</a></p><blockquote><p>WAV有三个重要的参数：声道数、取样频率和量化位数。<br>声道数：可以是单声道或者是双声道<br>采样频率：一秒内对声音信号的采集次数，常用的有8kHz, 16kHz, 32kHz, &gt;48kHz, 11.025kHz, 22.05kHz, 44.1kHz<br>量化位数：用多少bit表达一次采样所采集的数据，通常有8bit、16bit、24bit和&gt;32bit等几种<br>Wave_read.getnchannels()<br>返回声道数量（1 为单声道，2 为立体声）</p><p>Wave_read.getsampwidth()<br>返回采样字节长度。</p><p>Wave_read.getframerate()<br>返回采样频率。</p><p>Wave_read.getnframes()¶<br>返回音频总帧数。<br>Wave_read.readframes(n)<br>读取并返回以 bytes 对象表示的最多 n 帧音频。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> wave<span class="token comment" spellcheck="true"># 将view-source:http://www.pythonchallenge.com/pc/hex/bin.html的base64编码复制为文本处理</span>message <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"assets/level_19.txt"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>open<span class="token punctuation">(</span><span class="token string">'output/level_19_indian.wav'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>decodebytes<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>得到的wav打开之后听到sorry……<br>打开<a href="http://www.pythonchallenge.com/pc/hex/sorry.html">http://www.pythonchallenge.com/pc/hex/sorry.html</a><br>得到- “what are you apologizing for?”<br>回头看网页显示的地图，陆地的颜色明显和海洋的颜色颠倒了，提示将音频的帧颠倒</p><pre class=" language-python"><code class="language-python">w <span class="token operator">=</span> wave<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'output/level_19_indian.wav'</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>h <span class="token operator">=</span> wave<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'output/level_19_result.wav'</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>getnchannels<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>getsampwidth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>getframerate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span>setnchannels<span class="token punctuation">(</span>w<span class="token punctuation">.</span>getnchannels<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span>setsampwidth<span class="token punctuation">(</span>w<span class="token punctuation">.</span>getsampwidth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span>setframerate<span class="token punctuation">(</span>w<span class="token punctuation">.</span>getframerate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>frames <span class="token operator">=</span> w<span class="token punctuation">.</span>readframes<span class="token punctuation">(</span>w<span class="token punctuation">.</span>getnframes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># big_endiana 字节序，低地址端 存放 高位字节。</span>wave<span class="token punctuation">.</span>big_endiana <span class="token operator">=</span> <span class="token number">1</span>h<span class="token punctuation">.</span>writeframes<span class="token punctuation">(</span>frames<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># for i in range(w.getnframes()):</span><span class="token comment" spellcheck="true">#     h.writeframes(w.readframes(1)[::-1])</span>h<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>听出You are a idiot<br>打开 <a href="http://www.pythonchallenge.com/pc/hex/idiot.html">http://www.pythonchallenge.com/pc/hex/idiot.html</a><br>“Now you should apologize…”<br><a href="http://www.pythonchallenge.com/pc/hex/idiot2.html">http://www.pythonchallenge.com/pc/hex/idiot2.html</a></p><h2 id="level-20-idiot2-2020-11-15"><a href="#level-20-idiot2-2020-11-15" class="headerlink" title="level_20_idiot2_2020.11.15"></a>level_20_idiot2_2020.11.15</h2><p>开始用Jupyter跑python代码了，感觉飞起呀！！！！</p><p>又是看不懂的一关，直接copy网上的代码吧……</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">,</span> base64<span class="token punctuation">,</span>rerequest <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">'http://www.pythonchallenge.com/pc/hex/unreal.jpg'</span><span class="token punctuation">)</span>cred <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>b<span class="token string">"butter:fly"</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">,</span> <span class="token string">"Basic %s"</span> <span class="token operator">%</span> cred<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {'Authorization': 'Basic YnV0dGVyOmZseQ=='}</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span></code></pre><pre><code>{'Authorization': 'Basic YnV0dGVyOmZseQ=='}Content-Type: image/jpegContent-Range: bytes 0-30202/2123456789Connection: closeTransfer-Encoding: chunkedDate: Sun, 15 Nov 2020 05:52:24 GMTServer: lighttpd/1.4.35</code></pre><pre class=" language-python"><code class="language-python">pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'bytes (\d+)-(\d+)/(\d+)'</span><span class="token punctuation">)</span>content_range <span class="token operator">=</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-range'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>content_range<span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Range'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'bytes=%i-'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>Content-Type: application/octet-streamContent-Transfer-Encoding: binaryContent-Range: bytes 30237-30283/2123456789Connection: closeTransfer-Encoding: chunkedDate: Sun, 15 Nov 2020 05:52:40 GMTServer: lighttpd/1.4.35we can go on in this way for really long time.</code></pre><p>So now the content between 30203 and 30236 is served, which is “Why don’t you respect my privacy?”; continue for a few iterations:</p><pre class=" language-python"><code class="language-python">pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'bytes (\d+)-(\d+)/(\d+)'</span><span class="token punctuation">)</span>content_range <span class="token operator">=</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-range'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>content_range<span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Range'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'bytes=%i-'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>        <span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-range'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><pre><code>stop this!Content-Type: application/octet-streamContent-Transfer-Encoding: binaryContent-Range: bytes 30284-30294/2123456789Connection: closeTransfer-Encoding: chunkedDate: Sun, 15 Nov 2020 05:53:12 GMTServer: lighttpd/1.4.35invader! invader!Content-Type: application/octet-streamContent-Transfer-Encoding: binaryContent-Range: bytes 30295-30312/2123456789Connection: closeTransfer-Encoding: chunkedDate: Sun, 15 Nov 2020 05:53:13 GMTServer: lighttpd/1.4.35ok, invader. you are inside now. Content-Type: application/octet-streamContent-Transfer-Encoding: binaryContent-Range: bytes 30313-30346/2123456789Connection: closeTransfer-Encoding: chunkedDate: Sun, 15 Nov 2020 05:53:13 GMTServer: lighttpd/1.4.35</code></pre><p>The last request ends at 30346.</p><blockquote><p>Why don’t you respect my privacy?<br>we can go on in this way for really long time.<br>stop this!<br>invader! invader!<br>ok, invader. you are inside now.</p></blockquote><pre class=" language-python"><code class="language-python">request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Range'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'bytes=%i-'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>Content-Type: application/octet-streamContent-Transfer-Encoding: binaryContent-Range: bytes 2123456744-2123456788/2123456789Connection: closeTransfer-Encoding: chunkedDate: Sun, 15 Nov 2020 05:54:13 GMTServer: lighttpd/1.4.35esrever ni emankcin wen ruoy si drowssap eht</code></pre><p>​    </p><p>The content is reversed: “the password is your new nickname in reverse”. The “nickname” is “invader”, so password is “redavni”. Now “reverse” the search:</p><pre class=" language-python"><code class="language-python">request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Range'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'bytes=2123456743-'</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>Content-Type: application/octet-streamContent-Transfer-Encoding: binaryContent-Range: bytes 2123456712-2123456743/2123456789Connection: closeTransfer-Encoding: chunkedDate: Sun, 15 Nov 2020 05:54:52 GMTServer: lighttpd/1.4.35and it is hiding at 1152983631.</code></pre><pre class=" language-python"><code class="language-python">request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Range'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'bytes=1152983631-'</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"output/level_21.zip"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Yes! This is really level 21 in here.<br>And yes, After you solve it, you’ll be in level 22!</p><p>Now for the level:</p><ul><li>We used to play this game when we were kids</li><li>When I had no idea what to do, I looked backwards.</li></ul><h2 id="level-21-2020-11-17"><a href="#level-21-2020-11-17" class="headerlink" title="level_21_2020.11.17"></a>level_21_2020.11.17</h2><blockquote><p>啊啊啊啊，昨天忙着做分子生物学作业和整hexo的域名，后来24：00电脑准时没电关机啦，只好厚脸皮今天补啦！</p></blockquote><blockquote><p>Yes! This is really level 21 in here. And yes, After you solve &gt;it, you’ll be in level 22!<br>Now for the level:<br>We used to play this game when we were kids<br>When I had no idea what to do, I looked backwards.<br>这一关主要过程是对package.pack文件不断进行解压。根据上一次解压得到的结果，判断下一次解压用zlib还是bz2，以及判断得到的数据是正向的还是要reverse.<br>考察多种编码格式的运用，观察“package.pack”中的数据，发现是以b”x\x9c”开头的，这是zlib算法压缩的数据，使用zlib模块解码。重复几次，发现有以b”BZ”开头的，这是bz2压缩的数据，使用bz2模块解码。又重复几次，发现有以b”\x80\x8d”开头的，看看第2条提示，发现字节流是以b”\x9cx”结尾的，反转整个字节流。最终得到一句话“look at your logs”。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> zlib<span class="token keyword">import</span> bz2result <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"output/package.pack"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#x\x9c是zlib压缩的开头</span>        <span class="token keyword">if</span> data<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>b<span class="token string">'x\x9c'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            result <span class="token operator">+=</span> <span class="token string">' '</span>        <span class="token comment" spellcheck="true"># BZHbzip2 压缩编码</span>        <span class="token keyword">elif</span> data<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>b<span class="token string">'BZh'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> bz2<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            result <span class="token operator">+=</span> <span class="token string">'#'</span>        <span class="token comment" spellcheck="true"># When I had no idea what to do, I looked backwards.</span>        <span class="token keyword">elif</span> data<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>b<span class="token string">'\x9cx'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            result <span class="token operator">+=</span> <span class="token string">'\n'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># b'sgol ruoy ta kool'</span><span class="token comment" spellcheck="true">### reverse</span><span class="token comment" spellcheck="true">#look at your logs</span><span class="token comment" spellcheck="true">##</span><span class="token comment" spellcheck="true">#?? 没有 logs 啊，记录变化？这里有变化的就是压缩方法,就把这三种方法编号一下</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><pre><codecode></pre><h2 id="level-22-2020-11-17"><a href="#level-22-2020-11-17" class="headerlink" title="level_22_2020.11.17"></a>level_22_2020.11.17</h2><p><a href="http://www.pythonchallenge.com/pc/hex/copper.html">http://www.pythonchallenge.com/pc/hex/copper.html</a></p><p><img src="https://pic4.zhimg.com/80/v2-d85ac1b3c4e471f8dc8f6cd22cbafdbe.png" alt="leverl_22"></p><p><strong>🔑Solution</strong></p><p>查看源代码提示下载文件“white.gif”<a href="http://www.pythonchallenge.com/pc/hex/white.gif">http://www.pythonchallenge.com/pc/hex/white.gif</a></p><p>发现每一帧都是黑的，但每一帧都有一个像素点不是纯黑的 RGB != (0,0,0)，且该像素都在中心点(100,100)附近，再由游戏摇杆得到启发。举例来说，详见下表</p><table><thead><tr><th>帧</th><th>非黑点位置</th><th>实际位置</th></tr></thead><tbody><tr><td>1</td><td>(100,100)</td><td>(100,100) 归零</td></tr><tr><td>2</td><td>( 98,102)</td><td>( 98,102)</td></tr><tr><td>3</td><td>( 98,100)</td><td>( 96,102)</td></tr><tr><td>4</td><td>(100,102)</td><td>( 96,104)</td></tr><tr><td>5</td><td>(100,100)</td><td>(100,100) 归零</td></tr></tbody></table><p>把两次归零操作之间，每一帧的实际位置都画出来，就能得到一幅图案。最终发现一共有5幅图案，按顺序绘制出来，发现是一个单词“bonus”。</p><ul><li>gif. n_frame返回所有关键帧</li><li>gif.seek()在给定的文件序列中查找指定的帧。如果查找超越了序列的末尾，则产生一个EOFError异常。当文件序列被打开时，PIL库自动指定到第0帧上。</li><li>gif.tell()返回当前帧</li></ul><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageDrawgif <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"assets/white.gif"</span><span class="token punctuation">)</span>new <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 默认背景为黑</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>new<span class="token punctuation">)</span>cx<span class="token punctuation">,</span> cy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token comment" spellcheck="true"># 画点的起始位置</span><span class="token keyword">for</span> frame <span class="token keyword">in</span> range<span class="token punctuation">(</span>gif<span class="token punctuation">.</span>n_frames<span class="token punctuation">)</span><span class="token punctuation">:</span>    gif<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>    left<span class="token punctuation">,</span> upper<span class="token punctuation">,</span> right<span class="token punctuation">,</span> lower <span class="token operator">=</span> gif<span class="token punctuation">.</span>getbbox<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 得到与100,100的相对位置</span>    dx <span class="token operator">=</span> left <span class="token operator">-</span> <span class="token number">100</span>    dy <span class="token operator">=</span> upper <span class="token operator">-</span> <span class="token number">100</span>    <span class="token comment" spellcheck="true"># 一个图案画完了,移远一点,继续画</span>    <span class="token keyword">if</span> dx <span class="token operator">==</span> dy <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        cx <span class="token operator">+=</span> <span class="token number">50</span>        cy <span class="token operator">=</span> <span class="token number">100</span>    cx <span class="token operator">+=</span> dx    cy <span class="token operator">+=</span> dy    draw<span class="token punctuation">.</span>point<span class="token punctuation">(</span><span class="token punctuation">[</span>cx<span class="token punctuation">,</span> cy<span class="token punctuation">]</span><span class="token punctuation">)</span>new<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="level-23-2020-12-15"><a href="#level-23-2020-12-15" class="headerlink" title="level_23_2020.12.15"></a>level_23_2020.12.15</h2><blockquote><p>额，之前为了考试周，于是拖了好久，然后就一直捡不起来了哇！剧刷腻了，b站搞笑视频也觉得不好玩了，就又回来写python了<br>希望之后可以一直坚持下去哇！！！！</p></blockquote><p>解题Solution：源代码里的’va gur snpr bs jung?’明显也是解码，title为”what is this module?“，结合后面的”it can’t find it. this is an undocumented module”，猜测为this模块（就是大名鼎鼎的The Zen of Python啦）！<br>方法1：可以尝试用ocr那题（level_1）的代码试试，依次检验26个偏移量能否得到一个有含义的句子</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ocr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    text <span class="token operator">=</span> <span class="token string">'va gur snpr bs jung?'</span>    <span class="token keyword">for</span> offset <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        trans <span class="token operator">=</span> str<span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">,</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">[</span>offset<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">[</span><span class="token punctuation">:</span>offset<span class="token punctuation">]</span><span class="token punctuation">)</span>        new_text <span class="token operator">=</span> text<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>trans<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>new_text<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    ocr<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>发现偏移量为13时，字符可解码为in the face of what?</p><pre><code>0 → va gur snpr bs jung?1 → wb hvs toqs ct kvoh?2 → xc iwt uprt du lwpi?3 → yd jxu vqsu ev mxqj?4 → ze kyv wrtv fw nyrk?5 → af lzw xsuw gx ozsl?6 → bg max ytvx hy patm?7 → ch nby zuwy iz qbun?8 → di ocz avxz ja rcvo?9 → ej pda bwya kb sdwp?10 → fk qeb cxzb lc texq?11 → gl rfc dyac md ufyr?12 → hm sgd ezbd ne vgzs?`13 → in the face of what?`14 → jo uif gbdf pg xibu?15 → kp vjg hceg qh yjcv?16 → lq wkh idfh ri zkdw?17 → mr xli jegi sj alex?18 → ns ymj kfhj tk bmfy?19 → ot znk lgik ul cngz?20 → pu aol mhjl vm doha?21 → qv bpm nikm wn epib?22 → rw cqn ojln xo fqjc?23 → sx dro pkmo yp grkd?24 → ty esp qlnp zq hsle?25 → uz ftq rmoq ar itmf?</code></pre><p>import this,里面有一句“In the face of ambiguity”，所以答案就是ambiguity，<a href="http://www.pythonchallenge.com/pc/hex/ambiguity.html">http://www.pythonchallenge.com/pc/hex/ambiguity.html</a></p><pre><code>The Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren't special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one-- and preferably only one --obvious way to do it.Although that way may not be obvious at first unless you're Dutch.Now is better than never.Although never is often better than *right* now.If the implementation is hard to explain, it's a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea -- let's do more of those!Gur Mra bs Clguba, ol Gvz Crgref</code></pre><p>Solution2：<br>如果尝试输入<code>print(this.s)</code>,你会发现得到的是The Zen of python的加密版本，输入<code>print(this.d)</code>,得到的解密本字典,所以推理得到给的那个字符串也是这样加密的<br>方法2:<br>简单粗暴</p><pre class=" language-python"><code class="language-python">text <span class="token operator">=</span> <span class="token string">'va gur snpr bs jung?'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>this<span class="token punctuation">.</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span>c<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> text<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#in the face of what?</span></code></pre><blockquote><p>老实说,隔了这么久,不知道再继续玩python challenge还有没有必要哈,但是我好像确实没什么其他想到能做的事了(咸鱼一只),所以就脚踏实地吧,总要坚持一件事,我也相信前方或许会有意想不到的收获.不知道为什么,进入大三之后,整个人变得浮躁不堪,静不下心去踏实学东西,我觉得这样很糟!</p></blockquote><h2 id="level-24-maze-2020-12-16"><a href="#level-24-maze-2020-12-16" class="headerlink" title="level_24_maze_2020.12.16"></a>level_24_maze_2020.12.16</h2><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/maze-2020-12-18.png" alt="maze">]<br>发现Vscode真的适合把图片放大到像素级<br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201218190652-2020-12-18.png" alt="图片放大"><br><strong>🔑Solution</strong><br>  这一关真的好有趣呀，就是得先找到迷宫的entrance和exit，然后就需要使用数据结构的知识来走迷宫啦，我用的是栈深度搜索，队列就是广度搜索了吧，收集走迷宫的路径每个像素位置以及点的R通道值，然后转化为二进制数据，发现开头是PK，提示为压缩包，所以就将数据生成为压缩包，解压即得到下一关提示。<br><strong>🖊Learned</strong></p><ul><li>二进制开头b’PK’为压缩包</li><li><code>ImageDraw.Draw</code>模块</li><li>栈和队列复习</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDrawmaze <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"assets/maze.png"</span><span class="token punctuation">)</span>directions <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 方向</span>white <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span>w<span class="token punctuation">,</span>h <span class="token operator">=</span> maze<span class="token punctuation">.</span>sizenext_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 通过for i in range(w): print(maze.getpixel((i, 0)))可知入口的黑色像素位置</span>entrance <span class="token operator">=</span> <span class="token punctuation">(</span>w <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 通过 for i in range(w): print(maze.getpixel((i, h - 1)))可知出口位置</span>exit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># stack代表的用栈来存储可能的路口</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span>exit<span class="token punctuation">]</span><span class="token keyword">while</span> stack<span class="token punctuation">:</span>    pos <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 当前位置</span>    <span class="token keyword">if</span> pos <span class="token operator">==</span> entrance<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> directions<span class="token punctuation">:</span>        tmp <span class="token operator">=</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#tmp代表的是可能的下一个位置</span>        <span class="token keyword">if</span> <span class="token operator">not</span> tmp <span class="token keyword">in</span> next_map <span class="token operator">and</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> w <span class="token operator">and</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h <span class="token operator">and</span> maze<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">!=</span> white<span class="token punctuation">:</span>            next_map<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> pos  <span class="token comment" spellcheck="true"># next_map放的是下一个位置←该位置的字典，但该程序会记录错误的路线而不会删除，虽然不影响回溯</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 会把所有可能的路口都入栈</span>path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGBA'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">641</span><span class="token punctuation">,</span> <span class="token number">641</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">while</span> pos <span class="token operator">!=</span> exit<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># pos 将从起点开始回溯</span>    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>maze<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 只输出第一个RGB值</span>    draw<span class="token punctuation">.</span>point<span class="token punctuation">(</span>pos<span class="token punctuation">,</span>maze<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span>    pos <span class="token operator">=</span> next_map<span class="token punctuation">[</span>pos<span class="token punctuation">]</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'output/level_24_path.png'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(path)</span><span class="token comment" spellcheck="true"># print(path[1::2])</span><span class="token comment" spellcheck="true"># print(bytes(path[1::2]))</span><span class="token comment" spellcheck="true"># open('output/level_24_maze.zip','wb').write(bytes(path))</span>open<span class="token punctuation">(</span><span class="token string">'output/level_24_maze.zip'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># path[1::2]的原因只是因为R通道即红点都是至少都是间隔分布的</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/level_24_path-2020-12-18.png" alt="level_24_path"><br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201218190741-2020-12-18.png" alt="放大图片"></p><h2 id="level-25-wave拼图-2020-12-17"><a href="#level-25-wave拼图-2020-12-17" class="headerlink" title="level_25_wave拼图_2020.12.17"></a>level_25_wave拼图_2020.12.17</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/hex/lake.html">http://www.pythonchallenge.com/pc/hex/lake.html</a><br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201218184825-2020-12-18.png" alt="关卡图"></p><p><strong>Solution：</strong><br>看到图片名是“lake1.jpg”，根据提示尝试获取“lake1.wav”，文件存在，猜测应该还有“lake2.wav”，“lake3.wav”，……于是构造一个网络爬虫<br>以音频方式打开文件，发现都是杂音，根据图片中拼图的提示，将每个音频转化一共图片，25个正好对应了关卡图中5*5拼图，然后把25个图片拼在一起，就得到结果啦<br><strong>Learned：</strong></p><ul><li>python创建文件不会自动创建文件夹吗<ul><li>是的，如果路径不存在，必须手动先创建，可以使用os.makedirs(path) <a href="https://blog.csdn.net/Homewm/article/details/80766894">https://blog.csdn.net/Homewm/article/details/80766894</a></li></ul></li><li>HTTPPasswordMgrWithDefaultRealm()类将创建一个密码管理对象，用来保存 HTTP 请求相关的用户名和密码，主要应用两个场景：<ul><li>验证代理授权的用户名和密码 (ProxyBasicAuthHandler())</li><li>验证Web客户端的的用户名和密码 (HTTPBasicAuthHandler())</li><li><a href="https://blog.csdn.net/weicao1990/article/details/80066655">https://blog.csdn.net/weicao1990/article/details/80066655</a></li></ul></li><li><code>Image.frombytes</code>从二进制中创建，im.paste()粘贴图片上去</li></ul><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span> error<span class="token keyword">import</span> wave<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"\033[31mLevel 25\033[0m"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 原来可以打印红色字欸</span><span class="token keyword">def</span> <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹函数</span>    folder <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> folder<span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"---new folder {path}---"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 爬虫部分</span><span class="token comment" spellcheck="true"># 1. 构建一个密码管理对象，用来保存需要处理的用户名和密码</span>password_mgr <span class="token operator">=</span> request<span class="token punctuation">.</span>HTTPPasswordMgrWithDefaultRealm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 添加账户信息，第一个参数realm是与远程服务器相关的域信息，一般没人管它都是写None，后面三个参数分别是 代理服务器、用户名、密码</span>password_mgr<span class="token punctuation">.</span>add_password<span class="token punctuation">(</span>    None<span class="token punctuation">,</span> <span class="token string">"http://www.pythonchallenge.com/"</span><span class="token punctuation">,</span> <span class="token string">"butter"</span><span class="token punctuation">,</span> <span class="token string">"fly"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 构建一个HTTP基础用户名/密码验证的HTTPBasicAuthHandler处理器对象，参数是创建的密码管理对象</span>handler <span class="token operator">=</span> request<span class="token punctuation">.</span>HTTPBasicAuthHandler<span class="token punctuation">(</span>password_mgr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># passowrd_mgr→handler，HTTPBasicAuthHandler基本的HTTP验证处理</span><span class="token comment" spellcheck="true"># 4. 通过 build_opener()方法使用这些代理Handler对象，创建自定义opener对象，</span>opener <span class="token operator">=</span> request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># handler→opener</span>mkdir<span class="token punctuation">(</span><span class="token string">"output/level_25"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Processing {i:2d}..."</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> f<span class="token string">"http://www.pythonchallenge.com/pc/hex/lake{i}.wav"</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">except</span> error<span class="token punctuation">.</span>HTTPError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"HTTP ERROR 404"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>f<span class="token string">"output/level_25/lake{i}.wav"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 'wb'写入二进制文件</span>            data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Successfully Saved."</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 一共25个wav文件</span><span class="token comment" spellcheck="true">#创建图片 →把25个wav转成5*5的拼图块→合并图片</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># wave.open()返回Wave_write对象</span>    <span class="token keyword">with</span> wave<span class="token punctuation">.</span>open<span class="token punctuation">(</span>f<span class="token string">"output/level_25/lake{i}.wav"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># getnframes()返回音频帧数</span>        <span class="token comment" spellcheck="true"># readframes(n)最多读取并返回n帧音频，作为字节对象。</span>        <span class="token comment" spellcheck="true"># file.readframes(file.getnframes())就是先读取一共几帧，然后把所有帧都输出成二进制</span>        data <span class="token operator">=</span> file<span class="token punctuation">.</span>readframes<span class="token punctuation">(</span>file<span class="token punctuation">.</span>getnframes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        block_im <span class="token operator">=</span> Image<span class="token punctuation">.</span>frombytes<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token comment" spellcheck="true"># 超过5个就换下一行</span>        im<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>block_im<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"output/level_25/result.jpg"</span><span class="token punctuation">)</span></code></pre><h2 id="level-26-md5-2020-12-18"><a href="#level-26-md5-2020-12-18" class="headerlink" title="level_26_md5_2020.12.18"></a>level_26_md5_2020.12.18</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/hex/decent.html">http://www.pythonchallenge.com/pc/hex/decent.html</a></p><p><strong>Solution：</strong><br>源码说已经得到邮箱了（我咋不知道），原来早在第19关网页的源代码就给了个邮箱，<a href="mailto:leopold.moz@pythonchallenge.com">leopold.moz@pythonchallenge.com</a>，然后发送，标题为Apologize，内容为Sorry的邮件，你就可以得到以下回复:</p><blockquote><p>Never mind that.</p><p>Have you found my broken zip?</p><p>md5: bbb8b499a0eef99b52c7f13f4e78c24b</p><p>Can you believe what one mistake can lead to?</p></blockquote><p>意思就是说之前我们maze那关得到的压缩包不是除了图片还有一共压缩包吗？如果解压的话就会提示校验值错误，这个回复就是说压缩包的二进制数据有一个错误，要让咱一个个尝试，把它改对，用md5来校验文件是否修复好。（然而之前我用bzip不修复照样也解压出来了……有点尴尬,,ԾㅂԾ,,）<br>最后得到的图片显示”speed”,然后再结合Hurry up, I’m missing the boat,下一关网址就是”speedboat”</p><p><strong>Learned：</strong></p><ul><li>原来python终端可以打印出颜色呀，Learned了<ul><li>Python基础之控制台输出颜色 <a href="https://blog.csdn.net/qq_33567641/article/details/82769523">https://blog.csdn.net/qq_33567641/article/details/82769523</a></li></ul></li><li>切片是左闭右开，我又忘了</li><li>对二进制的操作还是似懂非懂哇，有空专门学习下！</li></ul><p><strong>Code：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">def</span> <span class="token function">repair</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> pos <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> pos <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Trying repairing the position {pos} ..."</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># try 0-255</span>            newData <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span>pos<span class="token punctuation">]</span> <span class="token operator">+</span> bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 替换pos那个位置的值</span>            <span class="token keyword">if</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>newData<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> md5code<span class="token punctuation">:</span>                open<span class="token punctuation">(</span><span class="token string">'output/level_26_repaired.zip'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>newData<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"\033[1;31m Zip have been repaired！\033[0m"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>md5code <span class="token operator">=</span> <span class="token string">"bbb8b499a0eef99b52c7f13f4e78c24b"</span>data <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'assets/mybroken.zip'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>repair<span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><h2 id="level-27-between-the-tables-2020-12-19"><a href="#level-27-between-the-tables-2020-12-19" class="headerlink" title="level_27_between the tables_2020.12.19"></a>level_27_between the tables_2020.12.19</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/hex/speedboat.html">http://www.pythonchallenge.com/pc/hex/speedboat.html</a></p><p><strong>🔑Solution</strong><br>点击图片就能直接进入下一关，然而不知账号密码。<br>这一关涉及到图像色板、映射、常见但依旧不了解的二进制数据处理还有keyword模块<br>也没啥Solution了，毕竟是copy别人的代码嘛！</p><p><strong>🖊Learned</strong></p><ul><li>im.getpalette()以列表形式返回图像调色板，putpalette给对象加上调色板，相当于上色,然而暂时不懂调色板是什么东东</li><li>im.tobytes()，把图片转化为二进制</li><li><code>maketrans(A,B)</code>和<code>newData = data.translate()</code>明明很早接触了，然而还是不熟悉</li><li>filter和lambda的用法<code>diff = list(filter(lambda p: p[0] != p[1], zipped))</code></li><li>index的复数形式是indices（滑稽）</li></ul><p><strong>💻Code</strong></p><p>建立二进制索引和色板, 映射到图片字节流数据<br>什么，你问我为什么要这样做？不知道……，毕竟这一关的标题就是between the tables，毕竟别人是这样解题的。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> keyword<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> bz2im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'assets/zigzag.gif'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># im.getpalette()以列表形式返回图像调色板，getpalette（）获取图片对应的调色板；putpalette给对象加上调色板，相当于上色</span><span class="token comment" spellcheck="true"># [37, 229, 162, 136, 59, 212, 9, 41, 24, 156, 148, 112, 254, 91,..]</span>palette <span class="token operator">=</span> im<span class="token punctuation">.</span>getpalette<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># print(palette)</span>len<span class="token punctuation">(</span>palette<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#256</span><span class="token comment" spellcheck="true"># 建立二进制索引和色板, 映射到图片字节流数据</span>table <span class="token operator">=</span> bytes<span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bytes<span class="token punctuation">(</span>palette<span class="token punctuation">)</span><span class="token punctuation">)</span>raw <span class="token operator">=</span> im<span class="token punctuation">.</span>tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>trans <span class="token operator">=</span> raw<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table<span class="token punctuation">)</span></code></pre><p>比较raw和trans数据，发现除去raw的第一个和tran的最后一个，大致数据差不多</p><pre class=" language-python"><code class="language-python"> <span class="token keyword">print</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span> <span class="token keyword">print</span>（trans<span class="token punctuation">)</span></code></pre><p>所以下一步就是把不一样的数据过滤出来</p><pre class=" language-python"><code class="language-python">zipped <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>raw<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>trans<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>diff <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> p<span class="token punctuation">:</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> zipped<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这里用来匿名函数+filter过滤</span>indices <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i<span class="token punctuation">,</span> p <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>zipped<span class="token punctuation">)</span> <span class="token keyword">if</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># indices是index的复数形式</span></code></pre><p>处理diff数据，转化为text</p><pre class=" language-python"><code class="language-python">s<span class="token operator">=</span><span class="token punctuation">[</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> diff<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># t[1]即trans的数据则没有提示</span><span class="token keyword">print</span><span class="token punctuation">(</span>bytes<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 熟悉的bz开头</span>text <span class="token operator">=</span> bz2<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#解码成文本</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#发现是有一堆python关键字</span></code></pre><p>新建一个白底的图像，利用之前数据不一样的索引，把该位置都改为黑色</p><pre class=" language-python"><code class="language-python">im2 <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">)</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span>len<span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> indices<span class="token punctuation">:</span>    colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>im2<span class="token punctuation">.</span>putdata<span class="token punctuation">(</span>colors<span class="token punctuation">)</span></code></pre><p>竟然能得到一张图，提示not keyword，就是说我们要把text里不是keyword的词给提取出来<br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201219151302-2020-12-19.png" alt="not keyword的提示"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> keyword<span class="token keyword">print</span><span class="token punctuation">(</span>set<span class="token punctuation">(</span><span class="token punctuation">[</span>w <span class="token keyword">for</span> w <span class="token keyword">in</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token operator">not</span> keyword<span class="token punctuation">.</span>iskeyword<span class="token punctuation">(</span>w<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>最终得到</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span>b<span class="token string">'print'</span><span class="token punctuation">,</span> b<span class="token string">'../ring/bell.html'</span><span class="token punctuation">,</span> b<span class="token string">'repeat'</span><span class="token punctuation">,</span> b<span class="token string">'exec'</span><span class="token punctuation">,</span> b<span class="token string">'switch'</span><span class="token punctuation">}</span></code></pre><p>值得注意的是，“print”和“exec”在Python2中式关键字，在Python3中变成了函数，所以没有被去掉。<br>经过尝试，bell.html网页的用户名为repeat，密码为switch。<br>Over！ </p><h2 id="level-28-many-pairs-ring-ring-2020-12-20"><a href="#level-28-many-pairs-ring-ring-2020-12-20" class="headerlink" title="level_28_many pairs ring-ring_2020.12.20"></a>level_28_many pairs ring-ring_2020.12.20</h2><p><strong>🔑Solution</strong><br>本关考察对图片和字节流的处理能力。提示让我们大声说“RING-RING-RING”，是指“RING”谐音“GREEN”，就是指RGB的绿色通道。我们需要将绿色通道的数据两两配对，每组作差取绝对值，例如 green = [55, 97, 73, 115, 120, 78, ……]，操作后的结果是 diff = [42, 42, 42, ……]。查看列表diff的值，发现几乎都是“42”，去掉数值“42”，剩下的数值转成字符构成一条语句：<br>whodunnit().split()[0] ?<br>whodunnit直译是侦探小说,但明显不是这个意思,结合本关的谐音,可以知道是who done it的谐音,再结合<code>.split()[0] </code>可以知道是问python之父是谁<br>当然是那个死胖子,Guido啦,哈哈哈哈<br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201220133143-2020-12-20.png" alt="Guido van Rossum"></p><p><strong>🖊Learned</strong></p><ul><li><code>list(im.split()[1].getdata())</code> 获得green像素值列表</li><li><code>abs(a-b)for a, b in zip(green[0::2], green[1::2])</code> 列表的前一个减后一个</li><li>filter+lambda 过滤列表</li></ul><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imageim <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'assets/bell.png'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ring-ring的谐音是green,所以提取green值</span>green <span class="token operator">=</span> list<span class="token punctuation">(</span>im<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>getdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 发现green前一个和后一个几乎都是差42,有猫腻</span>diff <span class="token operator">=</span> <span class="token punctuation">[</span>abs<span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> zip<span class="token punctuation">(</span>green<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> green<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># print(diff)</span><span class="token comment" spellcheck="true"># 把42过滤掉</span>filtered <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">!=</span> <span class="token number">42</span><span class="token punctuation">,</span> diff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 过滤后的数据转化为二进制并解码</span><span class="token keyword">print</span><span class="token punctuation">(</span>bytes<span class="token punctuation">(</span>filtered<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># whodunnit().split()[0] ?</span></code></pre><h2 id="level-29-silence-2020-12-21"><a href="#level-29-silence-2020-12-21" class="headerlink" title="level_29_silence_2020.12.21"></a>level_29_silence_2020.12.21</h2><p><strong>🔑Solution</strong><br>一开始看源代码我是懵逼的，看了答案才知道html原来后面的行有玄机！一旦把每行的长度整理成数字列表之后，然后转化为二进制，发现又是BZ开头，用bz2解压，得到下一关的hint<br><img src="https://pic4.zhimg.com/80/v2-f44b0a3b683e58e8e9dffaba4d2da6bf.png" alt="你以为空无一物"><br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201221181345-2020-12-21.png" alt="程序员的浪漫"><br><strong>🖊Learned</strong></p><ul><li>这一关真的好秒呀，论程序员的浪漫，可以用这关来装逼，隐藏想说的话！</li><li>网页Authorization这个始终记不住……</li><li>splitlines()直接切割行，把内容转化为列表</li><li>列表转bytes，直接bytes(list),bytes转列表 list（bytes）</li></ul><p><strong>💻Code</strong><br>解题</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span> urlopen<span class="token keyword">import</span> bz2<span class="token keyword">import</span> base64req <span class="token operator">=</span> Request<span class="token punctuation">(</span><span class="token string">'http://www.pythonchallenge.com/pc/ring/guido.html'</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'Authorization'</span><span class="token punctuation">,</span>               <span class="token string">'Basic %s'</span> <span class="token operator">%</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>b<span class="token string">'repeat:switch'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取html13行之后的数据</span>raw <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 数13行之后每行的长度，并转化为二进制</span>data <span class="token operator">=</span> bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> raw<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 解压二进制</span><span class="token keyword">print</span><span class="token punctuation">(</span>bz2<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>我们也从作者的角度来反推这个谜题是怎么做出来的<br>加密我们想说的话</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> bz2message <span class="token operator">=</span> b<span class="token string">""</span> <span class="token comment" spellcheck="true"># 这得二进制</span>compressed <span class="token operator">=</span> bz2<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>message<span class="token punctuation">)</span>num_list <span class="token operator">=</span> list<span class="token punctuation">(</span>compressed<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"level_29_silence.txt"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> num_list<span class="token punctuation">:</span>        file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">' '</span> <span class="token operator">*</span> num <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span></code></pre><p>解密,<br>哈哈，毕竟圣诞节到了嘛，不过这个silent.txt发给女生估计会被打！</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"level_29_silence.txt"</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    raw <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(raw)</span><span class="token comment" spellcheck="true"># 数13行之后每行的长度，并转化为二进制</span>data <span class="token operator">=</span> bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> raw<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 解压二进制</span><span class="token keyword">print</span><span class="token punctuation">(</span>bz2<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Merry Christmas</span></code></pre><h2 id="level-30-图片翻转质数之积-2020-12-22"><a href="#level-30-图片翻转质数之积-2020-12-22" class="headerlink" title="level_30_图片翻转质数之积_2020.12.22"></a>level_30_图片翻转质数之积_2020.12.22</h2><p><strong>🔑Solution</strong><br>根据提示，下载“yankeedoodle.csv”，里面是一堆浮点数<br>还以为原来的行列可能有玄机，谁知道是直接数多少个数，然后发现可以拆分为两个质数的积，7367 = 53*139， 构造一个53*139的图片，得到一个带公式的图片<code>n = str(x[i])[5] + str(x[i+1])[5] + str(x[i+2])[6]</code>，就按照这个公式来处理csv得到的数据，最终得到“look at grandpa”的提示，剩下的信息别想太多，确实没用</p><p><strong>🖊Learned</strong></p><ul><li>图片左右翻转 <code>img.transpose(Image.FLIP_LEFT_RIGHT)</code></li><li>图片旋转 <code>img.transpose(Image.ROTATE_90)</code></li><li>大概懂了<code>img.putdata</code>的意思</li><li>感觉学来学去，一直都在学图像处理呀！！！哈哈哈哈哈哈</li><li>不知道为什么VSCode现在写markdown卡的要死……一回车就卡死</li></ul><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'assets/yankeedoodle.csv'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 处理成列表</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 计算列表长度</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7367</span>factor <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token keyword">if</span> length <span class="token operator">%</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>factor<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 计算这个length的因子为53*139</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">139</span><span class="token punctuation">)</span><span class="token punctuation">)</span>img<span class="token punctuation">.</span>putdata<span class="token punctuation">(</span><span class="token punctuation">[</span>float<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 左右翻转</span>img <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>FLIP_LEFT_RIGHT<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 顺时针旋转90度</span>img <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>ROTATE_90<span class="token punctuation">)</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 根据图片给的hint</span>a <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>c <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>res <span class="token operator">=</span> bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>int<span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> x2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> x3<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3 <span class="token keyword">in</span> zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><p>得到的图片<br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201222110626-2020-12-22.png" alt="formula"><br>最终输出结果</p><pre><code>b'So, you found the hidden message.\nThere is lots of room here for a long message, but we only need very little space to say "look at grandpa", so the rest is just garbage. \nVTZ.l\'\x7ftf*Om@I"p]</code></pre><h2 id="level-31-Mandelbrot-set-2020-12-23"><a href="#level-31-Mandelbrot-set-2020-12-23" class="headerlink" title="level_31_Mandelbrot set_2020.12.23"></a>level_31_Mandelbrot set_2020.12.23</h2><p><strong>🔑Solution</strong><br>点击图片进入下一关,需要用户名和密码,用户名是“kohsamui”，密码是“thailand”，进入第二部分。<br>第二部分的图片名词为mandelbrot,而图片的雪花本身就是曼德博集合.</p><p>注意到网页源代码的window和option标签，我们需要构造一个复平面，宽度对应x轴，高度对应y轴，范围由window标签给出。<br>left=“0.34” top=“0.57” width=“0.036” height=“0.027”<br>w = 640px —— x轴 范围 [left, left+width] = [0.34, 0.376]<br>h = 480px —— y轴 范围 [top, top+height] = [0.57, 0.597]</p><p>对于每个像素点,根据比例计算其在复平面的坐标(x,y) ,记复数c=x+yi,从z0=0开始迭代,迭代公式为zi+1=zi**2+c,c=x+yi,<br>记Mandelbrot集为M,根据定理,若复数c ∈ M  ，则|zi| &lt; 2, ∀ i ∈ N<br>迭代次数由option标签给出，最多128次，若迭代完128次，其模仍小于2，则该点的颜色值为127，若|zi|&lt;2 and|zi+1|&gt;=2, 则该点颜色为i，对应图片的palette表<br>然后将得到的list绘制图片比较两张图的像素差异,把不同的像素点提取出来,最后转化成黑白的图片,图片为阿雷西博信息,所以答案为“arecibo ”</p><p><strong>🖊Learned</strong></p><ul><li>复习图像模式,P-8bit-使用调色板映射到其他任何模式,L-8bit-黑白…对,我又忘记了(,,ԾㅂԾ,,)</li><li>感觉对getpalette(),putpalete()的理解加深了,返回的列表其实是[r, g, b, r, g, b…],三个一个RGB排列下去,P模式，才具有调色板属性,RGB模式getpixel((x,y))是RGB值,而P模式getpixel((x,y))是一个值,即索引,大小范围在0~255之间<br>调色板就是来减少存储空间使用量的,它存储着256种不同的调色方案<br>以下代码将会打印出图像img的调色板情况，按照256个配色方案*3个通道值的格式排列：<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">.</span>getpalette<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>使用了调色盘的图像将会被单通道存储，每个像素位置的值是调色盘“表”中的索引，这在存储图像的时候空间要求从RGB的<strong>3</strong>个字节变成了<strong>1</strong>个字节。达到减小空间的目的.<br>但是,因为表中有限的配色方案数量（256），能使用的颜色也是有限制的，这也是P格式图像的一个缺点。<br>  <a href="https://www.zhihu.com/question/334057386/answer/774192372">python中的pil库中的p模式是干什么用的？</a><br>  <a href="https://blog.csdn.net/weixin_40005329/article/details/103481553">Python PIL 图像处理中模式为”P”的含义以及与”RGB”之间的转换</a></li><li>图像的原点是在左上角吧,X轴是从左到右增长的，而Y轴是从上到下增长,所以例如本题构造result图片时因为提前确定好高度和宽度,1679个值从上放到下</li><li><a href="https://zh.wikipedia.org/wiki/%E6%9B%BC%E5%BE%B7%E5%8D%9A%E9%9B%86%E5%90%88">曼德勃罗集（Mandelbrot Set）</a>,<a href="https://www.dogedoge.com/results?q=python+mandelbrot&amp;lang=auto">Python绘制Mandelbrot</a></li><li>原来python中for也有else呀,<a href="https://www.zhihu.com/question/37076998">如何在Python中使用break跳出多层循环？</a></li><li>这一关阿雷西博信息要哭死我啊，正好前几天才了解了下，然而2020年12月1日阿雷西博射电望远镜塌了<del>/(ㄒoㄒ)/</del> <a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E9%9B%B7%E8%A5%BF%E5%8D%9A%E4%BF%A1%E6%81%AF">阿雷西博信息</a></li></ul><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹函数</span>    folder <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> folder<span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"---new folder {path}---"</span><span class="token punctuation">)</span>mkdir<span class="token punctuation">(</span><span class="token string">"output/level_31"</span><span class="token punctuation">)</span>im0 <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'assets/mandelbrot.gif'</span><span class="token punctuation">)</span>w<span class="token punctuation">,</span> h <span class="token operator">=</span> im0<span class="token punctuation">.</span>size  <span class="token comment" spellcheck="true"># 640, 480</span>im1 <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span>im1<span class="token punctuation">.</span>putpalette<span class="token punctuation">(</span>im0<span class="token punctuation">.</span>getpalette<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">0.34</span><span class="token punctuation">,</span> <span class="token number">0.57</span><span class="token punctuation">,</span> <span class="token number">0.036</span><span class="token punctuation">,</span> <span class="token number">0.027</span><span class="token comment" spellcheck="true"># 曼德勃罗集（Mandelbrot Set）</span><span class="token comment" spellcheck="true"># ! 构造复平面</span><span class="token comment" spellcheck="true"># left=“0.34” top=“0.57” width=“0.036” height=“0.027”</span><span class="token comment" spellcheck="true"># w = 640px —— x轴 范围 [left, left+width] = [0.34, 0.376]</span><span class="token comment" spellcheck="true"># h = 480px —— y轴 范围 [top, top+height] = [0.57, 0.597]</span><span class="token comment" spellcheck="true"># 复平面坐标(x,y)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 从左上角开始遍历</span>        z <span class="token operator">=</span> complex<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># z0 = 0</span>        <span class="token comment" spellcheck="true"># c = x + yi</span>        c <span class="token operator">=</span> complex<span class="token punctuation">(</span>left <span class="token operator">+</span> x <span class="token operator">*</span> width <span class="token operator">/</span> <span class="token number">640</span><span class="token punctuation">,</span> top <span class="token operator">+</span> <span class="token punctuation">(</span>h<span class="token number">-1</span><span class="token operator">-</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> height <span class="token operator">/</span> <span class="token number">480</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 进行迭代 ,迭代次数 &lt;option iterations="128"/></span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            z <span class="token operator">=</span> z<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> c  <span class="token comment" spellcheck="true"># zi = zi-1**2 + c</span>            <span class="token comment" spellcheck="true"># 若复数c ∈ M  ，则|zi| &lt; 2, ∀ i ∈ N </span>            <span class="token keyword">if</span> abs<span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>                im1<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># 128次迭代完, 其模仍小于2，则该点的颜色值为127</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true"># ! 不只是if有，while和for都有else分支:循环体的else分支触发条件是循环正常结束。如果循环内被break跳出，就不执行else。</span>            im1<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span>im1<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"output/level_31/mandelbrot_2.gif"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 比较两张图的差别,得到diff列表</span>data0 <span class="token operator">=</span> list<span class="token punctuation">(</span>im0<span class="token punctuation">.</span>getdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data1 <span class="token operator">=</span> list<span class="token punctuation">(</span>im1<span class="token punctuation">.</span>getdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果p0&lt;p1,则取0即黑色,如果p0>p1,则取255,即白色</span>diff <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">255</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p0 <span class="token operator">&lt;</span> p1<span class="token punctuation">)</span> <span class="token keyword">for</span> p0<span class="token punctuation">,</span> p1 <span class="token keyword">in</span> zip<span class="token punctuation">(</span>data0<span class="token punctuation">,</span> data1<span class="token punctuation">)</span> <span class="token keyword">if</span> p0 <span class="token operator">!=</span> p1<span class="token punctuation">]</span>len <span class="token operator">=</span> len<span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"length: {len}"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1679</span>factors <span class="token operator">=</span> <span class="token punctuation">[</span>f <span class="token keyword">for</span> f <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token keyword">if</span> len <span class="token operator">%</span> f <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>factors<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [23,73]</span><span class="token comment" spellcheck="true"># 输出</span>im2 <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">)</span>im2<span class="token punctuation">.</span>putdata<span class="token punctuation">(</span>diff<span class="token punctuation">)</span>im2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">730</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>im2<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"output/level_31/result.jpg"</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/mandelbrot_2-2020-12-23.gif" alt="mandelbrot"><br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/result-2020-12-23.jpg" alt="Arecibo message"></p><h2 id="level-32-刻印-2020-12-24"><a href="#level-32-刻印-2020-12-24" class="headerlink" title="level_32_刻印_2020.12.24"></a>level_32_刻印_2020.12.24</h2><p><strong>🔑Solution</strong><br>啊，没有Solution，完全不知道这是啥，等以后补吧<br>学习<br>见识到复杂的代码，觉得自己毫无长进吧<br><strong>🖊Learned</strong><br><a href="https://en.wikipedia.org/wiki/Nonogram">Nonogram</a>,一种类似于数独的游戏，每一行每一列的数字来填格子，行列都符合的图案就是要求的答案</p><p><strong>代码</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imageis_solved <span class="token operator">=</span> <span class="token boolean">False</span>ans_points <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># n = 9</span><span class="token comment" spellcheck="true"># horizontal = [[2, 1, 2], [1, 3, 1], [5], [7], [9], [3], [2, 3, 2], [2, 3, 2],[2, 3, 2]]</span><span class="token comment" spellcheck="true"># vertical = [[2, 1, 3], [1, 2, 3], [3], [8], [9], [8], [3], [1, 2, 3],[2, 1, 3]]</span>n <span class="token operator">=</span> <span class="token number">32</span>horizontal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>vertical <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">print_points</span><span class="token punctuation">(</span>points<span class="token punctuation">:</span> np<span class="token punctuation">.</span>array<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print array in console</span>    <span class="token keyword">if</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ERROR\n"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> points<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'█'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> points<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'■'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> points<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> points<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'×'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">horizontal_put</span><span class="token punctuation">(</span>points<span class="token punctuation">:</span> np<span class="token punctuation">.</span>array<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">,</span> y0<span class="token punctuation">:</span> int<span class="token punctuation">,</span> y1<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> np<span class="token punctuation">.</span>array<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># the next position of current array is already occupied</span>    <span class="token keyword">if</span> y1 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> n <span class="token operator">and</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y0<span class="token punctuation">:</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">:</span>        points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span>        <span class="token keyword">return</span> points    <span class="token comment" spellcheck="true"># some positions of current array are inaccessible</span>    <span class="token keyword">if</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y0<span class="token punctuation">:</span>y1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> <span class="token punctuation">(</span>y1 <span class="token operator">&lt;</span> n <span class="token operator">and</span> points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>        <span class="token keyword">return</span> points    <span class="token comment" spellcheck="true"># set all positions of current array occupied</span>    points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y0<span class="token punctuation">:</span>y1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># set the next position of current array inaccessible</span>    <span class="token keyword">if</span> y1 <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">return</span> points<span class="token keyword">def</span> <span class="token function">vertical_put</span><span class="token punctuation">(</span>points<span class="token punctuation">:</span> np<span class="token punctuation">.</span>array<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> np<span class="token punctuation">.</span>array<span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># this column is already finished</span>        <span class="token keyword">if</span> points<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> nums <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>vertical<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># find next begin position of this column</span>            <span class="token keyword">while</span> x <span class="token operator">&lt;</span> n <span class="token operator">and</span> points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                x <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># at the end of this column</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> n<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token comment" spellcheck="true"># goto the end position of current array</span>            <span class="token keyword">if</span> points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                x <span class="token operator">+=</span> nums            <span class="token comment" spellcheck="true"># not enough positions to put current array</span>            <span class="token keyword">elif</span> points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> x <span class="token operator">+</span> nums <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> n<span class="token punctuation">:</span>                points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>                <span class="token keyword">return</span> points            <span class="token comment" spellcheck="true"># set positions of current array occupied</span>            <span class="token keyword">elif</span> points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>                points<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>x <span class="token operator">+</span> nums<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                <span class="token comment" spellcheck="true"># set the next position of current array inaccessible</span>                <span class="token keyword">if</span> x <span class="token operator">+</span> nums <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>                    points<span class="token punctuation">[</span>x <span class="token operator">+</span> nums<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>                <span class="token comment" spellcheck="true"># this is the last array and set all rest positions inaccessible</span>                <span class="token keyword">if</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>vertical<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">and</span> x <span class="token operator">+</span> nums <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>                    points<span class="token punctuation">[</span>x <span class="token operator">+</span> nums<span class="token punctuation">:</span><span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>                <span class="token keyword">break</span>    <span class="token keyword">return</span> points<span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>points<span class="token punctuation">:</span> np<span class="token punctuation">.</span>array<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">,</span> y<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>    <span class="token keyword">global</span> is_solved<span class="token punctuation">,</span> ans_points    <span class="token comment" spellcheck="true"># solution is found</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> n<span class="token punctuation">:</span>        print_points<span class="token punctuation">(</span>points<span class="token punctuation">)</span>        ans_points <span class="token operator">=</span> points<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        is_solved <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span>    <span class="token comment" spellcheck="true"># the last position of this row can start this array</span>    j_end <span class="token operator">=</span> n <span class="token operator">-</span> sum<span class="token punctuation">(</span>horizontal<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>horizontal<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>y<span class="token punctuation">,</span> j_end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># the previous position of current array is occupied</span>        <span class="token keyword">if</span> j <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">and</span> points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># create a copy</span>        j1 <span class="token operator">=</span> j <span class="token operator">+</span> horizontal<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>        new_points <span class="token operator">=</span> points<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># try to put current array into positions row[x] column[j-j1]</span>        new_points <span class="token operator">=</span> horizontal_put<span class="token punctuation">(</span>new_points<span class="token punctuation">,</span> x<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># error code -2</span>        <span class="token keyword">if</span> new_points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment" spellcheck="true"># error code -3</span>        <span class="token keyword">elif</span> new_points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># check and put arrays in columns</span>        new_points <span class="token operator">=</span> vertical_put<span class="token punctuation">(</span>new_points<span class="token punctuation">)</span>        <span class="token keyword">if</span> new_points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment" spellcheck="true"># this is the last array of this row, but some rest positions of this row are still occupied</span>        <span class="token keyword">if</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>                horizontal<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">and</span> j1 <span class="token operator">&lt;</span> n <span class="token operator">and</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>new_points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> j1<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment" spellcheck="true"># recur to next</span>        <span class="token keyword">if</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>horizontal<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            search<span class="token punctuation">(</span>new_points<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            search<span class="token punctuation">(</span>new_points<span class="token punctuation">,</span> x<span class="token punctuation">,</span> j1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># solution is already found</span>        <span class="token keyword">if</span> is_solved<span class="token punctuation">:</span>            <span class="token keyword">return</span>search<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>ans_points<span class="token punctuation">[</span>ans_points <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span>ans_points<span class="token punctuation">[</span>ans_points <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>ans_points<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">)</span>im<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># im.save("level_32/python.jpg")</span></code></pre><p><strong>Output</strong><br><a href="http://www.pythonchallenge.com/pc/rock/warmup.txt">warmup.txt</a></p><pre><code>██×.█×.███×.███××█×.█████××.███████×█████████×××███×××██×███×████×███×████×███×██</code></pre><p><a href="http://www.pythonchallenge.com/pc/rock/up.txt">up.text</a></p><pre><code>...................███×██×........................████████×......................██████████×.....................███×××█××█×.....................█████×██×█×.....................█████×██×█×....................████××.█×.█×.................███████████████×..............███████████████████×...........██████×██████████████×.........██████×..×.█×██████████........███████×..██×.█×████████........██████×█×█×██××.█×█×█××█........█████×.×█×.████××.×.×..█........█████×████×█×████×█×█×█×........█████×××█×█×.×████████××........×█████×██××█×.×████████×.........██████××█××██×××█×███××.........×██████×███××██××.××█××..........×██████×××█×××█████×××█×.........×██████×.███×××××××××██×.........×███████×××██×.×××××███×.███×..██████████×████××××××█████████×████████████××××█×××××██████████████████████×...█××××××█████████████████████×████×××××××█××█████████████████××××█××××××××██××████████×█████×....█×××××××××××××██×××××██××××.████××××××××××××××××█████××██×█×××█××××××××××××××××××××××××××█████××××××××</code></pre><p>输入“python.html”到下一页面，直接搜索下面那段话 “Free” as in “Free speech”, not as in “free…<br>了解到“Free as in beer”指免费软件，“Free as in speech”指开源软件，答案就是“beer”。</p><h2 id="level-33-remove-light-2020-12-25"><a href="#level-33-remove-light-2020-12-25" class="headerlink" title="level_33_remove light_2020.12.25"></a>level_33_remove light_2020.12.25</h2><p>今天圣诞节嘞，圣诞快乐🎄！然而并没有收到礼物/(ㄒoㄒ)/~~<br><strong>🔑Solution</strong><br>不明白为什么32关那么难,33关又正常了…小小吐槽一下<br>这一关就是根据网页提示得到beer2.png图片,保存到本地,打开,发现图片是138*138的正方形<br>之前的网页源代码提示,”如果你被光蒙蔽了双眼，用它的力量移除它的力量。然后在灰烬中，另一个真相将向你光明正大地展示。”额,这句话真有哲理(●’◡’●)<br>总之,是之后用im.getdata()查看图片的灰度值,找到最大的两个数c0,c1,把等于c0,c1的数都变为255(白色),把小于的数都变成0(黑色),然后再删除等于c0和c1的数,得到的列表长度依然是一个平方数,之后需要重复操作33次,得到33张图片,发现33张图片里几张被方框括起来了,按顺序拼接,于是答案就为”gremlins”<br><strong>学习</strong></p><ul><li>最后一关的输出我用了红色和绿色来美化输出哦,还回想起了<code>center(10,'*')</code></li><li>numpy可能要学习一下<ul><li> <code>data_np = np.array(data_list, dtype=np.uint8).reshape(n, n)</code>把列表搞成n*n的矩阵</li><li> <code>data_np[data_np &gt;= max_2] = 255</code>可以直接把矩阵里大于某个数的值重新赋值</li></ul></li></ul><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> math<span class="token keyword">import</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> heapq<span class="token keyword">def</span> <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹函数</span>    folder <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> folder<span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"---new folder {path} created---"</span><span class="token punctuation">)</span>mkdir<span class="token punctuation">(</span><span class="token string">'output/level_33'</span><span class="token punctuation">)</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'assets/beer2.png'</span><span class="token punctuation">)</span>data_list <span class="token operator">=</span> list<span class="token punctuation">(</span>im<span class="token punctuation">.</span>getdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'\033[31m开始处理第{i+1}张图片\033[0m'</span><span class="token punctuation">)</span>    max_number <span class="token operator">=</span> heapq<span class="token punctuation">.</span>nlargest<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> set<span class="token punctuation">(</span>data_list<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"data中最大的两个数：{max_number}"</span><span class="token punctuation">)</span>    max_2 <span class="token operator">=</span> max_number<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>    n <span class="token operator">=</span> int<span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'列表总长度：{length}'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'图片大小:{n}*{n}'</span><span class="token punctuation">)</span>    data_np <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data_list<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    data_np<span class="token punctuation">[</span>data_np <span class="token operator">>=</span> max_2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span>    data_np<span class="token punctuation">[</span>data_np <span class="token operator">&lt;</span> max_2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    data_list <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> data_list <span class="token keyword">if</span> x <span class="token operator">&lt;</span> max_2<span class="token punctuation">]</span>    im1 <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>    im <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>data_np<span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">)</span>    im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>f<span class="token string">'output/level_33/{i+1}.png'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'\033[32m第{i+1}张图片成功保存至本地\033[0m'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>Output</strong><br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201225110813-2020-12-25.png" alt="生成的33张图"></p><p>撒花完结!!!!<br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201225111138-2020-12-25.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础练习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
