<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linus Carl Pauling</title>
      <link href="posts/37ea.html"/>
      <url>posts/37ea.html</url>
      
        <content type="html"><![CDATA[<h1 id="生平"><a href="#生平" class="headerlink" title="生平"></a>生平</h1><p>他是迄今唯一单独获得两次诺贝尔奖的著名科学家，却在逝世时，被报道是“20世纪最受尊敬和最受嘲弄的科学家之一”。他是现代化学的奠基人之一，是20世纪最伟大的化学家之一，把量子力学运用于分子结构和化学键特性研究，对分子生物学和生物化学也做出划时代的意义，晚年却醉心正分子疗法，提倡应用大剂量维生素C治疗疾病，却从此受尽抨击。在他悠长的人生道路上，从俄勒冈州一家小镇药店老板的儿子身份出发，曾数度达到辉煌的顶点，被推崇为科学界领军式的人物，另一方面也曾因过于自信或其他各种原因招致的错误，受人冷落和误解，更横遭政治诋毁和迫害……他就是科学怪杰——莱纳斯·鲍林。<br><br><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1408046/1602076172823-15184d8c-8c57-4621-95fc-f678c51dba03.png#align=left&amp;display=inline&amp;height=731&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=731&amp;originWidth=1117&amp;size=933749&amp;status=done&amp;style=none&amp;width=1117" alt="image.png"><br><img src="../../../%E5%88%86%E5%AD%90%E7%94%9F%E7%89%A9%E5%AD%A6%E5%A4%A7%E4%BD%9C%E4%B8%9A/%E9%B2%8D%E6%9E%97%E5%9B%BE%E7%89%87/%E8%80%81%E5%B9%B4"><br>鲍林于1901年2月28日在美国俄勒冈州波特兰市一个贫苦家庭出生，鲍林的父亲是一位药剂师。幼年的鲍林对父亲的工作非常感兴趣，常观察父亲配制药物。鲍林的父亲在他年仅9岁就去世，母亲在之后患上严重的抑郁症和慢性病，再没能恢复健康。<img src="../../../%E5%88%86%E5%AD%90%E7%94%9F%E7%89%A9%E5%AD%A6%E5%A4%A7%E4%BD%9C%E4%B8%9A/%E9%B2%8D%E6%9E%97%E5%9B%BE%E7%89%87/7%E5%B2%81.jpg"></p><p>7岁的鲍林和两个妹妹</p><p>一天下午放学后，朋友杰夫列斯邀请莱纳斯去他家参观他自制的简单化学器皿。杰夫列斯把各种颜色的粉末混合在一起，制成溶液，然后吹出了五彩缤纷的气泡。最后，还将食糖和氯酸钾搅和，然后滴入硫酸——火焰一下窜出来了，看到这一切，莱纳斯如醉如痴。那天下午被鲍林认作自己化学生涯的开端，他后来评论道，“食糖和几种化学品最终变成了一堆黑炭，一些物质变成另外一些物质，这个现象深深打动了我。在化学中，事物可发生变化，发生惊人的变化。”</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1408046/1602075257113-241b7a25-7d0e-4368-b8c4-57c9518174dc.png#align=left&amp;display=inline&amp;height=439&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=439&amp;originWidth=671&amp;size=485705&amp;status=done&amp;style=none&amp;width=671" alt="image.png"></p><p>由于家境贫寒，高中时就在一家机器制造厂打工，16岁时他就提前一学期离校进入俄勒冈农学院选择了费用相对低廉的化学工程专业。大学毕业后赴加州理工学院深造，加入了著名化学家诺伊斯的研究团队，迅速掌握了具有革命性的X射线晶体衍射技术，进行创造性工作，1925年鲍林获得物理化学和数学物理博士学位，毕业后的鲍林前往欧洲留学，当时的欧洲是量子理论发展的中心，鲍林在那里接触到了当时物理学界和物理化学界的顶尖人物，师从索末菲、玻尔和薛定谔。1927年返回美国，从事化学键本质的研究，1939年出版了在化学史上有划时代意义的《化学键的本质》一书，创立了杂化轨道理论和共振论，把经典的化学理论与量子力学相结合，从而改写了20世纪的化学。<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1408046/1602075093745-4195634f-e474-4d67-9a57-1d59d9e7d627.jpeg#align=left&amp;display=inline&amp;height=309&amp;margin=%5Bobject%20Object%5D&amp;originHeight=309&amp;originWidth=220&amp;size=0&amp;status=done&amp;style=none&amp;width=220"><br>　　1934年开始，运用自己有关物质结构的丰富知识进一步研究分子生物学，特别是蛋白质分子结构。在抗原和抗体蛋白质结构的研究上，展了抗体-抗原反应中的分子互补概念。证明镰状细胞贫血是由于血红蛋白的变异，说明人的遗传性疾病是由于突变基因表达所产生的异常蛋白质，首先提出<strong>分子疾病</strong>的概念；与科里阐明了<strong>蛋白质的α螺旋</strong>结构；1953年1月，鲍林试图建立DNA分子结构模型，发表了<strong>DNA的“三螺旋”</strong>假说，与双螺旋模型失之交臂。　1954年鲍林因阐明了化学键的本质和分子结构的基本原理<strong>获诺贝尔化学奖</strong>。1962年，Zuckerkandl 和 Pauling比较几种动物的血红蛋白、细胞色素C的序列后注意到：这些蛋白质的氨基酸取代速率在不同的种系间大致相同，即分子水平的进化存在恒速现象。1965年提出<strong>进化分子钟</strong>概念，分子水平进化存在一个“时钟“， 也即进化速率是近似恒定的。</p><p>　　鲍林是“主张自由表达信仰的理想主义者”和激进的社会活动家。他直言不讳、话语尖刻，坚持己见，决不退让。二战结束后，他积极参与开展反战活动，坚决反对“以任何形式的战争作为解决国际冲突的手段”，奔走世界各地，唤起社会大众对核污染威胁的关注，不遗余力地反对核试验，致力于世界和平事业。1958年1月，他向联合国秘书长递交了由他起草并征得49个国家的11 000多位科学家签名的《科学家反对核武器试验宣言》，要求缔结一项停止核武器试验的国际协定。1963年10月10日美苏签署《部分禁止核试验条约》之日，诺贝尔委员会宣布把1962年和平奖授予这位坚持不渝的反核斗士。<br><img src="../../../%E5%88%86%E5%AD%90%E7%94%9F%E7%89%A9%E5%AD%A6%E5%A4%A7%E4%BD%9C%E4%B8%9A/%E9%B2%8D%E6%9E%97%E5%9B%BE%E7%89%87/%E5%92%8C%E5%B9%B3%E6%8A%97%E8%AE%AE.jpg"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1408046/1602075615874-3886e21d-1ed8-437c-8afd-1a9c3beab9c8.jpeg#align=left&amp;display=inline&amp;height=569&amp;margin=%5Bobject%20Object%5D&amp;originHeight=569&amp;originWidth=1200&amp;size=0&amp;status=done&amp;style=none&amp;width=1200"><br><br><br></p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><blockquote><p><strong>传记</strong><br><a href="http://edu.sslibrary.com/book/card?cnFenlei=K837.126.1&amp;ssid=11146180&amp;d=5e416576120d2a29d3142dcdb9713726&amp;isFromBW=false&amp;isjgptjs=false">鲍林 20世纪的科学怪杰</a><br><a href="http://edu.sslibrary.com/book/card?cnFenlei=K837.126.13=536&amp;ssid=10855634&amp;d=6d4fe3ea31ac247b54116efabb397a4f&amp;isFromBW=false&amp;isjgptjs=false">科学与政治的一生</a><br><strong>网页资料</strong><br><a href="http://shc2000.sjtu.edu.cn/article5/baolin.htm">鲍林晚年的失误及其启示</a><br><a href="https://baike.baidu.com/item/%E8%8E%B1%E7%BA%B3%E6%96%AF%C2%B7%E5%8D%A1%E5%B0%94%C2%B7%E9%B2%8D%E6%9E%97/2462905?fromtitle=%E9%B2%8D%E6%9E%97&amp;fromid=640230">莱纳斯·卡尔·鲍林百度百科</a><br><a href="https://en.wikipedia.org/wiki/Linus_Pauling">Linus Pauling维基百科</a><br><strong>视频</strong><br><a href="https://www.bilibili.com/video/BV1kE411q7Ki?from=search&amp;seid=9914907510586299827">【天才简史-莱纳斯鲍林】他是唯一一个两次单独拿到诺贝尔奖的人，晚年却成为最有争议的科学家！</a><br><a href="https://www.youtube.com/watch?v=QZ6hUl7hAUA">Linus Pauling 1977 interview</a></p></blockquote><h1 id="无机化学家如何与生物学结缘"><a href="#无机化学家如何与生物学结缘" class="headerlink" title="无机化学家如何与生物学结缘"></a>无机化学家如何与生物学结缘</h1><h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><p>在1930年代前期，美国正值大萧条时期，洛克菲勒基金会（当时世界上最重要的私人科学赞助机构）的沃伦·韦弗（Warren Weaver）向鲍林宣扬他对生物学的憧憬，强调洛克菲勒基金对生物分子结构的兴趣要大大高于对硫化物的兴趣，怂恿鲍林运用结构化学的思想揭开生命之谜，然而倔强的鲍林病并没有听进去。说到韦弗大家可能不熟悉，<strong>要知道他在1938年创造了一个词——分子生物学</strong>，他对洛克菲勒基金会的理事们说，旧生物学关注的是整个有机体，而分子生物学关注的是单个细胞中的未知世界、新陈代谢的过程与单个蛋白质的结构。基于实验室的对生物学和心理学的研究工作，将揭示导致暴力、郁闷、失常和性问题的分子结构，从而帮助人们使自己的行为理性化。正是他的夸夸其谈，打动了众理事，以为发现了社会动荡的根本因素，<strong>从此以后洛克菲勒基金会不再赞助那些与生命科学没有直接联系的数学、物理和化学</strong>。（后来就连密立根也说服不了基金会来赞助他的宇宙射线的研究）<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1408046/1601990879346-1cfe2989-09f6-49bf-896d-c42e8e7cd901.jpeg#align=left&amp;display=inline&amp;height=400&amp;margin=%5Bobject%20Object%5D&amp;originHeight=400&amp;originWidth=700&amp;size=0&amp;status=done&amp;style=none&amp;width=700"><img src="https://cdn.nlark.com/yuque/0/2020/png/1408046/1601990879324-30ab685b-c937-46a0-851d-42f66a8f107b.png#align=left&amp;display=inline&amp;height=651&amp;margin=%5Bobject%20Object%5D&amp;originHeight=651&amp;originWidth=813&amp;size=0&amp;status=done&amp;style=none&amp;width=813"><br>1933年10月韦弗第二次来加州理工学院访问，鲍林两年的研究经费就快用完了，韦弗坦率告诉鲍林，普通有机化学的结构工作不可能得到基因会的资助，除非他开始从事与生物学相关的工作。鲍林还是不太甘愿，在1933年正式向基金会申请延长三年的赞助时，在报告中使了点小心机在显著的位置有意提到了生物分子希冀能够得到赞助。然而因为鲍林在当时几乎没什么与生物学有关的研究成果，即使韦弗将鲍林比作路易·巴斯德，理事会也只批准将赞助延长一年，韦弗只好向鲍林重申洛克菲勒基金会的期望：“如果你的研究工作能够直接涉及叶绿素，血红蛋白和其他具有生物学重要意义的物质，你的申请才能得到优先考虑。”<br>生物学是有趣的，鲍林也喜欢思考生物学问题，鲍林的导师——诺伊斯鼓励系里的教师参加生物系的研讨会，鲍林甚至和<strong>遗传学家摩尔根小组</strong>中的年轻人混得很熟，还翻译了一篇德文的遗传学论文并发表了自己的见解。但是鲍林一开始并没有打算围绕它来丰富自己的学术生涯，他的有机化学基础有限，而且这辈子就没有上过一堂生物课，转向生物学进入一个陌生的领域，并要由另一群科学家来批判他的成功，可令他不舒服。另外他觉得只要再有一点时间和金钱，他就能发现出硫化物结构的一般规律。1934年初，他满怀希望地向美国潘若士基金会地质学会提出资助请求，结果竟然被拒绝了，鲍林遭受到研究计划和人格的双重打击，没办法，他只好将放弃了一部分矿物学的研究工作，把重点转向生物分子。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1408046/1601990880159-a13b2f15-a3cb-48f3-90cf-dc223725f41b.png#align=left&amp;display=inline&amp;height=599&amp;margin=%5Bobject%20Object%5D&amp;originHeight=599&amp;originWidth=439&amp;size=0&amp;status=done&amp;style=none&amp;width=439"><br>后来他无奈地说：<strong>“上述这段经历说明，赞助机构可以影响科学的进程。”</strong></p><h1 id="镰刀型细胞贫血症，一种分子病"><a href="#镰刀型细胞贫血症，一种分子病" class="headerlink" title="镰刀型细胞贫血症，一种分子病"></a>镰刀型细胞贫血症，一种分子病</h1><br><h2 id="血红蛋白"><a href="#血红蛋白" class="headerlink" title="血红蛋白"></a>血红蛋白</h2><p>镰刀型细胞贫血症是20世纪初才被人们发现的一种遗传病。1910年，一个黑人青年到医院看病，他的症状是发烧和肌肉疼痛，经过检查发现，他患的是当时人们尚未认识的一种特殊的贫血症。把病人的血液放在显微镜下观察，不使其接触氧气，全部红细胞都变为弯曲的镰刀状，因此这种病被叫做镰刀型细胞贫血症。<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1408046/1601990964939-dc70a2be-8957-4a95-9177-1fde409709ed.jpeg#align=left&amp;display=inline&amp;height=563&amp;margin=%5Bobject%20Object%5D&amp;originHeight=563&amp;originWidth=600&amp;size=0&amp;status=done&amp;style=none&amp;width=600"><br>1935年，Pauling选择血红蛋白作为他最早的有机物质之一进行研究（他之前主要从事无机化学的研究）。在1930年代和1940年代的这段时间里，没人能确定人体中哪种物质能控制遗传，但是大多数科学家认为诸如血红蛋白之类的蛋白质是生命的秘密。血红蛋白容易获得并且是相当大的分子，能够分解还能与非蛋白质结合，更大的优势是能够结晶，意味着它具有一种规则的、重复的结构。他开始研究氧气如何与血红蛋白结合，用磁特性检查血红蛋白，并在二战时研究可以替代血液用于输血的血清。<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1408046/1601990964161-05d0e9cc-ad6c-412b-ad6c-443377b4777a.jpeg#align=left&amp;display=inline&amp;height=776&amp;margin=%5Bobject%20Object%5D&amp;originHeight=776&amp;originWidth=600&amp;size=0&amp;status=done&amp;style=none&amp;width=600"></p><blockquote><p>手稿”Hemoglobin and Magnetism.” May 12, 1937.</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1408046/1601990964079-8743fe57-f77b-40e3-8b09-2312a19ae1d6.jpeg#align=left&amp;display=inline&amp;height=743&amp;margin=%5Bobject%20Object%5D&amp;originHeight=743&amp;originWidth=600&amp;size=0&amp;status=done&amp;style=none&amp;width=600"></p><blockquote><p>“He Seeks Plasma Substitute” February 14, 1952.</p></blockquote><p><a name="KqaSe"></a></p><h2 id="火车上的谈话"><a href="#火车上的谈话" class="headerlink" title="火车上的谈话"></a>火车上的谈话</h2><p><br>1945年，Pauling与一位研究镰刀型细胞贫血病的医生William B. Castle一起乘坐夜班火车从丹佛前往芝加哥，在火车上Castle告诉他关于自己的工作，患有这种疾病的人，静脉中的红细胞发生变形，而红细胞进人动脉中则恢复正常的形状。这引起了Pauling的兴趣，他先前的工作立刻激发了他对镰刀性红血球形成的猜想。Pauling假设，球蛋白在Fe附着的位置附近彼此不同，并且之所以形成镰刀状是因为患者血红蛋白的球蛋白区域与正常血红蛋白的表面积不同。在没有氧气的情况下，镰状细胞血红蛋白分子能结合在一起形成长链，因此阻碍了人体的血液流动。相比之下，氧的存在阻碍了镰状细胞血红蛋白分子的聚集。</p><p>次年（1946年），Pauling让他的助手Itano研究是什么让镰状细胞血红蛋白在化学上与正常血红细胞有所不同。Itano研究患有镰刀型细胞贫血病人的血样和带有镰刀型细胞但没有患病的人的血样，然后与正常人的血样加以比较。这项研究艰难曲折，1947年秋季又新纳入一位博士后研究者Singer，Singer比Itano更有大分子物化研究的经验。后来Itano和辛格终于借助于电泳技术攻克了这一难题。（当时Pauling工作的加州理工学院正是世界上为数不多的拥有电泳仪的研究所之一）</p><p>Itano和Singer最终发现正常和镰刀型细胞血红蛋白在电泳迁移率上存在差异，这暗示着<strong>它们携带不同的电荷</strong>。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1408046/1601990964856-036b7a6c-b10f-4a8f-a30c-fa2f5a178ce4.png#align=left&amp;display=inline&amp;height=574&amp;margin=%5Bobject%20Object%5D&amp;originHeight=574&amp;originWidth=474&amp;size=0&amp;status=done&amp;style=none&amp;width=474"></p><p>Pauling研究小组将正常人、镰刀型细胞贫血症患者和带有镰刀型红血球但没有患病的人者的血红蛋白，分别放在一定的缓冲溶液中电泳，发现正常人和患者的血红蛋白的电泳图谱明显不同，而携带者的血红蛋白的电泳图谱，与由正常人的和患者的血红蛋白以1:1的比例配成的混合物的电泳图谱非常相似。他们得出结论，镰刀型细胞贫血症是一种纯合子导致的疾病，而带有镰刀型细胞但没有患病的人的是杂合子，独立于直接的基因分析便得出了这一结论。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/1408046/1601990964521-9f135a2f-aacb-4f04-84ab-1f7421a70a2f.gif#align=left&amp;display=inline&amp;height=440&amp;margin=%5Bobject%20Object%5D&amp;originHeight=440&amp;originWidth=340&amp;size=0&amp;status=done&amp;style=none&amp;width=340"><br>他们的研究成果发表于1949 年的《Science》杂志上。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1408046/1601990964978-d71971c7-20d0-4e74-a6a8-94a50c0f8014.png#align=left&amp;display=inline&amp;height=756&amp;margin=%5Bobject%20Object%5D&amp;originHeight=756&amp;originWidth=608&amp;size=0&amp;status=done&amp;style=none&amp;width=608"></p><p>Pauling的论文在两个方面具有开创性。<br>首先，它表明疾病的原因可以追溯到蛋白质分子结构的改变，从而增加了最终以这种方式解释所有疾病的可能性。其次，由于已知该疾病是遗传性的，该论文认为基因决定了蛋白质的结构。而异常的蛋白质结构会导致疾病。<br>Pauling在这篇论文中<strong>第一次提出“分子病”概念</strong>，指出“镰刀型细胞贫血症”是一种分子病，引起了人们对分子水平结构变化的关注。1937年他就说“the secret of life itself is how a protein molecule is able to form, from an amorphous substrate, new protein molecules that are made after its own image”。（“生命本身的秘密是蛋白质分子如何能够从无定形的底物上形成按照其自身图像制成的新蛋白质分子”）他在1956年就提出“man is simply a collection of molecules” and “can be understood in terms of molecules”（人只是分子的集合，可以从分子层面被理解）于是Pauling在科学上开辟了一个全新的领域——对分子水平疾病的研究！</p><p><strong>1950年代</strong>，Pauling与沃尔特·施罗德（Walter A. Schroeder）进行了正常和镰状细胞性贫血血红蛋白的色谱分析，但依然无法解释之前的电泳结果。随着分子遗传学的进展，终于到<strong>在1957年</strong>由英国学者Vernon Ingram阐明了镰刀型细胞贫血的分子机制，Ingram确定这是由肽序列的单一差异引起的，镰状细胞突变体血红蛋白中的缬氨酸，代替了正常血红蛋白A中的谷氨酸。<strong>1953年</strong>，DNA双螺旋模型横空出世，遗传信息的记录载体从此大白天下，而这一次是首次证明基因能引起相应氨基酸序列的改变，将基因功能的理解又向前推进了一步，至此，DNA序列如何确定蛋白质的氨基酸序列成为分子生物学家和生物化学家试图解决的挑战。<br>伽莫夫仅从数学角度推测，三个碱基密码子来指导氨基酸的装配既能覆盖所有的20种氨基酸，又不会太浪费。<br><strong>1961年</strong>，马歇尔·尼伦伯格证明，一长串人工合成的尿嘧啶核酸序列会指导生产出一个由一串苯丙氨酸相连的蛋白质分子，随后又证明一长串腺嘌呤对应的是赖氨酸，一长串鸟嘌呤则是脯氨酸。哈尔·霍拉纳又利用更复杂的长链核酸序列，明确证明了只能是3碱基序列对应一个氨基酸，接下来的几年里，许多研究机构的白热化竞争最终在<strong>1965年</strong>解密了3碱基密码子全部组合所携带的信息。终于弄清楚了DNA中的信息如何被翻译成氨基酸，让生物体呈现丰富多样的形状。</p><blockquote><p>参考资料<br><a href="https://science.sciencemag.org/content/286/5444/1488">PERSPECTIVE-“Sickle Cell Anemia， a Molecular Disease”</a><br><a href="http://scarc.library.oregonstate.edu/coll/pauling/blood/index.html">It’s in the blood，鲍林和血红蛋白的记录网站</a></p></blockquote><p><a name="GM7NI"></a></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><br></h2><p><a name="OBshX"></a></p><h2 id="镰刀型细胞贫血症背景资料"><a href="#镰刀型细胞贫血症背景资料" class="headerlink" title="镰刀型细胞贫血症背景资料"></a>镰刀型细胞贫血症背景资料</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1408046/1601990964072-b5b472cf-db69-4748-bd44-7a645fdf9390.jpeg#align=left&amp;display=inline&amp;height=341&amp;margin=%5Bobject%20Object%5D&amp;originHeight=341&amp;originWidth=512&amp;size=0&amp;status=done&amp;style=none&amp;width=512"><br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1408046/1601990965059-cb845581-5d9e-4ce0-9f79-2f822a5ca329.jpeg#align=left&amp;display=inline&amp;height=600&amp;margin=%5Bobject%20Object%5D&amp;originHeight=600&amp;originWidth=375&amp;size=0&amp;status=done&amp;style=none&amp;width=375"><br><strong>一、致病机制</strong><br>生化课上我们学过，正常的血红细胞是由两条α链和两条β链构成的四聚体，其中每条肽链都以非共价键与一个血红素相连接。α链由141个氨基酸组成，β链由146个氨基酸组成。<br>镰刀型细胞贫血症患者的血红蛋白（HbS）的分子结构与正常人的血红蛋白(HbA)的分子结构不同。在镰刀形红细胞贫血症患者体内，<strong>β-珠蛋白基因</strong>发生了一个特定碱基分子的变异：GAG突变为GTG，从A变成了T，从而导致血红蛋白β亚基N末端第6位的氨基酸从谷氨酸变成了缬氨酸，成为功能异常的HBS蛋白。<br><img src="https://cdn.nlark.com/yuque/0/2020/gif/1408046/1601990964879-041a2f55-4414-4877-99cb-31a6a51e7ba6.gif#align=left&amp;display=inline&amp;height=376&amp;margin=%5Bobject%20Object%5D&amp;originHeight=376&amp;originWidth=407&amp;size=0&amp;status=done&amp;style=none&amp;width=407"><br>由于带负电的极性亲水谷氨酸被不带电的非极性疏水缬氨酸所代替，这相当于在HbS分子表面安上了一个疏水侧链，致使血红蛋白的溶解度下降，缬氨酸在HbS分子表面创造了一个黏性突起，与另一个HbS能通过疏水作用黏连。在氧张力低的毛细血管区，HbS形成管状凝胶结构(如棒状结构)，压迫红细胞扭曲成镰刀状(即镰变)。这种僵硬的镰状红细胞变得更硬、更粘，不容易通过毛细血管，使血液的黏滞度增大，阻塞毛细血管，引起局部组织器官缺血缺氧，产生脾肿大、胸腹疼痛(又叫做“镰形细胞痛性危象”)等临床表现。这也是镰状红细胞贫血早死的主要原因。<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1408046/1601990965254-a0ba4d4b-6565-4b2e-b06f-bd090d0aa5c6.jpeg#align=left&amp;display=inline&amp;height=270&amp;margin=%5Bobject%20Object%5D&amp;originHeight=270&amp;originWidth=480&amp;size=0&amp;status=done&amp;style=none&amp;width=480"><br>患者从不到一岁开始， 就饱受缺氧组织中反复发作刺痛感的折磨。 血管堵塞的位置， 决定了患者所经历的具体症状：</p><ul><li>脾脏作为免疫系统的一部分，它的堵塞会使患者面临危险感染的风险。 <br></li><li>肺部的镰状细胞堆积，会引起发烧和呼吸困难。<br></li><li>眼睛附近的堵塞， 会导致视力问题和视网膜脱离。<br></li><li>如果供应大脑的血管堵塞了， 患者甚至会中风发作。 <br></li></ul><p>更糟的是， 镰状红血球无法存活很久—— 只有10或20天， 而健康细胞可以活4个月。 患者的红血球供应不断枯竭意味着患者短暂的寿命</p><p><strong>二、遗传方式</strong><br>镰状细胞贫血是一种常染色体不完全显性遗传病。 该病由一对隐形基因HbSHbS控制的，</p><ol><li><strong>纯合子HbSHbS型</strong>红细胞在缺氧状态下，全部呈镰状。患者红细胞内异常的血红蛋白S浓度较高，对氧的亲和力显著降低，只有14%活到成年，而多死亡于30岁前。<br></li><li><strong>杂合子HbAHbS型</strong>镰刀形细胞贫血症的杂合子，人的红细胞在缺氧状态下，只有一部分红细胞出现镰状，由于红细胞内HbS浓度较低，这样的患者在一般情况下是正常的，但是在缺氧的时候，比如经过了剧烈活动或到高原空气稀薄的地方，就会引起红细胞从正常的双凹圆饼状变成不正常的镰刀状，造成贫血。 </li></ol><p><strong>三、镰刀形细胞贫血症与疟疾的关系</strong><br>人们在非洲疟疾流行的地区，发现镰刀型细胞杂合基因型个体对疟疾的感染率，比正常人低得多。这是因为镰刀型细胞杂合基因型在人体本身并不表现明显的临床贫血症状，而对寄生在红血球里的疟原虫却是致死的，镰刀型红血球由于表面积减少，氧气输送的效率较低，寿命也短，所以疟原虫往往没有足够的时间发育成熟。此外，聚合的血红素影响寄生虫消化血红素的能力。因此在疟疾疫区，不利的镰刀型细胞基因突变反而有利于防止疟疾的流行，镰刀形细胞贫血症的携带者，在没有严重贫血的情形下保有对疟疾的抵抗力。 进化生物学家将这种现象称为 “杂合子优势”。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1408046/1601990964719-4f5f64a2-7678-4f31-89c9-de6c62cd3f80.jpeg#align=left&amp;display=inline&amp;height=240&amp;margin=%5Bobject%20Object%5D&amp;originHeight=240&amp;originWidth=351&amp;size=0&amp;status=done&amp;style=none&amp;width=351"><br>镰刀状贫血症的分布<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1408046/1601990964245-fd932f5a-7e44-4c28-929b-fcabc76b48ee.jpeg#align=left&amp;display=inline&amp;height=240&amp;margin=%5Bobject%20Object%5D&amp;originHeight=240&amp;originWidth=351&amp;size=0&amp;status=done&amp;style=none&amp;width=351"><br>疟疾的分布<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1408046/1601990964175-7c7badcb-b519-4c5d-850a-2e96bfa6adce.jpeg#align=left&amp;display=inline&amp;height=1319&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1319&amp;originWidth=600&amp;size=0&amp;status=done&amp;style=none&amp;width=600"></p><blockquote><p>参考资料<br><a href="https://www.ted.com/talks/amber_m_yates_how_this_disease_changes_the_shape_of_your_cells/transcript?language=zh-cn">镰变细胞病是如何改变细胞形状的- 安柏 - TED Talks</a><br><a href="http://d.wanfangdata.com.cn/periodical/swxjx201206034">王永辉.漫谈镰刀型细胞贫血症[J].生物学教学，2012，37(6):59. DOI:10.3969/j.issn.1004-7549.2012.06.034</a><br>Weatherall DJ. Genetic variation and susceptibility to infection: the red cell and malaria. Br J Haematol. 2008 May;141(3):276-86. doi: 10.1111/j.1365-2141.2008.07085.x. PMID: 18410566.<br><a href="https://baike.baidu.com/item/%E5%88%86%E5%AD%90%E7%97%85">分子病-百度百科</a><br><a href="https://en.wikipedia.org/wiki/Sickle_cell_disease">Sickle cell disease-wikipedia</a></p></blockquote><h1 id="成也螺旋，败也螺旋——两场科学竞赛"><a href="#成也螺旋，败也螺旋——两场科学竞赛" class="headerlink" title="成也螺旋，败也螺旋——两场科学竞赛"></a>成也螺旋，败也螺旋——两场科学竞赛</h1><p>从20 世纪30 年代开始,全球建立了三个蛋白质研究的中心。第一个中心是由布拉格领导的历史悠久的卡文迪什实验室, 拥有一大批杰出的晶体学家和先进的实验设备,是世界上最先进的X 射线晶体学研究中心。在对胰岛素、血红蛋白结构的X 射线衍射分析上,取得了一批重要的成果。第二个中心是阿斯特伯里领导的利兹大学纺织物理实验室。始建于20 年代末, 最早拍摄了角蛋白的X 射线照片,并建立了角蛋白的模型。第三个中心是鲍林领导的加州理工学院化学实验室。起动最晚,始建于30 年代中叶。相比之下,鲍林在蛋白质结构的X 射线衍射研究上是个新手。</p><p>前两个中心的领导者都认为只有通过直接的X 射线衍射分析才能揭开整个蛋白质结构之谜,而鲍林寻求以理论的形式,在对结构化学的深刻认识的基础上寻找一条捷径。鲍林认为仅靠X 射线衍射不足以用来解决蛋白质中多肽链的结构,因为每一根链中包含上万个原子,无一例外地异常复杂。当他开始看见剑桥实验室中拍摄的照片时,他的第一个反应是,如果直接用X 射线分析这类蛋白质的结构是可行的话, 那也至少要花费几十年时间。鲍林在确立蛋白质结构过程中, 首先从结构化学的角度认识到在蛋白质中氢键的性质和作用, 揭示了肽基的刚性平面性质,这就为多肽链的折叠提出了限制性的条件和预测蛋白质结构的理论基础。</p><p>1947年，鲍林携带一家老小去应邀前往英国任牛津大学讲座教授。在旅途中，有一天，鲍林在顶层甲板上散步，与一名叫查格夫的化学家不期而遇，这人向鲍林介绍了他发现了DNA中不同碱基的存在之间的简单关系：腺嘌呤和胸腺嘧啶的含量大致相同，鸟嘌呤和胞嘧啶也是如此，力图引起鲍林的兴趣，但是鲍林正在度假，而且觉得这家伙有点夸夸其谈，自我吹嘘，就不大搭理他，打断了他的讲话回船舱了。可谁也没想到，自负聪明的鲍林却因此错失了重要的信息。1952年，查格夫才与沃森克里克相识并告知这个研究成果。<br>鲍林解决蛋白质结构问题的方法是从下向上，先仔细确定单个氨基酸和小肽分子结构，然后再由此拼装出大分子结构，英国人却是从上而下，分析完完整蛋白质分子的X射线衍射图，在和许多英国科学家交谈之后，鲍林开始担心在这场确定蛋白质分子结构的竞赛中落后于人，于是又开始尝试思考如何从理论上解决角蛋白链的结构问题。</p><p>在皇家科学研究院报告后一个多星期，鲍林病倒了，由于英国潮湿的天气，鲍林患上了严重的感冒，躺在床上读侦探小说腻烦了后，于是决定对角蛋白链的结构再进行一次研究尝试。他准备好铅笔、直尺和一些纸，然后开始，按照先前X射线晶体衍射就确定好的键角和键长描绘氨基酸链的草图，然后将纸张折叠，折叠时将肽键平直地保持在纸张上，而只在氨基酸骨架中与肽键相连的单个碳原子处折角，这是他认为可能发生旋转的地方，通过对纸张采用各种不同的折叠方法，力图把元素排成恰当的形式，以便形成尽可能多的氢键。经过几个小时的折腾，他终于得出了一种形状优美的螺旋结构，这个结构具有平面性的肽键，大致正确的键角和键长，并可在拐弯处形成适当数量的氢键。鲍林喜出望外，但他很快意识到自己刚建立的模型与阿斯特贝里所得出的X射线衍射图很可能不同，在衍射图里，自然界的角蛋白显示出5.1埃（0.51nm）的强反射，这一长度被认为是链上两个相邻螺线圈的距离。而鲍林的模型是3.7个氨基酸一圈，接近5.4埃一圈。鲍林只好回到床上，把自己螺旋线构想存放起来，等到回到加州理工学院再做进一步探索。这个模型后来被他称为α-螺旋。<br><img src="https://i.loli.net/2020/10/16/Fq3RnwNYcXasjmu.jpg"><br>回到美国后，鲍林和他的同事Robert Corey和作为访问教授的H. R. Br anson研究alpha-螺旋和其他蛋白质结构模&nbsp;型，包括了beta折叠。当谈到α螺旋时，他请Branson仔细检查他的计算，特别看看他是否能够找到其他螺旋结构，经过计算后，布兰森告知他的计算完全正确，并且找不出第三种螺旋结构。</p><p>同时1950年春，布拉格、肯德鲁、佩鲁茨等几位卡文迪许实验室的老对头在《皇家科学院学报》发表了一篇论文，题目为“晶体蛋白的多肽链结构”（“Polypeptide Chain Configurations in Crystalline Proteins.” ），鲍林一见到这标题，心里一怔：难道布拉格的研究小组捷足先登了？结果他读了正文，暗下窃喜。布拉格小组的这篇论文，全文没有一个中心议题，东拉西扯，七拼八凑地罗列了蛋白质种种可能的结构，缺乏令人信服的证据，更没有明确的方法可用来鉴定具体的蛋白质到底属于哪一种。鲍林还读出布拉格受到自己的影响，也开始像自己那样对各种氨基酸的结构逐一进行考察，不过他完全可以放心，这篇论文在对蛋白质进行猜测时，并没有从化学特性方面加以限制缩小范围，也不知道肽链一定要保持刚硬和平直，还以为螺旋模型中完整的一圈所含的氨基酸数目一定是一个整数。<br>经过两年的理论分析和试验工作，1950年10月，鲍林和科里给《美国化学学会会刊》写了一篇研究快讯,题目为“多肽链的两种氢键螺旋构型”,发表于1950 年11 月。文中提出两种氢键螺旋构象，将其中一种称为α-螺旋，另一种称为γ-螺旋。在蛋白质的α-螺旋构象中，每隔3.6个氨基酸残基螺旋上升一圈，相当于向上平移5.4埃。螺旋的直径是11埃。螺旋上升时，每个氨基酸残基沿轴旋转100°，向上平移1.5埃，比完全伸展的构象压缩2.4倍。<br>1951 年2 月,鲍林、科里和布兰森在《国家科学院院刊》上发表题为“蛋白质的结构: 多肽链的两种氢键螺旋构型”的论文。对他们发现的两种氢键螺旋构型作了详细的说明。<br>1951 年4 月至5 月间鲍林和科里又在《国家科学院院刊》上发表了7 篇论文, 详细描述他们发现的各种蛋白质分子结构。<br>老对头卡文迪许实验室的科学家们对他们提出的α螺旋构型进行检验，最终发现X射线结构与他们提出的关于3.7个残基螺旋的理论吻合。这场蛋白质结构的科学竞赛终于得以告一段落。<br><img src="https://i.loli.net/2020/10/16/Rmfrbkt7lMuc1yG.jpg">鲍林当初构建的蛋白质模型， (a) 每转3 . 7 残基的螺旋, (b) 每转5. 1 残基的螺旋注意这里的α螺旋是左手的，氨基酸还是D构型。与自然界广泛存在的L-氨基酸和右手α螺旋呈镜像。</p><p>直到1952年，前面提到的Astbury的5.1埃反射的奥秘终于得到解决，1952年，鲍林在访问卡文迪许实验室时遇到了但是的研究生Francis Crick，两人在谈到α螺旋问题时，克里克问鲍林是否想过α螺旋彼此缠绕。待到鲍林回到美国，在Corey的帮助下，鲍林终于发现了一种方法，可以使α螺旋彼此缠绕成螺旋状缠绕，以产生在阿斯特伯里（Astbury）的天然角蛋白XD衍射照片中发现与自己模型矛盾的5.1埃反射。终于解了心结。</p><p>1952年底，没闲下来的鲍林又发表了DNA的“三螺旋”假说，鲍林的模型是一个以糖-磷酸骨架为中心的三条链螺旋，当时除去鲍林研究小组，还有两组人也在着力破解DNA结构，一个是伦敦国王学院的威尔金斯实验室，另一个<strong>则是门外汉沃森和克里克。本来鲍林在这场竞赛中可以说是有着绝对优势，他前不久才破解了蛋白质结构的秘密，破解DNA结构只是时间问题。</strong>然而年轻的沃森和克里克很快发现，他们眼中的“大神”竟犯了一个低级错误——“三螺旋”在化学机制上是不可能的！，原来鲍林的模型里的磷酸基团根本没有离子化，相反，每一个羟基都含有一个束缚氢原子，这样也就没有净电荷了。从某种意义上来说，鲍林的核酸根本就不是一种酸。模型中三条相互盘绕的多核苷酸链是由氢键相连的，而氢则是氢键的组成部分。如果没有氢原子，多核苷酸链就会立刻分散开来，结构也将不复存在。他们很快意识到，以鲍林的能力和资源，发现和解决这个漏洞只是时间问题。其实他俩之前也做过类似三螺旋结构，被布兰格一顿批，于是两人决定立马行动起来，争取在最短的时间内找到解决DNA结构的方案。<br><img src="https://i.loli.net/2020/10/16/VAa3UYEymsltgMo.png"></p><blockquote><p>鲍林设想的DNA三螺旋结构。</p></blockquote><p><img src="https://i.loli.net/2020/10/16/3OuInjwq9osCzN6.jpg"></p><blockquote><p>鲍林和科里的论文《核酸的可能结构》（A Proposed Structure for the Nucleic Acid）中的一张插图（该文发表于1953年2月出版的《美国国家科学院院刊》）。这是三螺旋结构的俯视图：里面是三条糖-磷酸骨架，外面是从中心向外延伸的碱基</p></blockquote><p>受鲍林的启发，沃森和克里克也采用了他在研究蛋白质α螺旋建模的方法，意识到先从理论上推测一种物质分子的各种结构模型，再运用X射线衍射提供的实验数据对模型进行校正，是研究和揭示生物大分子结构的极其合理的方法。这时沃森已经搞清楚了碱基的配对性质，这使得双螺旋结构模型基本得以确立下来。与此同时，实验室的威尔金斯美女科学家富兰克林拍出了她那张经典的X光DNA照，这张照片是当时最好的DNA结构衍射图像。而远在美国彼岸的鲍林在听闻伦敦的研究有新进展时，敏锐地察觉到这张照片的重要性，当他想要火速飞往英国一探究竟的时候，却被意外告知，美国政府以共产党员嫌疑之名禁止他出境！最终导致鲍林与这项判决性证据失之交臂。相比之下，剑桥实验室这边就幸运多了，沃森在威尔金斯那里看到了富兰克林的这张照片，这意味着他们的猜想得到了进一步的确证，而且很快他和克里克就在Nature杂志上发表了流传千古的一千字左右的双螺旋的论文，宣告DNA双螺旋的破解。</p><p>关于鲍林在DNA结构竞赛上的失败，有人认为鲍林是因为资料缺乏、错过了富兰克林的X射线衍射图，也有人认为是他的老科学家的思维定式影响　鲍林的传记作家托马斯·哈格（Thomas Hager）认为，“浮躁”与“自负”是鲍林DNA研究失败的主要原因之一。哈格就认为：“在解决了阿尔法螺旋问题后，他以为自己不再需要做别人需要做的那些研究的准备工作了。很清楚，他是世界上解决大分子结构的最佳人选。”α-螺旋研究前后历时十多年，鲍林研究小组在生物分子的键长和键角方面做了大量的工作，而DNA研究却十分仓促。哈格作了这样的比较：“阿尔法螺旋是他十多年翻来覆去进行分析的结果，其中凝结了他在成千上万小时中艰苦细致地进行晶体衍射研究的心血。在他正式发表他的模型前，他的实验室将氨基酸的各个成分精确地测定到了几分之一度或百分之一埃。在蛋白质这一课题上，存在着用X射线拍摄到的大量清晰的资料，可以让鲍林作仔细的研究，使他有可能将几十种不同的结构剔除掉 对于DNA，这些事情都没有做。”从他构建的三链模型中也能看出许多问题，没有像生物学家那样考虑DNA、不能解释DNA的复制机制，过于考虑磷酸的结构化学问题，过于强调氢键的作用将他引入错误的方向，磷酸在生理条件下电离，而在鲍林的三链螺旋中，羟基在磷酸中不能电离，这样才能将磷酸结合在一起，以致于沃森说伟大的化学家忘记了基础化学。</p><p>作为20世纪“结构学派”的代表人物，鲍林创造性地运用模型方法来研究生物分子的结构，在科学史上呈现出鲍林-科里与布拉格-肯德鲁-佩鲁茨之间的蛋白质科学竞争、鲍林-科里与沃森-克里克之间的DNA科学竞争。与“信息学派”的创始人玻尔、薛定谔不同，鲍林将生命看成一种“分子过程”，这些思想体现在“生命过程分子间作用力的本质”“、生物大分子作用力的本质”、“分子结构与生命过程”中，一定程度上，鲍林-科里与沃森-克里克DNA研究方法的差异根源于“结构学派”与“信息学派”生命观的差异。</p><blockquote><p>参考资料</p><ul><li><a href="http://www.cqvip.com/qk/92562x/201001/1001258262.html">蛋白质分子α螺旋结构的发现</a></li><li><a href="http://reader.epubee.com/books/mobile/b3/b3e990ea82a33a425d6a81f743c19545/text00029.html">双螺旋（插图注释本） 22 鲍林的“三螺旋”论文 - Reader</a></li><li><a href="http://www.lunwenstudy.com/zrbianzheng/32809.html">鲍林DNA研究失败的原因探讨</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 人物传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物 </tag>
            
            <tag> 科学家 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蛋白质组学备考</title>
      <link href="posts/b890.html"/>
      <url>posts/b890.html</url>
      
        <content type="html"><![CDATA[<h1 id="蛋白质组学名词解释汇总"><a href="#蛋白质组学名词解释汇总" class="headerlink" title="蛋白质组学名词解释汇总"></a>蛋白质组学名词解释汇总</h1><h2 id="蛋白质组学绪论"><a href="#蛋白质组学绪论" class="headerlink" title="蛋白质组学绪论"></a>蛋白质组学绪论</h2><p>【**蛋白质组(Proteome)**】的概念最先由Marc Wilkins提出，指由一个基因组(Genome)，或一个细胞、组织表达的所有蛋白质(protein). 蛋白质组的概念与基因组的概念有许多差别，它随着组织、甚至环境状态的不同而改变。 在转录时，一个基因可以多种mRNA形式剪接，一个蛋白质组不是一个基因组的直接产物，蛋白质组中蛋白质的数目有时可以超过基因组的数目</p><p>【<strong>蛋白质组学</strong>( proteomics)】是研究蛋白质组或应用大规模蛋白质分离和识别技术研究蛋白质组的一门学科，是对基因组所表达的整套蛋白质的分析。指系统研究某一基因组所表达的所有蛋白质，包括组成蛋白质一级结构的氨基酸序列，蛋白质的丰度，蛋白质的修饰以及蛋白质之间的相互作用。</p><p>【<strong>基因组</strong>Genome】：在生物学中，是指一个生物体所包含的DNA（部分病毒是RNA）里的全部遗传信息。基因组包括基因和非编码DNA。更精确地讲，一个生物体的基因组是指一套染色体中的完整的DNA序列。</p><p>【<strong>基因组学</strong>Genomics】：基因组学是对生物体所有基因进行集体表征、定量研究及不同基因组比较研究的一门交叉生物学学科。基因组学主要研究基因组的结构、功能、进化、定位和编辑等，以及它们对生物体的影响。。对所有基因进行基因组作图（包括遗传图谱、物理图谱、转录图谱）、核酸序列测定、基因定位和基因功能分析的科学。基因组学包括结构基因组学（structural genomics)、功能基因组学（functional genomics)、比较基因组学(Comparative genomics)。</p><table><thead><tr><th>基因组</th><th>蛋白质组</th></tr></thead><tbody><tr><td>同一性：同一个体的基因组不论是在不同的发育阶段或不同种类的细胞里都是一样的；</td><td>多样性：对于不同类型的细胞或同一个细胞在不同的生理状态下，蛋白质组的构成是不同的；</td></tr><tr><td>有限性：基因组无论大小，其核苷酸的数量和序列是一定的，；对基因组序列的测定是一种“有限”的工作。</td><td>无限性：由于细胞内大部分蛋白质存在翻译后修饰，包括磷酸化、糖基化、酰基化等，很难确定蛋白质组的蛋白质数量；对蛋白质组的蛋白质种类的确定是一种“无限”的工作。</td></tr><tr><td>静态：一个个体的基因组自个体诞生到死亡，始终保持不变；</td><td>动态：个体的蛋白质组，作为新陈代谢的主要执行者，在个体的生命活动中却总是变动的；</td></tr><tr><td>周期性：基因组通常位于细胞核内，比较稳定，序列和功能一般不受空间的影响，但是在发育的不同阶段和不同的细胞周期，mRNA的表达是不一样的；</td><td>空间性：不同的蛋白质分布在细胞的不同部位，它们的功能与其空间定位密切相关；许多蛋白质在细胞内不是静止的，他们常常在不同的亚细胞环境里运动而发挥作用</td></tr><tr><td>孤立行为：基因组表达的各种mRNA是彼此孤立的，互不干扰；</td><td>相互作用：蛋白质组中的各种蛋白质却是彼此间有着广泛的相互作用。</td></tr><tr><td>单一手段：在基因组研究中，DNA测序技术是最基本和最主要的工具，因为基因组的均一性和简单性使得一种单一的技术就能胜任基因组的研究任务；</td><td>多种技术：在蛋白质组研究中，需要的研究技术远远不止一种，并且技术的难度也远远大于基因组的研究技术；蛋白质组研究技术可以简单地分为两大类：蛋白质组分离技术，蛋白质组的鉴定技术，其核心是质谱技术。</td></tr></tbody></table><blockquote><p>基因组解释能发生什么？转录组解释将发生什么？蛋白组解释在发生什么？代谢组解释已发生什么</p></blockquote><p>【<strong>生物信息学Bioinformatics</strong>】生物信息学(Bioinformatics)是随着人类基因组计划的启动而兴起的一门新的交叉学科, 由林华安博士在1987年首次提出的 。生物信息学包含了生物信息的获取、处理、储存、分析和解释等方面, 集合数学、统计 、计算机与生物医学等工具研究, 阐明大量生物学数据所包含的生物学意义。具体来讲, 生物信息学是把核酸、蛋白质等生物大分子数据库作为主要研究对象, 用数学、统计、计算机科学等为主要研究手段, 对大量生物学原始试验数据进行存储 、整理 、管理、注释 、加工, 使之成为具有明确生物学意义的生物信息。通过对生物信息的查询、搜索、比较、分析, 从中获取基因编码、基因调控 、核酸和蛋白质结构功能及其相互关系等知识,从而探索未知世界。<br>生物信息学的发展大致经历了 3个阶段 :①前基因组时代, 标志性工作包括生物数据库的建立、检索工具的开发以及DNA 和蛋白质序列分析;②基因组时代, 标志性工作包括基因寻找和识别、网络数据库系统的建立和交互界面的开发;③后基因组时代, 标志是大规模基因组分析、蛋白质组分析以及各种数据的比较和整合</p><p>【<strong>简述蛋白质组信息学的主要研究内容</strong>】<br><strong>蛋白质序列与结构信息学</strong>：利用蛋白质组信息学数据库，将获得的蛋白序列通过序列比对，可以获得相应的结构信息，进而推测其功能或者鉴定其是否为蛋白质家族的新成员。<br><strong>蛋白质相互作用信息学</strong>：蛋白质相互作用网络的研究、蛋白质相互作用方法学的研究、蛋白质相互作用模拟的研究等。<br><strong>功能蛋白质组信息学</strong>：根据功能不同可以对蛋白质进行分类，序列同源性高的蛋白质之间可能具有相似的功能，有些蛋白之间的序列信息相关较大，但从结构域水平上它们又具有同源性，也可能具有相似的功能。<br><strong>蛋白质组遗传信息学</strong>：通过对蛋白质组学的研究，揭示同一类蛋白质组的遗传信息特征及其与蛋白质组表达的关系</p><p><strong>Quantitative Proteomics</strong>：定量蛋白质组学，把一个基因组表达的全部蛋白质或一个复杂的混合体系中所有的蛋白质进行精确的定量并加以鉴定的一门学科。</p><p><strong>Comparative Proteomics</strong>：比较蛋白质组学，比较不同蛋白质组的差异与相似性的学科；</p><p><strong>蛋白质组学的目标</strong>是要回答关于蛋白质的4个方面的问题：①细胞中蛋白质的含量。②定位。③活性。④修饰。在整体水平上研究细胞内蛋白质的组成及其活动规律。具体指：阐明生命细胞代谢、信号传导和调控网络的组织结构和动力学，并理解这些网络如何在病理和生理中执行和失去功能，又如何通过干预（如药物或基因）改变它们的功能。</p><p><strong>蛋白质的各种谱</strong><br>蛋白质表达谱——全谱<br>蛋白质差异表达谱——差异谱<br>蛋白质翻译后修饰——修饰谱<br>蛋白质相互作用——功能谱<br>蛋白质结构——结构谱</p><p><strong>蛋白质组学的研究方法</strong>主要有：①蛋白质双向电泳。②氨基酸序列测定（包括N端测序和C端测序）。③质谱。④生物信息学。</p><p>【<strong>密码子表</strong>】有6个密码子的氨基酸：亮氨酸、精氨酸、丝氨酸</p><p><img src="https://www.timedoo.com/wp-content/uploads/2018/12/v2-1e2834574a4f8f8c1394936224f8f4fd_hd.jpg" alt="吴思涵博士教程：有关氨基酸密码子表，教科书还漏了许多重点– 肽度TIMEDOO"></p><p>【<strong>氨基酸缩写表</strong>】</p><p>体内20种氨基酸按理化性质可分为4组：<br>①非极性、疏水性氨基酸：甘氨酸、丙氨酸、缬氨酸、亮氨酸、异亮氨酸、苯丙氨酸和脯氨酸。<br>②极性、中性氨基酸：色氨酸、丝氨酸、酪氨酸、半胱氨酸、蛋氨酸、天冬酰胺、谷氨酰胺和苏氨酸。<br>③酸性的氨基酸：天冬氨酸和谷氨酸。<br>④碱性氨基酸：赖氨酸、精氨酸和组氨酸。</p><table><thead><tr><th align="center"><strong>中文名称</strong></th><th align="center"><strong>英文名称</strong></th><th align="center"><strong>三字母缩写</strong></th><th align="center"><strong>单字母符号</strong></th></tr></thead><tbody><tr><td align="center">甘氨酸</td><td align="center">Glycine</td><td align="center">Gly</td><td align="center">G</td></tr><tr><td align="center">丙氨酸</td><td align="center">Alanine</td><td align="center">Ala</td><td align="center">A</td></tr><tr><td align="center">缬氨酸</td><td align="center">Valine</td><td align="center">Val</td><td align="center">V</td></tr><tr><td align="center">亮氨酸</td><td align="center">Leucine</td><td align="center">Leu</td><td align="center">L</td></tr><tr><td align="center">异亮氨酸</td><td align="center">Isoleucine</td><td align="center">Ile</td><td align="center">I</td></tr><tr><td align="center">脯氨酸</td><td align="center">Proline</td><td align="center">Pro</td><td align="center">P</td></tr><tr><td align="center">苯丙氨酸</td><td align="center">Phenylalanine</td><td align="center">Phe</td><td align="center">F</td></tr><tr><td align="center">酪氨酸</td><td align="center">Tyrosine</td><td align="center">Tyr</td><td align="center">Y</td></tr><tr><td align="center">色氨酸</td><td align="center">Tryptophan</td><td align="center">Trp</td><td align="center">W</td></tr><tr><td align="center">丝氨酸</td><td align="center">Serine</td><td align="center">Ser</td><td align="center">S</td></tr><tr><td align="center">苏氨酸</td><td align="center">Threonine</td><td align="center">Thr</td><td align="center">T</td></tr><tr><td align="center">半胱氨酸</td><td align="center">Cystine</td><td align="center">Cys</td><td align="center">C</td></tr><tr><td align="center">蛋氨酸</td><td align="center">Methionine</td><td align="center">Met</td><td align="center">M</td></tr><tr><td align="center">天冬酰胺</td><td align="center">Asparagine</td><td align="center">Asn</td><td align="center">N</td></tr><tr><td align="center">谷氨酰胺</td><td align="center">Glutarnine</td><td align="center">Gln</td><td align="center">Q</td></tr><tr><td align="center">天冬氨酸</td><td align="center">Asparticacid</td><td align="center">Asp</td><td align="center">D</td></tr><tr><td align="center">谷氨酸</td><td align="center">Glutamicacid</td><td align="center">Glu</td><td align="center">E</td></tr><tr><td align="center">赖氨酸</td><td align="center">Lysine</td><td align="center">Lys</td><td align="center">K</td></tr><tr><td align="center">精氨酸</td><td align="center">Arginine</td><td align="center">Arg</td><td align="center">R</td></tr><tr><td align="center">组氨酸</td><td align="center">Histidine</td><td align="center">His</td><td align="center">H</td></tr></tbody></table><p>【<strong>32P标记核苷酸和蛋白质标记的P是α，β，γ</strong>？】</p><p>标记核酸的末端常用[γ-^32^P]ATP</p><p>标记合成DNA的核酸用各种[a-^32^P]dNTP</p><p>^32^P-ATP标记磷酸化蛋白γ位</p><p>【<strong>CBB考马斯亮蓝</strong>】：Coomassie Brilliant Blue，考马斯亮兰G-250染料，在酸性溶液中与蛋白质结合，使染料的最大吸收峰(lmax)的位置，由465nm变为 595nm，溶液的颜色也由棕黑色变为兰色。通过测定595nm处光吸收的增加量可知与其结合蛋白质的量。研究发现，染料主要是与蛋白质中的碱性氨基酸(特别是精氨酸)和芳香族氨基酸残基相结合。</p><p>【<strong>胰蛋白酶</strong>】：胰蛋白酶（trypsin）是目前“Bottom-up”策略中使用最广泛的蛋白水解酶，能特异性酶切赖氨酸和精氨酸<u>C端</u>的肽键（Lys-X和Arg-X）。它的两个主要优势是：（1）酶切位点特异性高；（2）酶解得到的肽段产物两端各有一个碱性基团，有利于质谱的鉴定。但是由于胰酶在赖氨酸上的酶切效率比较低，因此常常产生不完全酶解的肽段，影响定量结果。</p><p>【<strong>胰凝乳蛋白酶</strong>】：是一种丝氨酸内肽酶，对苯丙氨酸，色氨酸和酪氨酸侧链（主要是较大的疏水残基）具有底物特异性。</p><p>【<strong>报告基因  (reporter gene)</strong> 】是一种编码可被检测的蛋白质或酶的基因，也就是说，是一个其表达产物非常容易被鉴定的基因。把它的编码序列和基因表达调节序列相融合形成嵌合基因，或与其它目的基因相融合，在调控序列控制下进行表达，从而利用它的表达产物来标定目的基因的表达调控，筛选得到转化体。</p><p>【<strong>等电点（ isoelectric point</strong>）】在某一 pH的溶液中，氨基酸或蛋白质解离成阳离子和阴离子的趋势或程度相等，成为兼性离子， 呈电中性， 此时溶液的pH称为该氨基酸或蛋白质的等电点。</p>]]></content>
      
      
      <categories>
          
          <category> 本科课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物 </tag>
            
            <tag> 组学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信数据挖掘备考</title>
      <link href="posts/a0e.html"/>
      <url>posts/a0e.html</url>
      
        <content type="html"><![CDATA[<h1 id="生信数据挖掘备考"><a href="#生信数据挖掘备考" class="headerlink" title="生信数据挖掘备考"></a>生信数据挖掘备考</h1><p>成绩比例：考试（ 60％）＋上机实践（30％）+ 平时（10%）</p><h2 id="贝叶斯"><a href="#贝叶斯" class="headerlink" title="贝叶斯"></a>贝叶斯</h2><p><a href="https://www.cnblogs.com/chenqionghe/p/12598786.html">贝叶斯和朴素贝叶斯是啥 - 雪山飞猪 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.zhihu.com/question/20138060/answer/163283388">朴素贝叶斯分类器和一般的贝叶斯分类器有什么区别？ - 忆臻的回答 - 知乎</a></p><p><img src="https://b3logfile.com/siyuan/1610205759005/assets/662544-20200330150300337-1212202741-20210524212743-i0hyigy.png"></p><p><strong>一、</strong> 请结合“真核基因剪接位点预测的WAM模型编程实现”这一综合训练内容简要回答以下问题：</p><p><u>1)  当采用WMM方法建立预测模型时，需确定的参数个数是多少？(</u></p><p>WMM：需要这λ个位置四种碱基的概率分布情况，参数个数为：2× 4×λ+2 （由于实际计算时，WMM可以不考虑先验概率，所以后面的加2可以省略）</p><p><u>2) 当采用WAM方法建立预测模型时，需确定的参数个数是多少？(</u></p><p>WAM：需要这λ个位置中第一个位置碱基的概率和另外（ λ-1  ）个位置四种碱基的条件概率分布情况，参数个数为：  [4+16×（  λ-1 )+1]×2 （由于实际计算时，WAM可以不考虑先验概率，所以后面的加2可以省略）</p><p><u>3)  若采用理想贝叶斯方法建立预测模型，需确定的参数个数是多少？(</u></p><p>理想贝叶斯：需要计算每种情况下的条件概率，参数个数为： 4^λ×2+2；</p><p>朴素贝叶斯：假设每个位置出现碱基的概率都为都为独立，所以参数个数为：2×（ 4×λ+1）</p><p><u>4)比较上述方法的优缺点并给出一种与之不同的贝叶斯方法(</u></p><p><strong>WMM</strong> <strong>：</strong></p><p>$$<br>S(X)=ln\frac{P^+(X)}{P^-(X)} = \sum_{i=1}^\lambda ln\frac{p^+(i,x_i)}{p^-(i,x_i)}<br>$$</p><ul><li><strong>优点：方法简单，涉及的参数少，便于计算和训练；</strong></li><li><strong>缺点：将每个位置出现碱基的概率都考虑为独立的，未考虑之间的相关性，不太符合实际。</strong></li></ul><p><strong>WAM</strong> <strong>：</strong></p><p>$$<br>S(X)=ln\frac{P^+(X)}{P^-(X)} = ln\frac{p^+(1,x_1)}{p^-(1,x_1)}+\sum_{i=2}^\lambda ln\frac{p^+(1,x_{i-1},x_i)}{p^-(1,x_{i-1},x_i)}<br>$$</p><ul><li><strong>优点：考虑到相邻碱基之间的依赖性，引入条件概率分布，方法相对简单，涉及的参数也不是很多；</strong></li><li><strong>缺点：仅仅考虑相邻碱基之间的依赖性，忽略了长程关联，在预测时效果也不会太理想。</strong></li></ul><p><strong>理想贝叶斯方法：</strong></p><p>$$<br>\mathrm{g}<em>{i}(\mathrm{X})=lnP\left(\omega</em>{i}\right) + ln P\left(x \mid \omega_{i}\right)<br>$$</p><ul><li>优点：理论上，贝叶斯分类器具有最优的性能，即所实现的分类错误率或风险在所有可能的分类器中是最小的。但贝叶斯分类要求具备以下前提条件：类别数目已知；各个类别的先验概率以及类条件概率密度均为已知。考虑到特征之间可能存在的所有依赖性的关系，并将其每种组合都列出概率分布，预测性能最好；</li><li>缺点：参数太多，导致后验概率种类过多，数据量庞大，计算不便。</li></ul><p><strong>朴素贝叶斯</strong></p><p>$$<br>\mathrm{g}<em>{i}(\mathrm{X})=lnP\left(\omega</em>{i}\right) +\sum_{s=1, \ldots, \mathrm{d}}ln P\left(x_{s} \mid \omega_{i}\right)<br>$$</p><ul><li><strong>优点</strong> ：<ul><li>算法逻辑简单,易于实现（算法思路很简单，只要使用贝叶斯公式转化即可！）</li><li>分类过程中时空开销小（假设特征相互独立，只会涉及到二维存储）</li></ul></li><li>缺点<ul><li>为朴素贝叶斯模型假设属性之间相互独立，这个假设在实际应用中往往是不成立的，在属性个数比较多或者属性之间相关性较大时，分类效果不好。</li><li>朴素(Naive)的含义是很简单很天真地假设样本特征彼此独立. 这个假设现实中基本上不存在, 但特征相关性很小的实际情况还是很多的, 所以这个模型仍然能够工作还不错。</li></ul></li></ul><p>与之不同的贝叶斯方法：贝叶斯网络</p><p><u>5）贝叶斯的基本思想是？</u></p><p>得到先验概率和似然函数，然后用后验概率来决策。</p><p><u>6）实现贝叶斯分类的关键问题是什么，并给出你所知道的解决该问题的方案</u></p><p>关键问题：有效确定贝叶斯分类的似然函数$P(x|w_i)$ ，基于贝叶斯公式来估计后验概率$P(w|_ix)$主要困难在类条件概率$P(w_i|x)$ 是所有属性的联合概率，样本空间有很大的取值情况，往往远大于样本数，很多样本取值在测试集根本没有出现</p><p>解决该问题的方案：</p><ul><li>朴素贝叶斯：假设每个属性相互独立，减小时空开销</li><li>贝叶斯网络：贝叶斯原理与图论结合，借助有向无环图来刻画属性之间的依赖关系，其中节点表示变量，边表示条件独立性，假设每个特征有不确定的因果推理关系</li></ul><p><u>7）最小错误决策和最小风险决策差别</u></p>]]></content>
      
      
      <categories>
          
          <category> 本科课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信 </tag>
            
            <tag> 数据挖掘 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino智能小车</title>
      <link href="posts/17b5.html"/>
      <url>posts/17b5.html</url>
      
        <content type="html"><![CDATA[<p>本次智能小车包括以下三个模块：自动寻迹，超声波测距，蓝牙控制。各模块设计意图如下详述： </p><ol><li> 自动寻迹：<br>（1）设计方式：在车身下靠近地面处装两个灰度传感器。<br>（2） 设计功能：实现小车从出发区沿着白色路面的黑色轨迹到达停车区，要求:<br> a. 若两个传感器都没有检测到黑线时，小车直线前进。<br> b. 若有一侧传感器检测到黑线时，小车向该侧转弯。<br>（3） 设计实现 : 对于不同的情况，在代码中控制不同车轮的转动与停止以及车速。在实际情况中应根据电池电量，车轮损坏，传感器灵敏度等实际情况调整左右轮的转速。</li><li>超声波测距<br>（1）设计方式：在车身前上方安装超声波传感器和蜂鸣器<br>（2）设计功能：当启动该功能之后小车一边超声测距一边开始向前自动循迹同时响起蜂鸣器，大约离障碍物10cm时即终点线前方，蜂鸣器关闭，小车停止<br>（3）设计实现：导入超声波测距模块，通过实际测量障碍物在小车10cm前方时message值，在测距大于10cm时，使用自动循迹函数循迹并响起蜂鸣器，测距小于10cm时，关闭蜂鸣器停止小车，</li><li>   蓝牙控制：<br>(1) 设计方式：小车内部安装有蓝牙设备，手机安装蓝牙串口通信助手。<br>(2) 设计功能：手机通过“蓝牙串口通信助手”软件给智能小车发送相关的遥控指令，控制小车按规定路径到达终点。<br>如 f：前进 b：后退 l：左转 r：右转 s：停止<br>(3) 设计实现：在代码中为不同指令编写函数，通过控制不同车轮的转动与静止以及转速实现。</li></ol><p><img src="https://b3logfile.com/siyuan/1610205759005/assets/image-20210417205509-1sgheao.png" alt="流程图"><br>代码</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> L_state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义状态，初始为蓝牙控制模式</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// put your setup code here, to run once:</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//初始化串口</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义接口类型oid loop()</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 左侧灰度传感器端口-16</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 右侧灰度传感器端口-17</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 右电机反转端口-9</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 右电机正转端口-10</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 左电机反转端口-5</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//左电机正转端口-6</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//蜂鸣器端口-11</span>    <span class="token comment" spellcheck="true">//输出清零</span>    <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 测距发射端口15,低电平</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//主函数</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> getstr <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读取HC-05蓝牙模块接收的字符</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>getstr<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token string">'l'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//左转</span>    <span class="token function">drive_left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">'r'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//右转</span>    <span class="token function">drive_right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">'f'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//前进</span>    <span class="token function">drive_forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//后退</span>    <span class="token function">drive_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//减速</span>    <span class="token function">speed_down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//暂停</span>    <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">'t'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//自动寻迹</span>    <span class="token function">_trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">'i'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//超声检测</span>    <span class="token function">_supersound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">//unknow command!</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自动寻迹函数</span><span class="token keyword">void</span> <span class="token function">_trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">digitalRead</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">digitalRead</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果右侧传感器探测到黑线，向右转</span>  <span class="token punctuation">{</span>    <span class="token function">turn_right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">digitalRead</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">digitalRead</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果左侧传感器探测到黑线，向左转</span>    <span class="token punctuation">{</span>      <span class="token function">turn_left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//两侧传感器均探测到黑线或白线，直行</span>    <span class="token punctuation">{</span>      <span class="token function">drive_forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//超声波测距函数</span><span class="token keyword">int</span> <span class="token function">ardublockUltrasonicSensorCodeAutoGeneratedReturnCM</span><span class="token punctuation">(</span><span class="token keyword">int</span> trigPin<span class="token punctuation">,</span> <span class="token keyword">int</span> echoPin<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> duration<span class="token punctuation">;</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>trigPin<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span>echoPin<span class="token punctuation">,</span> INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>trigPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delayMicroseconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>trigPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delayMicroseconds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>trigPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  duration <span class="token operator">=</span> <span class="token function">pulseIn</span><span class="token punctuation">(</span>echoPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  duration <span class="token operator">=</span> duration <span class="token operator">/</span> <span class="token number">58</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>duration <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>duration <span class="token operator">></span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span>  <span class="token keyword">return</span> duration<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回距离</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//超声检测</span><span class="token keyword">void</span> <span class="token function">_supersound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">ardublockUltrasonicSensorCodeAutoGeneratedReturnCM</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开启超声检测</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">ardublockUltrasonicSensorCodeAutoGeneratedReturnCM</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 检测前方有障碍物,message &lt;= 45</span>    <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">noTone</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//蜂鸣器无声</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 前方暂无障碍物，自动循迹前行</span>    <span class="token function">_trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">tone</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">440</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//蜂鸣器启动</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******小车行驶函数******/</span><span class="token comment" spellcheck="true">//小车左转</span><span class="token keyword">void</span> <span class="token function">drive_left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">220</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//右边轮子正转</span>  <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//小车右转</span><span class="token keyword">void</span> <span class="token function">drive_right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">220</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左边轮子正转</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 小车前进</span><span class="token keyword">void</span> <span class="token function">drive_forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 小车后退</span><span class="token keyword">void</span> <span class="token function">drive_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//左右轮反转</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 小车减速</span><span class="token keyword">void</span> <span class="token function">speed_down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 小车停止</span><span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 本科课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手工 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿巛的Hexo博客搭建</title>
      <link href="posts/a881.html"/>
      <url>posts/a881.html</url>
      
        <content type="html"><![CDATA[<ul><li>图片加载优化</li><li>滚动条美化</li><li>增加artitalk说说页面</li><li>博客优化</li><li>CDN加速</li><li>绑定域名(github、coding双绑定)</li><li>证书认证</li><li>滚动条美化</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/***** 滚动条 *****/</span><span class="token comment" spellcheck="true">/* 滚动条里面的小方块 */</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar-thumb</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FF2A68</span><span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span><span class="token number">45</span>deg,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">25%</span>,transparent <span class="token number">25%</span>,transparent <span class="token number">50%</span>,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">50%</span>,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">75%</span>,transparent <span class="token number">75%</span>,transparent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 滚动条的轨道 */</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar-track</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ffcaca</span>ff<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 滚动条整体部分 */</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="全站CDN加速"><a href="#全站CDN加速" class="headerlink" title="全站CDN加速"></a>全站CDN加速</h2><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科<br>用法：</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code></pre><h2 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h2><p>SEO（Search Engine Optimization）：汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。 ——百度百科<br>请参考这篇博文：<a href="https://blog.sky03.cn/posts/42790.html#toc-heading-18">https://blog.sky03.cn/posts/42790.html#toc-heading-18</a></p><h2 id="新建文章自动打开本地-Markdown-编辑器"><a href="#新建文章自动打开本地-Markdown-编辑器" class="headerlink" title="新建文章自动打开本地 Markdown 编辑器"></a>新建文章自动打开本地 Markdown 编辑器</h2><p>写新文章时，需要控制台执行 hexo new “文章名字”，这样就会在_posts 下生成一篇新文章，但需要手动打开，挺麻烦，只需要在站点根目录下新建 scripts 目录，然后再新建 auto_open.js，在文件填入一下内容</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Hexo 2.x 用户复制这段</span><span class="token comment" spellcheck="true">//hexo.on('new', function(path){</span>  <span class="token comment" spellcheck="true">//spawn('start  "markdown编辑器绝对路径.exe" ' + path);</span><span class="token comment" spellcheck="true">//});</span><span class="token comment" spellcheck="true">// Hexo 3 用户复制这段</span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//   spawn('start  "D:\Program Files\Typora\Typora.exe" ' + data.path); // Typora</span>  <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'start  "D:\\Program_Files\\Microsoft VS Code\\Code.exe" '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//VSCode</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Python Challenge Daily Record</title>
      <link href="posts/c134.html"/>
      <url>posts/c134.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.pythonchallenge.com/">Python Challenge</a>是首个谜语编程网站。挑战者需要连续挑战33个需要编程才能解开的谜题以锻炼自己的编程能力。</p><p>该网站建立于2005年，至今已经有三百多万位访客浏览并尝试解决该网站的谜题。</p><blockquote><p>Python Challenge is a game in which each level can be solved by a bit of (Python) programming.</p><p>The Python Challenge was written by Nadav Samet.</p><p>All levels can be solved by straightforward and very short scripts.(well, except of level 32.)</p><p>Python Challenge welcomes programmers of all languages. You will be able to solve most riddles in any programming language, but some of them will require Python.</p><p>Sometimes you’ll need extra modules. All can be downloaded for free from the internet.</p><p>It is just for fun - nothing waits for you at the end.</p><p>Keep the scripts you write - they might become useful.</p></blockquote><p>希望每天都能坚持刷题哈！🚩(然而并没有…)</p><h2 id="level-0-2020-10-28"><a href="#level-0-2020-10-28" class="headerlink" title="level_0_2020.10.28"></a>level_0_2020.10.28</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/def/0.html">http://www.pythonchallenge.com/pc/def/0.html</a><br><img src="https://i.loli.net/2020/11/14/HC8xwDEoN4hPyvn.png" alt="热身关"><br><strong>🖊Learned</strong><br>代码的强大<br>回顾一下乘方运算(这可能是python语法里最熟的之一了)</p><p><strong>🔑Solution</strong><br>就按照图片给的乘方算吧!</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! level 0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 274877906944</span></code></pre><h2 id="level-1-map-2020-10-27"><a href="#level-1-map-2020-10-27" class="headerlink" title="level_1_map_2020.10.27"></a>level_1_map_2020.10.27</h2><p>Link : <a href="http://www.pythonchallenge.com/pc/def/274877906944.html">http://www.pythonchallenge.com/pc/def/274877906944.html</a><br><img src="https://i.loli.net/2020/11/14/Y2EqrAsKB9lHtQi.png" alt="level_1"><br><strong>🖊Learned</strong><br>其实还可以用map方法，但是需要用if判断，不然空格括号也被翻译了。<br><code>ord(char)</code>:返回char的ASCII序列值<br><code>chr(num)</code>:返回ASCII码对应的字符</p><p><strong>🔑Solution</strong><br>根据所给图片提示,发现K和M,O和Q,E和G都差两个字母,所以应该就是做一个映射表,把给的字符翻译出来</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> stringorginal_str <span class="token operator">=</span> "g fmnc wms bgblr rpylqjyrc gr zw fylb<span class="token punctuation">.</span> rfyrq ufyr amknsrcpq ypc dmp<span class="token punctuation">.</span> bmgle \gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle<span class="token punctuation">.</span> sqgle qrpgle<span class="token punctuation">.</span>kyicrpylq<span class="token punctuation">(</span><span class="token punctuation">)</span> gq pcamkkclbcb<span class="token punctuation">.</span> lmu ynnjw ml rfc spj<span class="token punctuation">.</span>"trans <span class="token operator">=</span> str<span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">,</span>                      string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># string.ascii_lowercase = abcdefghijklmnopqrstuvwxyz</span><span class="token comment" spellcheck="true"># string.ascii_lowercase[2:] + string.ascii_lowercase[:2] cdefghijklmnopqrstuvwxyzab</span><span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>changed_str <span class="token operator">=</span> orginal_str<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>changed_str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that's why this text is so long.</span><span class="token comment" spellcheck="true"># using string.maketrans() is recommended. now apply on the url.</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'map'</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ocr</span></code></pre><h2 id="level-2-ocr-2020-10-28"><a href="#level-2-ocr-2020-10-28" class="headerlink" title="level_2_ocr_2020.10.28"></a>level_2_ocr_2020.10.28</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/def/ocr.html">http://www.pythonchallenge.com/pc/def/ocr.html</a><br><img src="https://i.loli.net/2020/11/14/RL6ucAMmJ3k4vNn.png" alt="level_2"><br><strong>🖊Learned</strong><br><strong>request和urllib的区别：</strong><br>我们在使用python爬虫时，需要模拟发起网络请求，主要用到的库有requests库和python内置的urllib库，一般建议使用requests，它是对urllib的再次封装，它们使用的主要区别：<br>requests可以直接构建常用的get和post请求并发起，urllib一般要先构建get或者post请求，然后再发起请求。</p><p><strong>正则：</strong></p><ul><li><code>requests.get(url).text</code> 获得html内容</li><li><code>re.search</code> 找到匹配的字符串，只匹配一次</li><li>获得需要处理的内容，\s可以匹配空格、Tab空白符）</li><li><code>match.group(n)</code>返回子字符串,注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。</li><li><code>.</code>匹配除了换行的任意字符,<code>\s</code>匹配任何Unicode空白字符（包括 [ \t\n\r\f\v] ,?对它前面的正则式匹配0到1次重复</li></ul><p><strong>🔑Solution</strong><br>查看页面源代码,发现后面有一堆乱七八糟的字符,我们的任务就是把里面参杂的字母给挑出来</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#  level2</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">from</span> collections <span class="token keyword">import</span> Counterhtml <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>    <span class="token string">"http://www.pythonchallenge.com/pc/def/ocr.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment" spellcheck="true"># 获取HTML文档</span>text <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"&lt;!--\n(%(.|\s)+)?\n-->"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'output/level_2_data.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span>final_text <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"[a-z]"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># findall 返回字符串列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>final_text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 或者直接对所有字符计数</span><span class="token comment" spellcheck="true"># final_text = re.search("&lt;!--\n%(.|\s)+", text).group()</span><span class="token comment" spellcheck="true"># q = Counter(final_text)  # 对里面的所有字符计数</span><span class="token comment" spellcheck="true"># print(q)</span><span class="token comment" spellcheck="true"># t = [i for i in q if q[i] == 1]  # 找出只出现一次的字符</span><span class="token comment" spellcheck="true"># print("".join(t))</span><span class="token comment" spellcheck="true"># 输出了equality</span><span class="token triple-quoted-string string">""" 另一种方法，使用了urllibimport urllib.request as urimport reurl = "http://www.pythonchallenge.com/pc/def/ocr.html"def main():    global url    response = ur.urlopen(url)    body = response.read()    print(body)    text = re.search("&lt;!--\n%(.|\s)+", body.decode())    dic = {}    # print(text.group(0))    for x in text.group(0):        if x not in dic:            dic[x] = 1        else:            dic[x] += 1    for k,v in dic.items():        print(k,v)    for i in dic:        if (dic[i] == 1 and 'a' &lt;= i &lt;= 'z'):            print(i, end='')if __name__ == '__main__':    main()"""</span></code></pre><h2 id="level-3-equality-2020-10-29"><a href="#level-3-equality-2020-10-29" class="headerlink" title="level 3_equality_2020.10.29"></a>level 3_equality_2020.10.29</h2><p>Link : <a href="http://www.pythonchallenge.com/pc/def/equality.html">http://www.pythonchallenge.com/pc/def/equality.html</a><br><img src="https://i.loli.net/2020/11/14/dXmwRVtqJkvEosO.png" alt="level_3"></p><p><strong>🖊Learned</strong></p><ul><li>findall用括号自动返回子串，当给出的正则表达式中带有多个括号时，列表的元素为多个字符串组成的tuple</li><li><code>re.findall(r'[^A-Z][A-Z]{3}([a-z])[A-Z]{3}[^A-Z]', text)</code>匹配时需要注意既然约定了3个大写字母,那外围就是小写字母了!</li></ul><p><strong>🔑Solution</strong><br>根据图片底下的文字提示,需要找到源代码中被三个大写字母包围的小写字母,然后把它们拼接在一起,为linklist<br>打开 <a href="http://www.pythonchallenge.com/pc/def/linkedlist.html">http://www.pythonchallenge.com/pc/def/linkedlist.html</a> 提示linkedlist.php<br>再打开 <a href="http://www.pythonchallenge.com/pc/def/linkedlist.php">http://www.pythonchallenge.com/pc/def/linkedlist.php</a></p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> rehtml <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.pythonchallenge.com/pc/def/equality.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>texttext <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">'&lt;!--\n((.|\s)+)?\n-->'</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'level_3_data.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span>results <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'[^A-Z][A-Z]{3}([a-z])[A-Z]{3}[^A-Z]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#linkedlist</span><span class="token comment" spellcheck="true"># ? 如果不括号起来，得到的结果会是</span><span class="token comment" spellcheck="true"># !['qIQNlQSLi', 'eOEKiVEYj', 'aZADnMCZq', 'bZUTkLYNg', 'uCNDeHSBj', 'kOIXdKBFh', 'dXJVlGZVm', 'gZAGiLQZx', 'vCJAsACFl', 'qKWGtIDCj']</span><span class="token comment" spellcheck="true"># 所以说findall用括号自动返回子串，当给出的正则表达式中带有多个括号时，列表的元素为多个字符串组成的tuple</span></code></pre><h2 id="level-4-linkedlist-2020-10-30"><a href="#level-4-linkedlist-2020-10-30" class="headerlink" title="level_4_linkedlist_2020.10.30"></a>level_4_linkedlist_2020.10.30</h2><p>Link :<a href="http://www.pythonchallenge.com/pc/def/linkedlist.php">http://www.pythonchallenge.com/pc/def/linkedlist.php</a><br><img src="https://i.loli.net/2020/11/14/1a8I2zg9c3CShUB.png" alt="level_4头图"><br><strong>🖊Learned</strong><br>要注意函数的局部变量和全局变量呀<br>request 尝试多次连接页面</p><pre class=" language-python"><code class="language-python">    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            <span class="token keyword">return</span> html        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>RequestException<span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p><strong>🔑Solution</strong><br>点击<a href="http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345">linkedlist.php?nothing=12345</a>这个链接,进入的页面显示and the next nothing is 44827,反复操作,发现这一关就是疯狂跳转网页</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">next_page</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> steps <span class="token comment" spellcheck="true"># 使得函数内的step和全局变量为一个变量</span>    html <span class="token operator">=</span> gethtml<span class="token punctuation">(</span>f<span class="token string">"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing={link}"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        hint <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">'.*\s(\d+)'</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> AttributeError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小心前面有诡计！"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'stop'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        steps <span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>steps<span class="token punctuation">,</span> hint<span class="token punctuation">)</span>        <span class="token keyword">return</span> hint<span class="token keyword">def</span> <span class="token function">gethtml</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    因为发现request经常会卡住无响应，所以封装了这个函数，用于重试    '''</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            <span class="token keyword">return</span> html        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>RequestException<span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        link <span class="token operator">=</span> next_page<span class="token punctuation">(</span>link<span class="token punctuation">)</span>        <span class="token keyword">if</span> link <span class="token operator">==</span> <span class="token string">'stop'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>steps <span class="token operator">=</span> <span class="token number">1</span>link <span class="token operator">=</span> <span class="token number">12345</span>run<span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Yes. Divide by two and keep going.</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'怕啥，那我就输入8022继续跑'</span><span class="token punctuation">)</span>run<span class="token punctuation">(</span><span class="token number">8022</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 16044//2=8022</span><span class="token comment" spellcheck="true"># 最终输出结果peak.html，打开http://www.pythonchallenge.com/pc/def/peak.html</span></code></pre><h2 id="level-5-peak-2020-10-31"><a href="#level-5-peak-2020-10-31" class="headerlink" title="level_5_peak_2020.10.31"></a>level_5_peak_2020.10.31</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/def/peak.html">http://www.pythonchallenge.com/pc/def/peak.html</a></p><p><img src="https://i.loli.net/2020/10/31/gGHW3n5NeKUZBY9.png" alt="level_5"></p><p><strong>🖊Learned</strong><br>爬虫</p><ul><li><code>requests.get(url).text</code> 是获得纯文本内容</li><li><code>requests.get(url).content</code>是二进制内容</li><li><code>urllib.urlopen(url)</code> 返回的是文件对象，用read()查看</li></ul><p>pickle<br><code>pickle</code>是python语言的一个标准模块，能对数据进行序列化和反序列化，序列化过程将文本信息转变为二进制数据流。反序列化便可以得到原始的数据。这样便于存储数据和发送数据</p><ul><li><code>pickle.dump() </code>序列化</li><li><code>pickle.load()</code> 反序列化方法</li></ul><p><strong>🔑Solution</strong><br>点击<a href="http://www.pythonchallenge.com/pc/def/banner.p">banner.p</a>，发现页面只有这样的长~条</p><pre><code>(lp0(lp1(S' 'p2I95tp3aa(lp4(g2I14tp5a(S'#'p6I5tp7a(g2I70tp8a(g6I5tp9a(g2I1tp10aa(lp11(g2I15tp12</code></pre><p>之前源代码提示”peak hell sounds familiar “,peak hell 的谐音是pickle，就用pickle处理数据，发现是一个二维数组，每行都以[(‘ ‘/‘#’, 数字)],这种形式存放内容单位, 而列表的每行数字相加都为95，猜测前面是打印的内容，后面跟着是打印的数量，最后竟然在终端输出为一个大大的“channel”!</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> pickle<span class="token comment" spellcheck="true"># 获取二进制的数据</span>content<span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.pythonchallenge.com/pc/def/banner.p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token comment" spellcheck="true"># print(content)</span>data <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 发现是一个二维数组，每行都以[(' '/'#', 数字)],这种形式存放内容单位</span><span class="token keyword">for</span> line <span class="token keyword">in</span> data<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 列表的每行相加都为95，猜测前面是打印的内容，后面跟着是打印的数量</span><span class="token keyword">for</span> line <span class="token keyword">in</span> data<span class="token punctuation">:</span>    output <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> line<span class="token punctuation">:</span>        output <span class="token operator">+=</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##得到channel的输出</span><span class="token comment" spellcheck="true">## http://www.pythonchallenge.com/pc/def/channel.html</span></code></pre><p><strong>Output</strong></p><pre><codecode></pre><h2 id="level-6-channel-2020-11-1"><a href="#level-6-channel-2020-11-1" class="headerlink" title="level_6_channel_2020.11.1"></a>level_6_channel_2020.11.1</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/def/channel.html">http://www.pythonchallenge.com/pc/def/channel.html</a></p><p><img src="https://i.loli.net/2020/11/14/Iu7NkRG8coOTPZs.jpg"><br><strong>🖊Learned</strong><br>python中如何打开压缩包<br><code>channel_zip = zipfile.ZipFile(zip_file, "r")</code>创建压缩包对象<br><code>channel_zip.open('readme.txt', 'r')</code> 打开压缩包里的某个文件</p><p><strong>🔑Solution</strong><br>查看源代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- &lt;-- zip --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>now there are pairs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>channel.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- The following has nothing to do with the riddle itself. I justthought it would be the right point to offer you to donate to thePython Challenge project. Any amount will be greatly appreciated.-thesamet--></span></code></pre> <!-- <-- zip --><p>如果把注释去掉就是html &lt;– zip，暗示把html改为zip</p><p>提示是zip，于是改url，发现可下载zip！（城会玩！）</p><p><img src="https://i.loli.net/2020/11/14/8RCsjhBYHVJLSTt.png"></p><p>查看压缩包，发现里面有一个readme.txt, 剩下的文件是一大坨以数字命名的txt,阅读readme, 发现这一关和linklist类似,谜底和peak关又类似, 最后答案为hockey</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> io<span class="token keyword">import</span> re<span class="token keyword">import</span> zipfile  <span class="token comment" spellcheck="true"># #导入对zip文件处理的模块 zipfile</span><span class="token comment" spellcheck="true">##获取二进制数据</span>zip_get <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>    <span class="token string">"http://www.pythonchallenge.com/pc/def/channel.zip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token comment" spellcheck="true"># StringIO和BytesIO是在内存中操作str和bytes的方法，使得和读写文件具有一致的接口</span>zip_file <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>zip_get<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#将函数返回的压缩包的二进制数据在内存中读</span>channel_zip <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>zip_file<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#以只读方式打开压缩包</span><span class="token keyword">print</span><span class="token punctuation">(</span>channel_zip<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#打印压缩包内的文件名列表</span><span class="token comment" spellcheck="true">#阅读 readme.txt</span><span class="token keyword">with</span> channel_zip<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'readme.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#文件里的内容是byte字节，所以用utf-8读取</span> <span class="token triple-quoted-string string">"""得到如下提示 welcome to my zipped list.# hint1: start from 90052# hint2: answer is inside the zip"""</span>file_name_next <span class="token operator">=</span> <span class="token string">"90052"</span>  <span class="token comment" spellcheck="true"># 阅读readme.txt的提示</span>comment <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true"># 阅读 46145.txt，说要collect the comments</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    file_comment <span class="token operator">=</span> channel_zip<span class="token punctuation">.</span>getinfo<span class="token punctuation">(</span>file_name_next <span class="token operator">+</span> <span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>comment<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>        <span class="token string">"utf-8"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 以utf-8方式读取压缩包内的各个文件</span>    <span class="token comment" spellcheck="true">#comment是个什么东东？？</span>    comment <span class="token operator">+=</span> file_comment    <span class="token keyword">with</span> channel_zip<span class="token punctuation">.</span>open<span class="token punctuation">(</span>file_name_next <span class="token operator">+</span> <span class="token string">".txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 阅读文件内容</span>        file_content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>file_content<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 尝试查找下一个线索，用正则查找数字</span>        file_name_next <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"\d+"</span><span class="token punctuation">,</span> file_content<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#没有则中断</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span>zip_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>Output</strong></p><pre><code>**********************************************************************************************************************************                                                            ****   OO    OO    XX      YYYY    GG    GG  EEEEEE NN      NN  ****   OO    OO  XXXXXX   YYYYYY   GG   GG   EEEEEE  NN    NN   ****   OO    OO XXX  XXX YYY   YY  GG GG     EE       NN  NN    ****   OOOOOOOO XX    XX YY        GGG       EEEEE     NNNN     ****   OOOOOOOO XX    XX YY        GGG       EEEEE      NN      ****   OO    OO XXX  XXX YYY   YY  GG GG     EE         NN      ****   OO    OO  XXXXXX   YYYYYY   GG   GG   EEEEEE     NN      ****   OO    OO    XX      YYYY    GG    GG  EEEEEE     NN      ****                                                            ****************************************************************** **************************************************************</code></pre><p>所谓的comment其实可以通过banzip查看,”空白”的注释应该是空格或者换行符</p><p><img src="https://i.loli.net/2020/11/15/Bb4tqPk7efEyZho.png" alt="使用banzip查看压缩包内容"></p><h2 id="level-7-oxygen-2020-11-2"><a href="#level-7-oxygen-2020-11-2" class="headerlink" title="level_7_oxygen_2020.11.2"></a>level_7_oxygen_2020.11.2</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/def/hockey.html">http://www.pythonchallenge.com/pc/def/hockey.html</a></p><p><strong>🖊Learned</strong><br>这是第一次遇到PIL,后面PIL就是老盆友咯!<br>img.getpixel((x,y)) 获得像素值<br>img.size 获得w和h</p><p><strong>🔑Solution</strong><br>it’s in the air. look at the letters. letter指的是hockey，说在空气中，空气那就是氮气、氧气、二氧化碳等东西，猜测是氧气oxygen。</p><p>于是打开<a href="http://www.pythonchallenge.com/pc/def/oxygen.html%EF%BC%8C%E5%8F%91%E7%8E%B0%E7%AC%AC%E4%B8%83%E5%85%B3%E8%B0%9C%E9%A2%98%EF%BC%8C%E5%8F%AA%E6%9C%89%E4%B8%80%E5%BC%A0%E5%9B%BE%EF%BC%8C%E4%B8%AD%E9%97%B4%E6%9C%89%E4%B8%AA%E7%81%B0%E5%B8%A6html%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B">http://www.pythonchallenge.com/pc/def/oxygen.html，发现第七关谜题，只有一张图，中间有个灰带html代码如下</a><br><img src="https://i.loli.net/2020/11/14/xiZeBmbaCh3L4oJ.png"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>smarty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oxygen.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>获取图片，对其进行处理</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> io<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image  <span class="token comment" spellcheck="true"># Python Imaging Library导入Image</span>url <span class="token operator">=</span> <span class="token string">'http://www.pythonchallenge.com/pc/def/oxygen.png'</span>image <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>contentimg_io <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>image<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#二进制数据放入内存</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img_io<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#打开图片，创建图片对象</span><span class="token comment" spellcheck="true"># img.show() # 显示图像，启动一个窗口</span><span class="token comment" spellcheck="true"># print(img.size)  #629,95</span><span class="token comment" spellcheck="true"># 灰色带大概在图片中间部位</span>width<span class="token punctuation">,</span> height <span class="token operator">=</span> img<span class="token punctuation">.</span>sizey <span class="token operator">=</span> height <span class="token operator">//</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true">##灰色带的大致区域设为y</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>mode<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查看图片像素模式，RGBA，带alpha通道</span><span class="token comment" spellcheck="true"># 获取中间条带的信息</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pixel<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#打印各个点的像素信息</span></code></pre><p>筛选出灰色带</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pixel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出结果：开头的115重复5次，中间的重复7次，最后重复8次</p><pre><code>115 115 115 115 115 109 109 109 109 109 109 109 97 97 97 97 97 97 97 114 114 114 114 114 114 114 116 116 116 116 116 116 116 32 32 32 32 32 32 32 103 103 103 103 103 103 103 117 117 117 117 117 117 117 121 121 121 121 121 121 121 44 44 44 44 44 44 44 32 32 32 32 32 32 32 121 121 121 121 121 121 121 111 111 111 111 111 111 111 117 117 117 117 117 117 117 ... 52 52 52 52 52 52 52 44 44 44 44 44 44 44 32 32 32 332 32 32 32 49 49 49 49 49 49 49 48 48 48 48 48 48 48 53 53 53 53 53 53 53 44 44 44 4 4 44 44 44 32 32 32 32 32 32 32 49 49 49 49 49 49 49 49 49 49 49 49 49 49 54 54 54 544 54 54 54 44 44 44 44 44 44 44 32 32 32 32 32 32 32 49 49 49 49 49 49 49 50 50 50 50 550 50 50 49 49 49 49 49 49 49 93 93 93 93 93 93 93 93</code></pre><p>把每个灰度值提取出来</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#尝试 给字符串去重, 但是发现会自动排序🤣丢失信息</span><span class="token triple-quoted-string string">""" grey_list = []for x in range(width):    pixel = img.getpixel((x, y))    if pixel[1] == pixel[0] and pixel[0] == pixel[2]:        grey_list.append(pixel[0])grey_set = set(grey_list) #用set去重print(grey_set) """</span><span class="token comment" spellcheck="true"># 每七个取一个数字</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pixel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>得到数字串</p><pre><code>115 109 97 114 116 32 103 117 121 44 32 121 111 117 32 109 97 100 101 32 105 116 46 32 116104 101 32 110 101 120 116 32 108 101 118 101 108 32 105 115 32 91 49 48 53 44 32 49 49 4844 32 49 49 54 44 32 49 48 49 44 32 49 48 51 44 32 49 49 52 44 32 49 48 53 44 32 49 49 54                         4432 49 50 49 93</code></pre><p>猜测把字符串用ASCII码翻译</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pixel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ! 得到 smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]</span></code></pre><p>最后的处理, 得到integrity</p><pre class=" language-python"><code class="language-python">hint <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">]</span><span class="token keyword">for</span> num <span class="token keyword">in</span> hint<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#integrity</span></code></pre><p><strong>💻Code</strong><br>完整代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> io<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image  <span class="token comment" spellcheck="true"># Python Imaging Library导入Image</span>url <span class="token operator">=</span> <span class="token string">'http://www.pythonchallenge.com/pc/def/oxygen.png'</span>image <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>contentimg_io <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>image<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 二进制数据放入内存</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img_io<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打开图片，创建图片对象</span><span class="token comment" spellcheck="true"># img.show() # 显示图像，启动一个窗口</span><span class="token comment" spellcheck="true"># print(img.size)  #629,95</span><span class="token comment" spellcheck="true"># 灰色带大概在图片中间部位</span>width<span class="token punctuation">,</span> height <span class="token operator">=</span> img<span class="token punctuation">.</span>sizey <span class="token operator">=</span> height <span class="token operator">//</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># 灰色带的大致区域设为y</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>mode<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查看图片像素模式，RGBA，带alpha通道</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pixel<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印各个点的像素信息</span><span class="token comment" spellcheck="true"># 得到各个点的RGBA值后，先对灰色像素带处理</span><span class="token comment" spellcheck="true"># 每七个取一个数字</span><span class="token comment" spellcheck="true"># ?猜测把字符串用ASCII码翻译</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pixel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> pixel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>pixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ! 得到 smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]</span>hint <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">]</span><span class="token keyword">for</span> num <span class="token keyword">in</span> hint<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># integrity</span></code></pre><h2 id="level-8-integrity-2020-11-3"><a href="#level-8-integrity-2020-11-3" class="headerlink" title="level 8_integrity_2020.11.3"></a>level 8_integrity_2020.11.3</h2><p>Link : <a href="http://www.pythonchallenge.com/pc/def/integrity.html">http://www.pythonchallenge.com/pc/def/integrity.html</a></p><p><strong>🖊Learned</strong></p><blockquote><p>bz2 模块是 bzip2 库的接口，用于压缩数据以进行存储或传输。提供了三种 API：</p><p>​    “一次性” 压缩 / 解压缩功能，用于操作大堆数据,<a href="https://docs.python.org/zh-cn/3/library/bz2.html#bz2.compress"><code>compress()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/bz2.html#bz2.decompress"><code>decompress()</code></a> 函数。<br>​            用于处理数据流的迭代压缩 / 解压缩对象,<a href="https://docs.python.org/zh-cn/3/library/bz2.html#bz2.BZ2Compressor"><code>BZ2Compressor</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/bz2.html#bz2.BZ2Decompressor"><code>BZ2Decompressor</code></a> 类。<br>​            类似文件的类，支持与未压缩文件一样的读写,<a href="https://docs.python.org/zh-cn/3/library/bz2.html#bz2.open"><code>open()</code></a> 函数和 <a href="https://docs.python.org/zh-cn/3/library/bz2.html#bz2.BZ2File"><code>BZ2File</code></a> 类。<br>————————————————</p></blockquote><p>然后总结一下bz2的用法，首先输入的解压数据得是二进制，<code>bz2.BZ2Decompressor()</code>是创建一个Decompressor，还是得用decompress来解压数据，不过这是逐步处理而不是一次性将数据全放入内存！</p><p>记住b’BZ..’二进制数据BZ开头就是用bz2压缩的,之后也会经常遇到</p><p><strong>🔑Solution</strong></p><p>查看源代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>working hard?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integrity.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>640<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>480<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">usemap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#notinsect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>notinsect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poly<span class="token punctuation">"</span></span>        <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>179,284,214,311,255,320,281,226,319,224,363,309,339,222,371,225,411,229,404,242,415,252,428,233,428,214,394,207,383,205,390,195,423,192,439,193,442,209,440,215,450,221,457,226,469,202,475,187,494,188,494,169,498,147,491,121,477,136,481,96,471,94,458,98,444,91,420,87,405,92,391,88,376,82,350,79,330,82,314,85,305,90,299,96,290,103,276,110,262,114,225,123,212,125,185,133,138,144,118,160,97,168,87,176,110,180,145,176,153,176,150,182,137,190,126,194,121,198,126,203,151,205,160,195,168,217,169,234,170,260,174,282<span class="token punctuation">"</span></span>        <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../return/good.html<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#303030<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Where is the missing link?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--un: 'BZh91AY&amp;SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00 \x00!\x9ah3M\x07&lt;]\xc9\x14\xe1BA\x06\xbe\x084'pw: 'BZh91AY&amp;SY\x94$|\x0e\x00\x00\x00\x81\x00\x03$ \x00!\x9ah3M\x13&lt;]\xc9\x14\xe1BBP\x91\xf08'--></span></code></pre><p>Where is the missing link? 链接缺失，area有属性的coords好像有问题，输入进去</p><p>难道有鬼？？？</p><pre class=" language-python"><code class="language-python">may_hint <span class="token operator">=</span> <span class="token string">"179,284,214,311,255,320,281,226,319,224,363,309,339,222,371,225,411,229,404,242,415,252,428,233,428,214,394,207,383,205,390,195,423,192,439,193,442,209,440,215,450,221,457,226,469,202,475,187,494,188,494,169,498,147,491,121,477,136,481,96,471,94,458,98,444,91,420,87,405,92,391,88,376,82,350,79,330,82,314,85,305,90,299,96,290,103,276,110,262,114,225,123,212,125,185,133,138,144,118,160,97,168,87,176,110,180,145,176,153,176,150,182,137,190,126,194,121,198,126,203,151,205,160,195,168,217,169,234,170,260,174,282"</span>mh_list <span class="token operator">=</span> may_hint<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mh_list<span class="token punctuation">)</span><span class="token keyword">for</span> num <span class="token keyword">in</span> mh_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""output result：it seems terrible!!!³ĜÖķÿŀęâĿàūĵœÞųáƛåƔòƟüƬéƬÖƊÏſÍƆÃƧÀƷÁƺÑƸ×ǂÝǉâǕÊǛ»Ǯ¼Ǯ©ǲǫyǝǡ`Ǘ^ǊbƼ[ƤWƕ\ƇXŸRŞOŊRĺUıZī`ĢgĔnĆrá{Ô}¹°°¶¾~ÂyÆ~ËÍ Ã¨Ù©êªĄ®Ě³"""</span></code></pre><p>好吧是我想多了，还有其他信息</p><p>点击超链接，看到让人输出用户名和密码</p><p><img src="https://i.loli.net/2020/11/14/mX5UOF8JTP6h3wW.png"></p><p>看到最后一段的注释好像就是对应的用户名un和密码pw，问题是这玩意怎么解！！！</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--un: 'BZh91AY&amp;SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00 \x00!\x9ah3M\x07&lt;]\xc9\x14\xe1BA\x06\xbe\x084'pw: 'BZh91AY&amp;SY\x94$|\x0e\x00\x00\x00\x81\x00\x03$ \x00!\x9ah3M\x13&lt;]\xc9\x14\xe1BBP\x91\xf08'--></span></code></pre><p>注意到开头BZ，查阅之后得知是bzip2压缩, 把un和pw字符串进行解压就可以得到答案了</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> bz2un <span class="token operator">=</span> b<span class="token string">'BZh91AY&amp;SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00 \x00!\x9ah3M\x07&lt;]\xc9\x14\xe1BA\x06\xbe\x084'</span>pw <span class="token operator">=</span> b<span class="token string">'BZh91AY&amp;SY\x94$|\x0e\x00\x00\x00\x81\x00\x03$ \x00!\x9ah3M\x13&lt;]\xc9\x14\xe1BBP\x91\xf08'</span><span class="token comment" spellcheck="true"># 1. 逐步处理</span><span class="token keyword">print</span><span class="token punctuation">(</span>bz2<span class="token punctuation">.</span>BZ2Decompressor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>un<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bz2<span class="token punctuation">.</span>BZ2Decompressor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>pw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 一次性处理</span><span class="token keyword">print</span> <span class="token punctuation">(</span>bz2<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>un<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>bz2<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>pw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output:</span><span class="token comment" spellcheck="true"># b'huge'</span><span class="token comment" spellcheck="true"># b'file'</span></code></pre><p>然后就输入用户名huge，密码file进入第九关啦！</p><p><a href="http://www.pythonchallenge.com/pc/return/good.html">点击进入下一关</a></p><h2 id="level-9-good-2020-11-4"><a href="#level-9-good-2020-11-4" class="headerlink" title="level_9_good_2020.11.4"></a>level_9_good_2020.11.4</h2><p>Link :<a href="http://www.pythonchallenge.com/pc/return/good.html">http://www.pythonchallenge.com/pc/return/good.html</a></p><p><strong>🖊Learned</strong></p><p>今天要学习的内容：</p><ul><li><a href="https://www.runoob.com/python/python-func-zip.html">Python zip() 函数</a>，经常用于列表两个两个处理</li><li><a href="https://zhuanlan.zhihu.com/p/59849190">Python Pillow 库 ImageDraw 绘制图像模块</a></li><li><a href="https://www.jianshu.com/p/171ce1d0656e">python Image</a></li></ul><p>PIL.Image.new(mode, size, color=0)</p><ul><li>mode 颜色模式，9种，分别为1(非黑即白)，L(灰色），P（8bit,调色板模式)，RGB，RGBA，CMYK，YCbCr，I，F。</li><li>size 大小（500，500）</li><li>color 默认黑色</li></ul><p>Web客户端授权验证</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用户名</span>user <span class="token operator">=</span> <span class="token string">"huge"</span><span class="token comment" spellcheck="true"># 密码</span>passwd <span class="token operator">=</span> <span class="token string">"file"</span><span class="token comment" spellcheck="true"># Web服务器 IP</span>url <span class="token operator">=</span> <span class="token string">"http://www.pythonchallenge.com/pc/return/good.html"</span><span class="token comment" spellcheck="true"># 1. 构建一个密码管理对象，用来保存需要处理的用户名和密码</span>passwdmgr <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPPasswordMgrWithDefaultRealm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 添加账户信息，第一个参数realm是与远程服务器相关的域信息，一般没人管它都是写None，后面三个参数分别是 Web服务器、用户名、密码</span>passwdmgr<span class="token punctuation">.</span>add_password<span class="token punctuation">(</span>None<span class="token punctuation">,</span> url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 构建一个HTTP基础用户名/密码验证的HTTPBasicAuthHandler处理器对象，参数是创建的密码管理对象</span>httpauth_handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPBasicAuthHandler<span class="token punctuation">(</span>passwdmgr<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4. 通过 build_opener()方法使用这些代理Handler对象，创建自定义opener对象，参数包括构建的 proxy_handler</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>httpauth_handler<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5. 可以选择通过install_opener()方法定义opener为全局opener</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6. 构建 Request对象</span>request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 7. 定义opener为全局opener后，可直接使用urlopen()发送请求</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 8. 打印响应内容</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>好像有点长~哇</p><p><strong>🔑Solution</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDraw<span class="token comment" spellcheck="true">#改天用正则表达式改下</span>first <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">146</span><span class="token punctuation">,</span> <span class="token number">399</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">,</span> <span class="token number">403</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">393</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">391</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">386</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">381</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">371</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>second <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">146</span><span class="token punctuation">,</span> <span class="token number">186</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#创建图片对象，背景为白色，模式为非黑即白</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>img<span class="token punctuation">)</span></code></pre><p>打印first</p><pre class=" language-python"><code class="language-python">draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>first<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> first<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://i.loli.net/2020/11/14/niUgVLqSEk8sT3x.png" width="50%"><p>打印second</p><pre class=" language-python"><code class="language-python">draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>second<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> second<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://i.loli.net/2020/11/14/XCBEkIuJLOo3pjH.png" width="50%;"><p>合并</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># draw.line(list(zip(first[0::2], first[1::2])))</span><span class="token comment" spellcheck="true"># draw.line(list(zip(second[0::2], second[1::2])))</span>draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>first<span class="token punctuation">)</span>draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>second<span class="token punctuation">)</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://i.loli.net/2020/11/14/nlBoNPd1jp3GEvc.png" width="50%"><p>换一种画图</p><pre class=" language-python"><code class="language-python">img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>img<span class="token punctuation">)</span>draw<span class="token punctuation">.</span>polygon<span class="token punctuation">(</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>first<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> first<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>draw<span class="token punctuation">.</span>polygon<span class="token punctuation">(</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>second<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> second<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201226131057-2020-12-26.png" width="50%"><p>所以答案就是bull啦</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDraw<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> re<span class="token comment" spellcheck="true"># 用户名</span>user <span class="token operator">=</span> <span class="token string">"huge"</span><span class="token comment" spellcheck="true"># 密码</span>passwd <span class="token operator">=</span> <span class="token string">"file"</span><span class="token comment" spellcheck="true"># Web服务器 IP</span>url <span class="token operator">=</span> <span class="token string">"http://www.pythonchallenge.com/pc/return/good.html"</span><span class="token comment" spellcheck="true"># 1. 构建一个密码管理对象，用来保存需要处理的用户名和密码</span>passwdmgr <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPPasswordMgrWithDefaultRealm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 添加账户信息，第一个参数realm是与远程服务器相关的域信息，一般没人管它都是写None，后面三个参数分别是 Web服务器、用户名、密码</span>passwdmgr<span class="token punctuation">.</span>add_password<span class="token punctuation">(</span>None<span class="token punctuation">,</span> url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 构建一个HTTP基础用户名/密码验证的HTTPBasicAuthHandler处理器对象，参数是创建的密码管理对象</span>httpauth_handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPBasicAuthHandler<span class="token punctuation">(</span>passwdmgr<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4. 通过 build_opener()方法使用这些代理Handler对象，创建自定义opener对象，参数包括构建的 proxy_handler</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>httpauth_handler<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5. 可以选择通过install_opener()方法定义opener为全局opener</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6. 构建 Request对象</span>request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 7. 定义opener为全局opener后，可直接使用urlopen()发送请求</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 8. 打印响应内容</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>first_str <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"first:\n((.|\s)+)\n\nsecond:"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>first_num <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">,</span> first_str<span class="token punctuation">)</span>first_num <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> first_num<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>first_num<span class="token punctuation">)</span>second_str <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">'second:\n((.|\s)+)'</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>second_num <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">,</span> second_str<span class="token punctuation">)</span>second_num <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> second_num<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>second_num<span class="token punctuation">)</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>img<span class="token punctuation">)</span>draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>first_num<span class="token punctuation">)</span>draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>second_num<span class="token punctuation">)</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># img = Image.new('RGB', (500, 500))</span><span class="token comment" spellcheck="true"># draw = ImageDraw.Draw(img)</span><span class="token comment" spellcheck="true"># draw.polygon(list(zip(first_num[0::2], first_num[1::2])), fill="white")</span><span class="token comment" spellcheck="true"># draw.polygon(list(zip(second_num[0::2], second_num[1::2])), fill="brown")</span><span class="token comment" spellcheck="true"># img.show()</span></code></pre><p><a href="http://www.pythonchallenge.com/pc/return/bull.html">点击进入下一关</a></p><h2 id="level-10-bull-2020-11-5"><a href="#level-10-bull-2020-11-5" class="headerlink" title="level_10_bull_2020.11.5"></a>level_10_bull_2020.11.5</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/return/bull.html">http://www.pythonchallenge.com/pc/return/bull.html</a><br><img src="https://i.loli.net/2020/11/14/g5mdp2QahHuecCU.png"></p><p><strong>🖊Learned</strong><br>这一关考察数学归纳还有编程功底, 计算每个字符出现的重复次数的方法需要学习一下, 虽然可以直接通过python的库实现<br><strong>🔑Solution</strong><br>点击图片，看到</p><pre><code>a = [1, 11, 21, 1211, 111221,...]</code></pre><p>所以这题的意思就是找规律</p><p>1，1个1→11</p><p>2个1→21</p><p>1个2一个1→1211</p><p>1个1，1个2，2个1→111221</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># len(a[30]) = ?</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 运行30次</span>    position <span class="token operator">=</span> <span class="token number">0</span>    repeats <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> position <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> repeats <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">and</span> a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>repeats<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">:</span>            repeats <span class="token operator">+=</span> <span class="token number">1</span>        b <span class="token operator">+=</span> str<span class="token punctuation">(</span>repeats <span class="token operator">-</span> position<span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span>        position <span class="token operator">=</span> repeats    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    b <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>得到5080</p><p>所以点击进入下一关： <a href="http://www.pythonchallenge.com/pc/return/5808.html">http://www.pythonchallenge.com/pc/return/5808.html</a></p><h2 id="level-11-5808-amp-pillow-2020-11-6"><a href="#level-11-5808-amp-pillow-2020-11-6" class="headerlink" title="level_11_5808&amp;pillow_2020.11.6"></a>level_11_5808&amp;pillow_2020.11.6</h2><p>翻译了一整天的药学作业的两篇论文，copy了两万多字，差点吐血🤮</p><p>好了，今晚还是继续挑战python吧</p><h3 id="🖊Learned的知识-pillow"><a href="#🖊Learned的知识-pillow" class="headerlink" title="🖊Learned的知识-pillow"></a>🖊Learned的知识-pillow</h3><p>感觉好几关都和图像处理有关欸！就稍微补一点pillow库的知识吧</p><p><a href="https://liam.page/2015/04/22/pil-tutorial-basic-usage/">PIL 简明教程 - 基本用法</a></p><p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320027235877860c87af5544f25a8deeb55141d60c5000#0">廖雪峰 - Pillow</a></p><p><a href="https://www.jianshu.com/p/e8d058767dfa#%E5%9B%BE%E5%83%8F%E9%80%9A%E9%81%93%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2%E8%A3%81%E5%89%AA">python PIL 图像处理</a></p><p>PIL：Python Imaging Library，已经是Python平台事实上的图像处理标准库了。PIL功能非常强大，但API却非常简单易用。但由于PIL仅支持到Python 2.7，加上年久失修，于是一群志愿者在PIL的基础上创建了兼容的版本，名字叫<a href="https://github.com/python-pillow/Pillow">Pillow</a>，支持最新Python 3.x，又加入了许多新特性，因此，我们可以直接安装使用Pillow。</p><pre class=" language-python"><code class="language-python"> pip install pillow</code></pre><h4 id="图像打开，保存"><a href="#图像打开，保存" class="headerlink" title="图像打开，保存"></a>图像打开，保存</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token comment" spellcheck="true"># 打开一个jpg图像文件，注意是当前路径:</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'test.jpg'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获得图像尺寸:</span>w<span class="token punctuation">,</span> h <span class="token operator">=</span> im<span class="token punctuation">.</span>size <span class="token comment" spellcheck="true"># 注意，比如尺寸是640，480，实际为0-639，0-479</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Original image size: %sx%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Resize image to: %sx%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>w<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> h<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把缩放后的图像用jpeg格式保存:</span>im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'thumbnail.jpg'</span><span class="token punctuation">,</span> <span class="token string">'jpeg'</span><span class="token punctuation">)</span></code></pre><h4 id="图片切片"><a href="#图片切片" class="headerlink" title="图片切片"></a>图片切片</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#box变量是一个四元组(左，上，右，下)。</span>box <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>bottom<span class="token punctuation">)</span><span class="token punctuation">)</span>region <span class="token operator">=</span> im<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>box<span class="token punctuation">)</span></code></pre><h4 id="图片缩放"><a href="#图片缩放" class="headerlink" title="图片缩放"></a>图片缩放</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 缩放到50%:</span>im<span class="token punctuation">.</span>thumbnail<span class="token punctuation">(</span><span class="token punctuation">(</span>w<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> h<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  thumbnail会保持宽高比</span><span class="token comment" spellcheck="true"># 如果要重设大小和比例可以用resize，Image.ANTIALIAS是高质量滤镜</span>img <span class="token operator">=</span> img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span></code></pre><h4 id="使用matplotlib-pyplot"><a href="#使用matplotlib-pyplot" class="headerlink" title="使用matplotlib.pyplot"></a>使用matplotlib.pyplot</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltimg <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'assets/cave.jpg'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#打开图像</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token string">"beauty"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'origin'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#box变量是一个四元组(左，上，右，下)。</span>box <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">260</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>roi <span class="token operator">=</span> img<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>box<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'roi'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>roi<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/11/14/7ISiFbVpC29mDTO.png"></p><h4 id="新建图像"><a href="#新建图像" class="headerlink" title="新建图像"></a>新建图像</h4><pre class=" language-python"><code class="language-python">odd_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a>高斯模糊</h4><pre class=" language-python"><code class="language-python">im2 <span class="token operator">=</span> im<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>BLUR<span class="token punctuation">)</span>im2<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'blur.jpg'</span><span class="token punctuation">,</span> <span class="token string">'jpeg'</span><span class="token punctuation">)</span></code></pre><h4 id="生成字母验证码图片"><a href="#生成字母验证码图片" class="headerlink" title="生成字母验证码图片"></a>生成字母验证码图片</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageDraw<span class="token punctuation">,</span> ImageFont<span class="token punctuation">,</span> ImageFilter<span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 随机字母:</span><span class="token keyword">def</span> <span class="token function">rndChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> chr<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 随机颜色1:</span><span class="token keyword">def</span> <span class="token function">rndColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 随机颜色2:</span><span class="token keyword">def</span> <span class="token function">rndColor2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 240 x 60:</span>width <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">4</span>height <span class="token operator">=</span> <span class="token number">60</span>image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建Font对象:</span>setfont <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'C:/windows/fonts/Arial.ttf'</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建Draw对象:</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 填充每个像素:</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        draw<span class="token punctuation">.</span>point<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span>rndColor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出文字:</span><span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rndChar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token operator">=</span>setfont<span class="token punctuation">,</span> fill<span class="token operator">=</span>rndColor2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 模糊:</span>image <span class="token operator">=</span> image<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>BLUR<span class="token punctuation">)</span>image<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'code.jpg'</span><span class="token punctuation">,</span> <span class="token string">'jpeg'</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/11/14/2yhrMLeH8QngKUC.jpg"></p><p><strong>🔑Solution</strong></p><p>查看网页源代码，odd even 提示很明显了，就是处理图片偶数和奇数像素点</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>odd even<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cave.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>640<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>480<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gold<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>把图保存到本地，如果把这张图放大，就会发现像素块是间隔排列的</p><p><img src="https://i.loli.net/2020/11/14/5qYKj2CQuB4MswU.png"></p><p><strong>💻Code</strong><br>于是就快乐的码代码啦！</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 本来想直接用requests但是这个网站http://www.pythonchallenge.com/pc/return/cave.jpg需要输入账号和密码才能访问</span><span class="token comment" spellcheck="true"># import requests</span><span class="token comment" spellcheck="true"># import io</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token comment" spellcheck="true"># 就暂时不知道如何处理，就把图片先直接保存到本地了</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>r<span class="token string">"assets/cave.jpg"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印图片格式，大小，颜色模式</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>format<span class="token punctuation">,</span> img<span class="token punctuation">.</span>size<span class="token punctuation">,</span> img<span class="token punctuation">.</span>mode<span class="token punctuation">)</span>width<span class="token punctuation">,</span> height <span class="token operator">=</span> img<span class="token punctuation">.</span>size<span class="token comment" spellcheck="true"># ? 为什么宽度和高度要除以2呢？</span>odd_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>even_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>origin_img_1 <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>origin_img_2 <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(img.getpixel((640, 480)))</span><span class="token comment" spellcheck="true"># 对xy都为奇数，xy都为偶数和其他都打印</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        color <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 然后再放入新像素里</span>            even_img<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token operator">=</span>color<span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            odd_img<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token operator">=</span>color<span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            origin_img_1<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token operator">=</span>color<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            origin_img_2<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token operator">=</span>color<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示图片</span>odd_img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>even_img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>origin_img_1<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>origin_img_2<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存图片</span>odd_img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'output\level_11_odd.png'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span>even_img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'output\level_11_even.png'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span>origin_img_1<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'output\level_11_origin_1.png'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span>origin_img_2<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'output\level_11_origin_2.png'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span></code></pre><p>得到的结果会发现odd和even是同一张图，而origin_1和origin_2也是同一张图，相当于是给的图片里放了4张图，两种图</p><p><img src="https://i.loli.net/2020/11/15/hOt3bEveocDF9Sj.png" alt="藏文字的图"></p><p><img src="https://i.loli.net/2020/11/14/2CImv51jyeGuRfM.png" alt="原图"></p><p>原理大概就是这样，用OneNote画的</p><p><img src="https://i.loli.net/2020/11/14/KqNaCX1TykZWD7I.png"></p><p>所以根据这个原理，其实尝试自己也可以搞一张图，但是效果并不好</p><p>注意藏文字的图文字一定要暗（如果背景黑的话），主要自己是直接用python画的，没有渐变，所以有点生硬，只好把颜色调的很暗才不那么明显。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDraw<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageFontimg <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>r<span class="token string">"assets/wallhaven-vg8mo8.jpg"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(w, h)</span><span class="token comment" spellcheck="true">###** 自己也在图片上写一个文字**###</span>draw_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">)</span><span class="token punctuation">)</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>draw_img<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#选择文字字体和大小</span>setFont <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'C:/windows/fonts/msyh.ttc'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#设置文字颜色</span>fillColor <span class="token operator">=</span> <span class="token string">"#030800"</span><span class="token comment" spellcheck="true">#写入文字</span>draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u<span class="token string">'傻逼'</span><span class="token punctuation">,</span> font<span class="token operator">=</span>setFont<span class="token punctuation">,</span> fill<span class="token operator">=</span>fillColor<span class="token punctuation">)</span>draw_img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">,</span> h <span class="token operator">=</span> img<span class="token punctuation">.</span>sizeoutput_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">960</span><span class="token punctuation">,</span> <span class="token number">540</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 缩放大小</span><span class="token comment" spellcheck="true"># img.thumbnail((320, 240)) 因为thumbnail会保持宽高比，实际大小为240*240</span>img <span class="token operator">=</span> img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">960</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">540</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 获取当前图片的像素</span>            color <span class="token operator">=</span> draw_img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 然后再放入新像素里</span>        <span class="token keyword">elif</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            color <span class="token operator">=</span> draw_img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            color <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        output_img<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token operator">=</span>color<span class="token punctuation">)</span>output_img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>output_img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"output/try.png"</span><span class="token punctuation">)</span>draw_img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"output/draw.png"</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/11/14/toJBKS8TMUdWv6s.png" alt="藏文字的图"></p><p><img src="https://i.loli.net/2020/11/14/248rDqWKUiw3TJp.png" alt="合成的图片"></p><p>所以点击进入下一关： <a href="http://www.pythonchallenge.com/pc/return/evil.html">http://www.pythonchallenge.com/pc/return/evil.html</a></p><h2 id="level-12-evil-2020-11-7"><a href="#level-12-evil-2020-11-7" class="headerlink" title="level_12_evil_2020.11.7"></a>level_12_evil_2020.11.7</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/return/evil.html">http://www.pythonchallenge.com/pc/return/evil.html</a></p><p><img src="https://i.loli.net/2020/11/14/bkphDU3lxgujKGN.png" alt="level_12_evil"></p><p><strong>🖊Learned</strong><br>data[i::5]每个五个取一个,得到的就是按顺序发的牌嘛!</p><p><strong>🔑Solution</strong></p><p>一开始看见这图片的像素有问题，试着用level11的方法处理的一下，果不其然——</p><p>这图是由4张一样图合并出来的，然而并没有什么用🤮</p><p>发现封面图片被命名为evil1，因为图片描述的是发牌，于是自然想到evil2，evil3，evil4<br><a href="http://www.pythonchallenge.com/pc/return/evil2.jpg">http://www.pythonchallenge.com/pc/return/evil2.jpg</a></p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201227090034-2020-12-27.png" alt="evil2，not jpg-_.gfx"><br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201227090127-2020-12-27.png" alt="evil3，no more evils..."></p><p>用edge打开<a href="http://www.pythonchallenge.com/pc/return/evil4.jpg">http://www.pythonchallenge.com/pc/return/evil4.jpg</a><br>得到的只是一个小方格<br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201227090510-2020-12-27.png" alt="evil4"><br>但是到了IE竟然就显示”Bert is evil! go back!” 这句话暂时不知道有什么用，留着！<br><img src="https://i.loli.net/2020/11/14/PSUwEAVN2fmOZrH.png"></p><p>目前所以关键线索在evil2身上，点击<a href="http://www.pythonchallenge.com/pc/return/evil2.gfx">http://www.pythonchallenge.com/pc/return/evil2.gfx</a><br>自动下载evil2.gfx文件，打开之后发现是二进制文件<br>根据封面图的牌被分成了五份，于是猜想也要将gfx文件分五份</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> io<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"assets/evil2.gfx"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> gfx<span class="token punctuation">:</span>    data <span class="token operator">=</span> gfx<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(data) 二进制数据</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    piece <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 为什么要每隔5个取一个呢？——dealing card 😶</span>    im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>piece<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 为的是看图片 </span>    <span class="token comment" spellcheck="true"># im.show() #发现预览第四张图有问题？OSError: image file is truncated 说图像文件被截断</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"output/level_12_%d.%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> im<span class="token punctuation">.</span>format<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> w<span class="token punctuation">:</span>        w<span class="token punctuation">.</span>write<span class="token punctuation">(</span>piece<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 写入文件</span></code></pre><p>最后得到四张图</p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/college-2020-12-27.jpg" height="500px"><p>所以答案就是disproportional啦<br><a href="http://www.pythonchallenge.com/pc/return/disproportional.html">点击进入下一关</a></p><h2 id="level-13-XML-RPC-2020-11-8"><a href="#level-13-XML-RPC-2020-11-8" class="headerlink" title="level_13_XML-RPC_2020.11.8"></a>level_13_XML-RPC_2020.11.8</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/return/disproportional.html">http://www.pythonchallenge.com/pc/return/disproportional.html</a></p><p>暂时决定虽然要坚持每天闯一关，但是就少废话了，花更多的时间记录python相关知识，学学pandas、matplotlib可能更理智点，没必要把解题过程详细码出来（反正基本都是参考别人的）</p><p><strong>🖊Learned</strong><br><strong>XML-RPC:</strong><br>XML-RPC（XML Remote Procedure Call，即XML远程方法调用），RPC是Remote Procedure Call的缩写，即远程方法调用，是一种在本地的机器上调用远端机器上的一个过程（方法）的技术，这个过程也被大家称为“分布式计算”，是为了提高各个分立机器的“互操作性”而发明出来的技术。</p><p>这种远程过程调用使用http作为传输协议，xml作为传送信息的编码格式。</p><p><strong>🔑Solution</strong><br>网页源代码，phone that <remote> evil，提示拨打给远程的evil</remote></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>call him<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disprop.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>640<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>480<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">usemap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#evil<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>evil<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>326,177,45<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../phonebook.php<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gold<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>    phone that <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remote</span> <span class="token punctuation">/></span></span> evil<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>打开phonebook.php，得到一个xml但是报错了</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>methodResponse</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fault</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>struct</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>member</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>faultCode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>int</span><span class="token punctuation">></span></span>105<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>int</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>member</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>member</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>faultString<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>XML error: Invalid document end at line 1, column 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>member</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>struct</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fault</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>methodResponse</span><span class="token punctuation">></span></span></code></pre><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> xmlrpc<span class="token punctuation">.</span>clienturl <span class="token operator">=</span> <span class="token string">"http://www.pythonchallenge.com/pc/phonebook.php"</span>conn <span class="token operator">=</span> xmlrpc<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ServerProxy<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>system<span class="token punctuation">.</span>listMethods<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['phone', 'system.listMethods', 'system.methodHelp', 'system.methodSignature', 'system.multicall', 'system.getCapabilities']</span><span class="token comment" spellcheck="true"># 看到方法中有phone</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>system<span class="token punctuation">.</span>methodHelp<span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Returns the phone of a person</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>system<span class="token punctuation">.</span>methodSignature<span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [['string', 'string']]</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>phone<span class="token punctuation">(</span><span class="token string">"Bert"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 还记得evil4.jpg的"Bert is evil! go back!"吗？</span><span class="token comment" spellcheck="true"># 最终结果555-ITALY</span></code></pre><p>点击进入下一关：  <a href="http://www.pythonchallenge.com/pc/return/italy.html">http://www.pythonchallenge.com/pc/return/italy.html</a></p><h2 id="level-14-italy-2020-11-9"><a href="#level-14-italy-2020-11-9" class="headerlink" title="level_14_italy_2020.11.9"></a>level_14_italy_2020.11.9</h2><p><img src="https://pic4.zhimg.com/80/v2-f5f7c5f6878289bfd2e95d5ab99826bd.png"></p><p><strong>🖊Learned</strong><br>这一关主要靠算法<br><code>directions = [(1,0),(0,1),(-1,0),(0,-1)]</code>这种方式真的巧妙<br>像这种绕圈的时候要把长度*2(l=100,d=200),这样通过step = d//2, d -= 1, 就可以得到螺线式走走法</p><p><strong>🔑Solution</strong><br>通过这图里的圈圈面包,猜测要把下面的wire.png也绕成一团</p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imageim <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'assets/wire.png'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (10000, 1),是一个长条</span>hint_im <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>directions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token comment" spellcheck="true"># x从-1开始,这样第一个点为(0,0)</span>d <span class="token operator">=</span> <span class="token number">200</span>  <span class="token comment" spellcheck="true"># 步长设为200，是为了出现(100，99，99，98),(98,97,97,96)...的螺线性走法</span><span class="token keyword">while</span> d <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 跑一圈</span>    <span class="token keyword">for</span> v <span class="token keyword">in</span> directions<span class="token punctuation">:</span>        steps <span class="token operator">=</span>d<span class="token operator">//</span><span class="token number">2</span>        <span class="token comment" spellcheck="true"># 跑一条直线</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> range<span class="token punctuation">(</span>steps<span class="token punctuation">)</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span>y <span class="token operator">=</span>x<span class="token operator">+</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token operator">+</span>v<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            hint_im<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            p <span class="token operator">+=</span> <span class="token number">1</span>        d <span class="token operator">-=</span> <span class="token number">1</span>hint_im<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>hint_im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'output/level_14_hint.img'</span><span class="token punctuation">)</span></code></pre><p>得到猫图<br><img src="https://pic4.zhimg.com/80/v2-33a36f418680e298e730f27701b0b200.png" alt="cat"></p><p>另外如果把d改为100的话，会得到一张蛮有意思的图</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imageim <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'assets/wire.png'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (10000, 1)</span>hint_im <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delta <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>d <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment" spellcheck="true"># 如果直接设置为100，步长就成了100，99，98，97...</span><span class="token keyword">while</span> d <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 跑一圈</span>    <span class="token keyword">for</span> v <span class="token keyword">in</span> delta<span class="token punctuation">:</span>        steps <span class="token operator">=</span> d        <span class="token comment" spellcheck="true"># 跑一条直线</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> range<span class="token punctuation">(</span>steps<span class="token punctuation">)</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token operator">+</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">+</span>v<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            hint_im<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            p <span class="token operator">+=</span> <span class="token number">1</span>        d <span class="token operator">-=</span> <span class="token number">1</span>hint_im<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic4.zhimg.com/80/v2-0e9fa3f9c977e3ed693b4f080e58bf65.png"><br>于是点击：<a href="http://www.pythonchallenge.com/pc/return/cat.html">http://www.pythonchallenge.com/pc/return/cat.html</a><br>得到hint: and its name is uzi. you’ll hear from him later.<br>再点击：<a href="http://www.pythonchallenge.com/pc/return/uzi.html">http://www.pythonchallenge.com/pc/return/uzi.html</a><br>进入level 15</p><h2 id="level-15-datetime-2020-11-10"><a href="#level-15-datetime-2020-11-10" class="headerlink" title="level_15_datetime _2020.11.10"></a>level_15_datetime _2020.11.10</h2><p><img src="https://pic4.zhimg.com/80/v2-0f8c17a3b2936d56ed46e504409fb451.png"></p><p><strong>🖊Learned</strong><br>datetime<br><code>d = datetime.date(year, 1, 26)</code>创建一个日期对象<br><code>d.isoweeklevel()</code> 返回今天是星期几,Monlevel==1,Sunlevel==7</p><p>calendar判断闰年</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断闰年</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>isleap<span class="token punctuation">(</span><span class="token number">1006</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 结果为 False</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>isleap<span class="token punctuation">(</span><span class="token number">1016</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 结果为 True</span></code></pre><p><strong>🔑Solution</strong></p><blockquote><p>Combinated with all hints,so we are looking for a person, who’s related to that particular date, and he is not the youngest…<br>The key is to find what year it was.</p></blockquote><p>于是这一关就是要找到正确的日期,再通过日期来推测那个人是谁<br>日历上显示的是1__6年1月26日为星期一,再看图片下方显示二月有29天,所以这一年就还闰年,所以就可以通过遍历找到符合条件的年份</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">import</span> calendar<span class="token comment" spellcheck="true"># 判断闰年</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>isleap<span class="token punctuation">(</span><span class="token number">1006</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 结果为 False</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>isleap<span class="token punctuation">(</span><span class="token number">1016</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 结果为 True</span><span class="token comment" spellcheck="true"># 所以从1016年开始每20年检查一次</span><span class="token keyword">for</span> year <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1016</span><span class="token punctuation">,</span> <span class="token number">1996</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    d <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span>isoweeklevel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># return level of the week, where Monlevel==1,Sunlevel==7</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#####output###</span><span class="token triple-quoted-string string">"""11761356157617561976"""</span><span class="token comment" spellcheck="true"># hint: &lt;!-- he ain't the youngest, he is the second --></span><span class="token comment" spellcheck="true"># so we choose 1756</span><span class="token comment" spellcheck="true"># hint: &lt;!-- todo: buy flowers for tomorrow --></span><span class="token comment" spellcheck="true"># so we look at 1756-1-27</span></code></pre><p>search the Internet,it turns out that level is the birthlevel of Morzart<br><img src="https://pic4.zhimg.com/80/v2-ad0333fa1bed4567f48c101b475c72c8.png"></p><p>so click this <a href="http://www.pythonchallenge.com/pc/return/mozart.html">link</a>, to level 16</p><p>PS: I just found writing in Engslish is much more convinent for markdown</p><h2 id="level-16-ImageChops-amp-numpy-roll-2020-11-11"><a href="#level-16-ImageChops-amp-numpy-roll-2020-11-11" class="headerlink" title="level_16_ImageChops &amp; numpy.roll_2020.11.11"></a>level_16_ImageChops &amp; numpy.roll_2020.11.11</h2><p>Link : <a href="http://www.pythonchallenge.com/pc/return/mozart.html">http://www.pythonchallenge.com/pc/return/mozart.html</a></p><p>今天双十一啦，可惜我啥也没买，继续刷题吧！<br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201229213540-2020-12-29.png"></p><p><strong>🖊Learned</strong><br>今日所学<br>ImageChops 模块包含许多算术图像操作，称为通道操作（“chops”）。这些可以用于各种用途，包括特殊效果、图像合成、算法绘制等</p><ul><li>Image.histogram()返回图像的直方图。直方图作为像素计数列表返回，它的x轴是像素值，y轴是对应的像素在图像里的数量。</li><li>PIL.ImageChops.offset(image, xoffset, yoffset=None),返回数据被给定距离偏移的图像的副本。数据环绕边缘。如果 yoffset 如果省略，则假定等于 X偏移.</li><li>Image.paste(im,box)将一张图粘贴到另一张图像上。变量box或者是一个给定左上角的2元组，或者是定义了左，上，右和下像素坐标的4元组，或者为空（与（0，0）一样）。如果给定4元组，被粘贴的图像的尺寸必须与区域尺寸一样。</li></ul><p>NumPy 是一个主要用于数组计算的数学库</p><ul><li>np.array(image),image类 转 numpy，一行一行的用数字代表各个像素</li><li>tolist()将数组或者矩阵转换成列表</li><li>list.index(),从列表中找出某个值第一个匹配项的索引位置。</li><li>numpy.roll(a,&nbsp;shift,&nbsp;axis=None)沿着给定轴滚动数组元素。超出最后位置的元素将会滚动到第一个位置。<pre class=" language-python"><code class="language-python">a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>roll<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [ 2  3  4  5  6  7  8  9 10  0  1]</span></code></pre></li></ul><p><strong>🔑Solution</strong><br>方法一：使用ImageChops.offset()对图像进行偏移</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageChops<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># NumPy 是一个主要用于数组计算的数学库</span><span class="token comment" spellcheck="true"># ImageChops 模块包含许多算术图像操作，称为通道操作（“chops”）。这些可以用于各种用途，包括特殊效果、图像合成、算法绘制等</span>image <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"assets/mozart.gif"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成图像像素直方图，找到频数正好为image.height的整倍的，因为从图中可以看到pink每行都出现了</span><span class="token comment" spellcheck="true"># 我们的任务就是把每行像素都移动，让pink组成一整块</span>frequency <span class="token operator">=</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> image<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> image<span class="token punctuation">.</span>height <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>frequency<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [2400]</span><span class="token keyword">print</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">2400</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回频次为2400的x轴坐标195，即pink颜色</span><span class="token comment" spellcheck="true"># 查看是不是这个颜色</span>tmp <span class="token operator">=</span> image<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>tmp<span class="token punctuation">.</span>frombytes<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">195</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>height <span class="token operator">*</span> tmp<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tmp<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 对图片每行偏移</span><span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#(left, upper, right, lower)-tuple.</span>    box <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span>    row <span class="token operator">=</span> image<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>box<span class="token punctuation">)</span>    bytes_data <span class="token operator">=</span> row<span class="token punctuation">.</span>tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> bytes_data<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">195</span><span class="token punctuation">)</span>    row <span class="token operator">=</span> ImageChops<span class="token punctuation">.</span>offset<span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token operator">-</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># offset 偏移量</span>    image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>row<span class="token punctuation">,</span> box<span class="token punctuation">)</span>image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"output/level_16_mozart.gif_1.gif"</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201229213738-2020-12-29.png"><br>方法二：使用numpy.roll对图片进行偏移<br>不知道为什么得到的是灰色的？？？</p><pre class=" language-python"><code class="language-python">image <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"assets/mozart.gif"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>mode<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 模式“P”为8位彩色图像，它的每个像素用8个bit表示，其对应的彩色值是按照调色板查询出来的。</span><span class="token comment" spellcheck="true"># roll th image</span>shifted <span class="token operator">=</span> <span class="token punctuation">[</span>bytes<span class="token punctuation">(</span>np<span class="token punctuation">.</span>roll<span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token operator">-</span>row<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">195</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># print(shifted)</span><span class="token comment" spellcheck="true"># 根据二进制数据创建图像</span>Image<span class="token punctuation">.</span>frombytes<span class="token punctuation">(</span><span class="token string">"P"</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>size<span class="token punctuation">,</span> b<span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>shifted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"output/level_16_mozart.gif_2"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># romance</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201229213813-2020-12-29.png"></p><p>click to next level: <a href="http://www.pythonchallenge.com/pc/return/romance.html">http://www.pythonchallenge.com/pc/return/romance.html</a></p><h2 id="level-17-cookie-amp-urllib-parse-2020-11-12"><a href="#level-17-cookie-amp-urllib-parse-2020-11-12" class="headerlink" title="level_17_cookie &amp; urllib.parse_2020.11.12"></a>level_17_cookie &amp; urllib.parse_2020.11.12</h2><p>这一关基本是爬虫+复习关了，好难，直接copy代码了🤢<br>参考资料：</p><ul><li><a href="https://www.jianshu.com/p/ea3ae84022e5">Python Challenge[17]-Recgat简书</a></li><li><a href="http://kwangka.github.io/2015/01/31/pc17/">Python Challenge (Level 17)曾梦想仗剑走天涯</a></li><li><a href="https://www.hackingnote.com/en/python-challenge-solutions/level-17">hackingnote</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201229214859-2020-12-29.png"><br><strong>🖊Learned</strong><br>cookie和获取cookie<br><a href="https://zhuanlan.zhihu.com/p/22396872">Cookie 是什么</a><br><a href="https://blog.csdn.net/MuWinter/article/details/75313476">如何查看cookies</a></p><p>Cookie 是浏览器访问服务器后，服务器传给浏览器的一段数据。浏览器需要保存这段数据，不得轻易删除。<br>第一个作用是识别用户身份。<br>第二个作用是记录历史。<br><strong>如何获取cookie</strong></p><ul><li>使用httplib2库，cookie信息包含在httplib2.Http().request()返回的Response实例中。<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> httplib2<span class="token punctuation">,</span>reh <span class="token operator">=</span> httplib2<span class="token punctuation">.</span>Http<span class="token punctuation">(</span><span class="token string">'.Cache'</span><span class="token punctuation">)</span>url<span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token string">'http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing='</span><span class="token punctuation">,</span> <span class="token string">'12345'</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'info=(.*)'</span><span class="token punctuation">)</span>info <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">while</span> num<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>resp<span class="token punctuation">,</span>content<span class="token operator">=</span>h<span class="token punctuation">.</span>request<span class="token punctuation">(</span>url<span class="token operator">+</span>num<span class="token punctuation">)</span>info <span class="token operator">+=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>resp<span class="token punctuation">[</span><span class="token string">'set-cookie'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>num <span class="token operator">=</span> content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span></code></pre></li><li>使用urllib库获取cookie信息<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requesth <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>cookie <span class="token operator">=</span> h<span class="token punctuation">.</span>getheader<span class="token punctuation">(</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">)</span></code></pre></li></ul><p><strong>设置cookie</strong><br>Request：模拟浏览器发送GET请求（GET-从指定的资源请求数据。），就需要使用Request对象，通过往Request对象添加HTTP头，我们就可以把请求伪装成浏览器</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span> urlopen<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote_plusreq <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Cookie"</span><span class="token punctuation">:</span> <span class="token string">"info="</span> <span class="token operator">+</span> quote_plus<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>urllib.parse</strong></p><p>parse是解析的意思，urllib.parse提供了一些辅助方法，用于对url进行编码、解码。url中是不能出现一些特殊的符号的，有些符号有特殊的用途。我们知道以get方式提交数据的时候，会在url中添加key=value这样的字符串，所以在value中是不允许有’=’，因此要对其进行编码；与此同时服务器接收到这些参数的时候，要进行解码，还原成原始的数据。<br>quote_plus：这个方法是将一些特殊的字符串转换为固定的一些符号字母数字组合</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parsed <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">'a&amp;b/c'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#未编码斜线</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a%26b/c</span>d1 <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote_plus<span class="token punctuation">(</span><span class="token string">'a&amp;b/c'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#编码了斜线</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a%26b%2Fc</span></code></pre><p>unquote/unquote_plus</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token operator">>></span><span class="token operator">></span> parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span><span class="token string">'1+2'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#不解码加号</span><span class="token string">'1+2'</span><span class="token operator">>></span><span class="token operator">></span> parse<span class="token punctuation">.</span>unquote_plus<span class="token punctuation">(</span><span class="token string">'1+2'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#把加号解码为空格</span><span class="token string">'1 2'</span></code></pre><p>urlencode，将一些传入的元素使用&amp;串联起来，效果如下：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"appid"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"mch_id"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"body"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"out_trade_no"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"total_fee"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"spbill_create_ip"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"notify_url"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"trade_type"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"nonce_str"</span><span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token string">'appid=1&amp;mch_id=1&amp;body=1&amp;out_trade_no=1&amp;total_fee=1&amp;spbill_create_ip=1&amp;notify_url=1&amp;trade_type=1&amp;nonce_str=1'</span></code></pre><p>经urllib.parse.unquote_to_bytes(string)方法转换返回的对象可以正常解压，该方法功能是将%xx转义替换为其等效的single-octet字符（unquote_plus()和unquote()是单个字符），以字节对象返回。不像unquote_plus()能将+转为空格，unquote_to_bytes()需要手动替换。</p><p><strong>🔑Solution</strong><br>refer to level 4 <a href="http://www.pythonchallenge.com/pc/def/linkedlist.php">http://www.pythonchallenge.com/pc/def/linkedlist.php</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> unquote_plus<span class="token punctuation">,</span>unquote_to_bytes<span class="token keyword">import</span> re<span class="token punctuation">,</span> bz2<span class="token keyword">def</span> <span class="token function">geth</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    i<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            h <span class="token operator">=</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> h        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            i <span class="token operator">+=</span><span class="token number">1</span>num <span class="token operator">=</span> <span class="token string">'12345'</span>info <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    h <span class="token operator">=</span> geth<span class="token punctuation">(</span><span class="token string">'http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing='</span><span class="token operator">+</span>num<span class="token punctuation">)</span>    raw <span class="token operator">=</span> h<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span>    cookie <span class="token operator">=</span>h<span class="token punctuation">.</span>getheader<span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(cookie)</span>    info <span class="token operator">+=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'info=(.*?);'</span><span class="token punctuation">,</span>cookie<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'the next busynothing is (\d+)'</span><span class="token punctuation">,</span>raw<span class="token punctuation">)</span>    <span class="token keyword">if</span> match <span class="token operator">==</span>None<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        num <span class="token operator">=</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(info)</span><span class="token triple-quoted-string string">"""BZh91AY%26SY%94%3A%E2I%00%00%21%19%80P%81%11%00%AFg%9E%A0+%00hE%3DM%B5%23%D0%D4%D1%E2%8D%06%A9%FA%26S%D4%D3%21%A1%EAi7h%9B%9A%2B%BF%60%22%C5WX%E1%ADL%80%E8V%3C%C6%A8%DBH%2632%18%A8x%01%08%21%8DS%0B%C8%AF%96KO%CA2%B0%F1%BD%1Du%A0%86%05%92s%B0%92%C4Bc%F1w%24S%85%09%09C%AE%24%90"""</span>res <span class="token operator">=</span> unquote_to_bytes<span class="token punctuation">(</span>info<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 暂时不知道为什么要把加变成空格，不过info确实有一个+啦</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bz2<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># is it the 26th already? call his father and inform him that "the flowers are on their way". he'll understand.</span><span class="token comment" spellcheck="true"># 提示找Mozart父亲Leopold"</span></code></pre><p>提示到第13关，继续打电话</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># refer to level 13</span><span class="token keyword">from</span> xmlrpc<span class="token punctuation">.</span>client <span class="token keyword">import</span> ServerProxyconn <span class="token operator">=</span> ServerProxy<span class="token punctuation">(</span><span class="token string">"http://www.pythonchallenge.com/pc/phonebook.php"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>phone<span class="token punctuation">(</span><span class="token string">"Leopold"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output 555-VIOLIN</span><span class="token comment" spellcheck="true"># http://www.pythonchallenge.com/pc/return/violin.html</span><span class="token comment" spellcheck="true"># no! i mean yes! but ../stuff/violin.php.</span></code></pre><p>点开<a href="http://www.pythonchallenge.com/pc/stuff/violin.php">violin.php</a>，根据前面的提示，告诉他爹”the flowers are on their way”</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span>urlopen<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote_plus<span class="token comment" spellcheck="true">#is it the 26th already?</span><span class="token comment" spellcheck="true"># call his father and inform him that "the flowers are on their way". he'll understand.</span>url <span class="token operator">=</span> <span class="token string">"http://www.pythonchallenge.com/pc/stuff/violin.php"</span>msg <span class="token operator">=</span> <span class="token string">"the flowers are on their way"</span>req <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Cookie"</span><span class="token punctuation">:</span> <span class="token string">"info="</span> <span class="token operator">+</span> quote_plus<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>output</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>it's me. what do you want?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leopold.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>oh well, don't you dare to forget the balloons.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="level-18-ballons-2020-11-13"><a href="#level-18-ballons-2020-11-13" class="headerlink" title="level_18_ballons_2020.11.13"></a>level_18_ballons_2020.11.13</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/return/balloons.html">http://www.pythonchallenge.com/pc/return/balloons.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201229215541-2020-12-29.png"></p><p><strong>🖊Learned</strong><br>1.区分两个数据的异同difflib.Differ().compare(a, b)<br><code>difflib.Differ().compare(a, b)</code> will generate<br>lines start with +: appear in a not in b<br>lines start with -: appear in b not in a<br>others: appear in both</p><p>2.bytes()&amp;int(str,16)<br>16进制形式的字符如何转成字节码，用bytes()<br>首先要先用int(str,16)将字符列表转化为10进制的数字列表，才能用bytes()</p><p>3.list [:53]<br>忘了，列表切片是左开右闭了……😳</p><pre class=" language-python"><code class="language-python">bytes<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">158</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">219</span><span class="token punctuation">,</span> <span class="token number">243</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># → b'J\x9e\xc6\x05\n\xb9\x8d\xdb\xf3P\x8dJdp\x9ay1\x95'</span></code></pre><p><strong>🔑Solution</strong><br>go to <a href="http://www.pythonchallenge.com/pc/return/bright.html">http://www.pythonchallenge.com/pc/return/bright.html</a> , then show </p><blockquote><p>ness<br>so go to <a href="http://www.pythonchallenge.com/pc/return/brightness.html">http://www.pythonchallenge.com/pc/return/brightness.html</a><br>maybe consider deltas.gz </p></blockquote><p>下载delta.gz,打开delta.txt，明显看到两栏很相似的信息，前面提示这一关要tell the difference，对于这两栏的信息，我们要用到difflib来比较它们，然后将得到的信息decode，输出为三张图片</p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201229215755-2020-12-29.png"></p><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gzip<span class="token keyword">import</span> difflibdata <span class="token operator">=</span> gzip<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"assets/deltas.gz"</span><span class="token punctuation">)</span>d1<span class="token punctuation">,</span> d2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> line <span class="token keyword">in</span> data<span class="token punctuation">:</span>    d1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 选择53是列表左开右闭，记得每一行需要手动加\n</span>    d2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 因为后面自带\n</span>compare <span class="token operator">=</span> difflib<span class="token punctuation">.</span>Differ<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>compare<span class="token punctuation">(</span>d1<span class="token punctuation">,</span> d2<span class="token punctuation">)</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"output/level_18_f.png"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"output/level_18_f1.png"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>f2 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"output/level_18_f2.png"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> compare<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print(line)</span>    <span class="token comment" spellcheck="true"># print([int(hex, 16) for hex in line[2:].strip().split(" ") if hex])</span>    bs <span class="token operator">=</span> bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>int<span class="token punctuation">(</span>hex<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">for</span> hex <span class="token keyword">in</span> line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token keyword">if</span> hex<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># appear in d1 not in d2</span>    <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>        f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span>bs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># appear in d2 not in d1</span>    <span class="token keyword">elif</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>        f2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>bs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># appear in both</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>bs<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>f2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic4.zhimg.com/80/v2-52ca5bb9b74c6c1a7d80ee1d58d94be0.png" alt="f"></p><p><img src="https://pic4.zhimg.com/80/v2-4df5f46e8ff0e6af8a5f8b355c32574f.png" alt="f1"></p><p><img src="https://pic4.zhimg.com/80/v2-b2d6a66e7468e84f9e2fc1c7ce145539.png" alt="f2"></p><p>so next level: <a href="http://www.pythonchallenge.com/pc/hex/bin.html">http://www.pythonchallenge.com/pc/hex/bin.html</a></p><h2 id="level-19-bin-2020-11-14"><a href="#level-19-bin-2020-11-14" class="headerlink" title="level_19_bin_2020.11.14"></a>level_19_bin_2020.11.14</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/hex/bin.html">http://www.pythonchallenge.com/pc/hex/bin.html</a><br>username: butter<br>password: fly</p><p><strong>🖊Learned</strong><br><a href="https://www.cnblogs.com/yongdaimi/p/10722355.html">音频属性相关：声道、采样率、采样位数、样本格式、比特率</a></p><blockquote><p>WAV有三个重要的参数：声道数、取样频率和量化位数。<br>声道数：可以是单声道或者是双声道<br>采样频率：一秒内对声音信号的采集次数，常用的有8kHz, 16kHz, 32kHz, 48kHz, 11.025kHz, 22.05kHz, 44.1kHz<br>量化位数：用多少bit表达一次采样所采集的数据，通常有8bit、16bit、24bit和32bit等几种<br>Wave_read.getnchannels()<br>返回声道数量（1 为单声道，2 为立体声）</p><p>Wave_read.getsampwidth()<br>返回采样字节长度。</p><p>Wave_read.getframerate()<br>返回采样频率。</p><p>Wave_read.getnframes()<br>返回音频总帧数。<br>Wave_read.readframes(n)<br>读取并返回以 bytes 对象表示的最多 n 帧音频。</p></blockquote><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> wave<span class="token comment" spellcheck="true"># 将view-source:http://www.pythonchallenge.com/pc/hex/bin.html的base64编码复制为文本处理</span>message <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"assets/level_19.txt"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>open<span class="token punctuation">(</span><span class="token string">'output/level_19_indian.wav'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>decodebytes<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>得到的wav打开之后听到sorry……<br>打开<a href="http://www.pythonchallenge.com/pc/hex/sorry.html">http://www.pythonchallenge.com/pc/hex/sorry.html</a><br>得到- “what are you apologizing for?”<br>回头看网页显示的地图，陆地的颜色明显和海洋的颜色颠倒了，提示将音频的帧颠倒</p><pre class=" language-python"><code class="language-python">w <span class="token operator">=</span> wave<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'output/level_19_indian.wav'</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>h <span class="token operator">=</span> wave<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'output/level_19_result.wav'</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>getnchannels<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>getsampwidth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>getframerate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span>setnchannels<span class="token punctuation">(</span>w<span class="token punctuation">.</span>getnchannels<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span>setsampwidth<span class="token punctuation">(</span>w<span class="token punctuation">.</span>getsampwidth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span>setframerate<span class="token punctuation">(</span>w<span class="token punctuation">.</span>getframerate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>frames <span class="token operator">=</span> w<span class="token punctuation">.</span>readframes<span class="token punctuation">(</span>w<span class="token punctuation">.</span>getnframes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># big_endiana 字节序，低地址端 存放 高位字节。</span>wave<span class="token punctuation">.</span>big_endiana <span class="token operator">=</span> <span class="token number">1</span>h<span class="token punctuation">.</span>writeframes<span class="token punctuation">(</span>frames<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># for i in range(w.getnframes()):</span><span class="token comment" spellcheck="true">#     h.writeframes(w.readframes(1)[::-1])</span>h<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>听出You are a idiot<br>打开 <a href="http://www.pythonchallenge.com/pc/hex/idiot.html">http://www.pythonchallenge.com/pc/hex/idiot.html</a><br>“Now you should apologize…”<br><a href="http://www.pythonchallenge.com/pc/hex/idiot2.html">http://www.pythonchallenge.com/pc/hex/idiot2.html</a></p><h2 id="level-20-idiot2-2020-11-15"><a href="#level-20-idiot2-2020-11-15" class="headerlink" title="level_20_idiot2_2020.11.15"></a>level_20_idiot2_2020.11.15</h2><p>开始用Jupyter跑python代码了，感觉飞起呀！！！！</p><p>又是看不懂的一关，直接copy网上的代码吧……</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">,</span> base64<span class="token punctuation">,</span>rerequest <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">'http://www.pythonchallenge.com/pc/hex/unreal.jpg'</span><span class="token punctuation">)</span>cred <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>b<span class="token string">"butter:fly"</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">,</span> <span class="token string">"Basic %s"</span> <span class="token operator">%</span> cred<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {'Authorization': 'Basic YnV0dGVyOmZseQ=='}</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span></code></pre><pre><code>{'Authorization': 'Basic YnV0dGVyOmZseQ=='}Content-Type: image/jpegContent-Range: bytes 0-30202/2123456789Connection: closeTransfer-Encoding: chunkedDate: Sun, 15 Nov 2020 05:52:24 GMTServer: lighttpd/1.4.35</code></pre><pre class=" language-python"><code class="language-python">pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'bytes (\d+)-(\d+)/(\d+)'</span><span class="token punctuation">)</span>content_range <span class="token operator">=</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-range'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>content_range<span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Range'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'bytes=%i-'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>Content-Type: application/octet-streamContent-Transfer-Encoding: binaryContent-Range: bytes 30237-30283/2123456789Connection: closeTransfer-Encoding: chunkedDate: Sun, 15 Nov 2020 05:52:40 GMTServer: lighttpd/1.4.35we can go on in this way for really long time.</code></pre><p>So now the content between 30203 and 30236 is served, which is “Why don’t you respect my privacy?”; continue for a few iterations:</p><pre class=" language-python"><code class="language-python">pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'bytes (\d+)-(\d+)/(\d+)'</span><span class="token punctuation">)</span>content_range <span class="token operator">=</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-range'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>content_range<span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Range'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'bytes=%i-'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>        <span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-range'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><pre><code>stop this!Content-Type: application/octet-streamContent-Transfer-Encoding: binaryContent-Range: bytes 30284-30294/2123456789Connection: closeTransfer-Encoding: chunkedDate: Sun, 15 Nov 2020 05:53:12 GMTServer: lighttpd/1.4.35invader! invader!Content-Type: application/octet-streamContent-Transfer-Encoding: binaryContent-Range: bytes 30295-30312/2123456789Connection: closeTransfer-Encoding: chunkedDate: Sun, 15 Nov 2020 05:53:13 GMTServer: lighttpd/1.4.35ok, invader. you are inside now. Content-Type: application/octet-streamContent-Transfer-Encoding: binaryContent-Range: bytes 30313-30346/2123456789Connection: closeTransfer-Encoding: chunkedDate: Sun, 15 Nov 2020 05:53:13 GMTServer: lighttpd/1.4.35</code></pre><p>The last request ends at 30346.</p><blockquote><p>Why don’t you respect my privacy?<br>we can go on in this way for really long time.<br>stop this!<br>invader! invader!<br>ok, invader. you are inside now.</p></blockquote><pre class=" language-python"><code class="language-python">request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Range'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'bytes=%i-'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>Content-Type: application/octet-streamContent-Transfer-Encoding: binaryContent-Range: bytes 2123456744-2123456788/2123456789Connection: closeTransfer-Encoding: chunkedDate: Sun, 15 Nov 2020 05:54:13 GMTServer: lighttpd/1.4.35esrever ni emankcin wen ruoy si drowssap eht</code></pre><p>​    </p><p>The content is reversed: “the password is your new nickname in reverse”. The “nickname” is “invader”, so password is “redavni”. Now “reverse” the search:</p><pre class=" language-python"><code class="language-python">request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Range'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'bytes=2123456743-'</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>Content-Type: application/octet-streamContent-Transfer-Encoding: binaryContent-Range: bytes 2123456712-2123456743/2123456789Connection: closeTransfer-Encoding: chunkedDate: Sun, 15 Nov 2020 05:54:52 GMTServer: lighttpd/1.4.35and it is hiding at 1152983631.</code></pre><pre class=" language-python"><code class="language-python">request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Range'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'bytes=1152983631-'</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"output/level_21.zip"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Yes! This is really level 21 in here.<br>And yes, After you solve it, you’ll be in level 22!</p><p>Now for the level:</p><ul><li>We used to play this game when we were kids</li><li>When I had no idea what to do, I looked backwards.</li></ul><h2 id="level-21-2020-11-17"><a href="#level-21-2020-11-17" class="headerlink" title="level_21_2020.11.17"></a>level_21_2020.11.17</h2><blockquote><p>啊啊啊啊，昨天忙着做分子生物学作业和整hexo的域名，后来24：00电脑准时没电关机啦，只好厚脸皮今天补啦！</p></blockquote><blockquote><p>Yes! This is really level 21 in here. And yes, After you solve &gt;it, you’ll be in level 22!<br>Now for the level:<br>We used to play this game when we were kids<br>When I had no idea what to do, I looked backwards.</p></blockquote><p>这一关主要过程是对package.pack文件不断进行解压。根据上一次解压得到的结果，判断下一次解压用zlib还是bz2，以及判断得到的数据是正向的还是要reverse.<br>考察多种编码格式的运用，观察“package.pack”中的数据，发现是以b”x\x9c”开头的，这是zlib算法压缩的数据，使用zlib模块解码。重复几次，发现有以b”BZ”开头的，这是bz2压缩的数据，使用bz2模块解码。又重复几次，发现有以b”\x80\x8d”开头的，看看第2条提示，发现字节流是以b”\x9cx”结尾的，反转整个字节流。最终得到一句话“look at your logs”。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> zlib<span class="token keyword">import</span> bz2result <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"output/package.pack"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#x\x9c是zlib压缩的开头</span>        <span class="token keyword">if</span> data<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>b<span class="token string">'x\x9c'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            result <span class="token operator">+=</span> <span class="token string">' '</span>        <span class="token comment" spellcheck="true"># BZHbzip2 压缩编码</span>        <span class="token keyword">elif</span> data<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>b<span class="token string">'BZh'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> bz2<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            result <span class="token operator">+=</span> <span class="token string">'#'</span>        <span class="token comment" spellcheck="true"># When I had no idea what to do, I looked backwards.</span>        <span class="token keyword">elif</span> data<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>b<span class="token string">'\x9cx'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            result <span class="token operator">+=</span> <span class="token string">'\n'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># b'sgol ruoy ta kool'</span><span class="token comment" spellcheck="true">### reverse</span><span class="token comment" spellcheck="true">#look at your logs</span><span class="token comment" spellcheck="true">##</span><span class="token comment" spellcheck="true">#?? 没有 logs 啊，记录变化？这里有变化的就是压缩方法,就把这三种方法编号一下</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><pre><codecode></pre><h2 id="level-22-2020-11-17"><a href="#level-22-2020-11-17" class="headerlink" title="level_22_2020.11.17"></a>level_22_2020.11.17</h2><p><a href="http://www.pythonchallenge.com/pc/hex/copper.html">http://www.pythonchallenge.com/pc/hex/copper.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201229220700-2020-12-29.png"><br><strong>🔑Solution</strong></p><p>查看源代码提示下载文件“white.gif”<a href="http://www.pythonchallenge.com/pc/hex/white.gif">http://www.pythonchallenge.com/pc/hex/white.gif</a></p><p>发现每一帧都是黑的，但每一帧都有一个像素点不是纯黑的 RGB != (0,0,0)，且该像素都在中心点(100,100)附近，再由游戏摇杆得到启发。举例来说，详见下表</p><table><thead><tr><th>帧</th><th>非黑点位置</th><th>实际位置</th></tr></thead><tbody><tr><td>1</td><td>(100,100)</td><td>(100,100) 归零</td></tr><tr><td>2</td><td>( 98,102)</td><td>( 98,102)</td></tr><tr><td>3</td><td>( 98,100)</td><td>( 96,102)</td></tr><tr><td>4</td><td>(100,102)</td><td>( 96,104)</td></tr><tr><td>5</td><td>(100,100)</td><td>(100,100) 归零</td></tr></tbody></table><p>把两次归零操作之间，每一帧的实际位置都画出来，就能得到一幅图案。最终发现一共有5幅图案，按顺序绘制出来，发现是一个单词“bonus”。</p><ul><li>gif. n_frame返回所有关键帧</li><li>gif.seek()在给定的文件序列中查找指定的帧。如果查找超越了序列的末尾，则产生一个EOFError异常。当文件序列被打开时，PIL库自动指定到第0帧上。</li><li>gif.tell()返回当前帧</li></ul><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageDrawgif <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"assets/white.gif"</span><span class="token punctuation">)</span>new <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 默认背景为黑</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>new<span class="token punctuation">)</span>cx<span class="token punctuation">,</span> cy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token comment" spellcheck="true"># 画点的起始位置</span><span class="token keyword">for</span> frame <span class="token keyword">in</span> range<span class="token punctuation">(</span>gif<span class="token punctuation">.</span>n_frames<span class="token punctuation">)</span><span class="token punctuation">:</span>    gif<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>    left<span class="token punctuation">,</span> upper<span class="token punctuation">,</span> right<span class="token punctuation">,</span> lower <span class="token operator">=</span> gif<span class="token punctuation">.</span>getbbox<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 得到与100,100的相对位置</span>    dx <span class="token operator">=</span> left <span class="token operator">-</span> <span class="token number">100</span>    dy <span class="token operator">=</span> upper <span class="token operator">-</span> <span class="token number">100</span>    <span class="token comment" spellcheck="true"># 一个图案画完了,移远一点,继续画</span>    <span class="token keyword">if</span> dx <span class="token operator">==</span> dy <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        cx <span class="token operator">+=</span> <span class="token number">50</span>        cy <span class="token operator">=</span> <span class="token number">100</span>    cx <span class="token operator">+=</span> dx    cy <span class="token operator">+=</span> dy    draw<span class="token punctuation">.</span>point<span class="token punctuation">(</span><span class="token punctuation">[</span>cx<span class="token punctuation">,</span> cy<span class="token punctuation">]</span><span class="token punctuation">)</span>new<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="level-23-2020-12-15"><a href="#level-23-2020-12-15" class="headerlink" title="level_23_2020.12.15"></a>level_23_2020.12.15</h2><blockquote><p>额，之前为了考试周，于是拖了好久，然后就一直捡不起来了哇！剧刷腻了，b站搞笑视频也觉得不好玩了，就又回来写python了<br>希望之后可以一直坚持下去哇！！！！</p></blockquote><p>解题Solution：源代码里的’va gur snpr bs jung?’明显也是解码，title为”what is this module?“，结合后面的”it can’t find it. this is an undocumented module”，猜测为this模块（就是大名鼎鼎的The Zen of Python啦）！<br>方法1：可以尝试用ocr那题（level_1）的代码试试，依次检验26个偏移量能否得到一个有含义的句子</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ocr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    text <span class="token operator">=</span> <span class="token string">'va gur snpr bs jung?'</span>    <span class="token keyword">for</span> offset <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        trans <span class="token operator">=</span> str<span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">,</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">[</span>offset<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">[</span><span class="token punctuation">:</span>offset<span class="token punctuation">]</span><span class="token punctuation">)</span>        new_text <span class="token operator">=</span> text<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>trans<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>new_text<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    ocr<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>发现偏移量为13时，字符可解码为in the face of what?</p><pre><code>0 → va gur snpr bs jung?1 → wb hvs toqs ct kvoh?2 → xc iwt uprt du lwpi?3 → yd jxu vqsu ev mxqj?4 → ze kyv wrtv fw nyrk?5 → af lzw xsuw gx ozsl?6 → bg max ytvx hy patm?7 → ch nby zuwy iz qbun?8 → di ocz avxz ja rcvo?9 → ej pda bwya kb sdwp?10 → fk qeb cxzb lc texq?11 → gl rfc dyac md ufyr?12 → hm sgd ezbd ne vgzs?`13 → in the face of what?`14 → jo uif gbdf pg xibu?15 → kp vjg hceg qh yjcv?16 → lq wkh idfh ri zkdw?17 → mr xli jegi sj alex?18 → ns ymj kfhj tk bmfy?19 → ot znk lgik ul cngz?20 → pu aol mhjl vm doha?21 → qv bpm nikm wn epib?22 → rw cqn ojln xo fqjc?23 → sx dro pkmo yp grkd?24 → ty esp qlnp zq hsle?25 → uz ftq rmoq ar itmf?</code></pre><p>import this,里面有一句“In the face of ambiguity”，所以答案就是ambiguity，<a href="http://www.pythonchallenge.com/pc/hex/ambiguity.html">http://www.pythonchallenge.com/pc/hex/ambiguity.html</a></p><pre><code>The Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren't special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one-- and preferably only one --obvious way to do it.Although that way may not be obvious at first unless you're Dutch.Now is better than never.Although never is often better than *right* now.If the implementation is hard to explain, it's a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea -- let's do more of those!Gur Mra bs Clguba, ol Gvz Crgref</code></pre><p>Solution2：<br>如果尝试输入<code>print(this.s)</code>,你会发现得到的是The Zen of python的加密版本，输入<code>print(this.d)</code>,得到的解密本字典,所以推理得到给的那个字符串也是这样加密的<br>方法2:<br>简单粗暴</p><pre class=" language-python"><code class="language-python">text <span class="token operator">=</span> <span class="token string">'va gur snpr bs jung?'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>this<span class="token punctuation">.</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span>c<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> text<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#in the face of what?</span></code></pre><blockquote><p>老实说,隔了这么久,不知道再继续玩python challenge还有没有必要哈,但是我好像确实没什么其他想到能做的事了(咸鱼一只),所以就脚踏实地吧,总要坚持一件事,我也相信前方或许会有意想不到的收获.不知道为什么,进入大三之后,整个人变得浮躁不堪,静不下心去踏实学东西,我觉得这样很糟!</p></blockquote><h2 id="level-24-maze-2020-12-16"><a href="#level-24-maze-2020-12-16" class="headerlink" title="level_24_maze_2020.12.16"></a>level_24_maze_2020.12.16</h2><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/maze-2020-12-18.png" alt="maze">]<br>发现Vscode真的适合把图片放大到像素级<br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201218190652-2020-12-18.png" alt="图片放大"><br><strong>🔑Solution</strong><br>  这一关真的好有趣呀，就是得先找到迷宫的entrance和exit，然后就需要使用数据结构的知识来走迷宫啦，我用的是栈深度搜索，队列就是广度搜索了吧，收集走迷宫的路径每个像素位置以及点的R通道值，然后转化为二进制数据，发现开头是PK，提示为压缩包，所以就将数据生成为压缩包，解压即得到下一关提示。<br><strong>🖊Learned</strong></p><ul><li>二进制开头b’PK’为压缩包</li><li><code>ImageDraw.Draw</code>模块</li><li>栈和队列复习</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDrawmaze <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"assets/maze.png"</span><span class="token punctuation">)</span>directions <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 方向</span>white <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span>w<span class="token punctuation">,</span>h <span class="token operator">=</span> maze<span class="token punctuation">.</span>sizenext_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 通过for i in range(w): print(maze.getpixel((i, 0)))可知入口的黑色像素位置</span>entrance <span class="token operator">=</span> <span class="token punctuation">(</span>w <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 通过 for i in range(w): print(maze.getpixel((i, h - 1)))可知出口位置</span>exit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># stack代表的用栈来存储可能的路口</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span>exit<span class="token punctuation">]</span><span class="token keyword">while</span> stack<span class="token punctuation">:</span>    pos <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 当前位置</span>    <span class="token keyword">if</span> pos <span class="token operator">==</span> entrance<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> directions<span class="token punctuation">:</span>        tmp <span class="token operator">=</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#tmp代表的是可能的下一个位置</span>        <span class="token keyword">if</span> <span class="token operator">not</span> tmp <span class="token keyword">in</span> next_map <span class="token operator">and</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> w <span class="token operator">and</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h <span class="token operator">and</span> maze<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">!=</span> white<span class="token punctuation">:</span>            next_map<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> pos  <span class="token comment" spellcheck="true"># next_map放的是下一个位置←该位置的字典，但该程序会记录错误的路线而不会删除，虽然不影响回溯</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 会把所有可能的路口都入栈</span>path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGBA'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">641</span><span class="token punctuation">,</span> <span class="token number">641</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">while</span> pos <span class="token operator">!=</span> exit<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># pos 将从起点开始回溯</span>    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>maze<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 只输出第一个RGB值</span>    draw<span class="token punctuation">.</span>point<span class="token punctuation">(</span>pos<span class="token punctuation">,</span>maze<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span>    pos <span class="token operator">=</span> next_map<span class="token punctuation">[</span>pos<span class="token punctuation">]</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'output/level_24_path.png'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(path)</span><span class="token comment" spellcheck="true"># print(path[1::2])</span><span class="token comment" spellcheck="true"># print(bytes(path[1::2]))</span><span class="token comment" spellcheck="true"># open('output/level_24_maze.zip','wb').write(bytes(path))</span>open<span class="token punctuation">(</span><span class="token string">'output/level_24_maze.zip'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># path[1::2]的原因只是因为R通道即红点都是至少都是间隔分布的</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/level_24_path-2020-12-18.png" alt="level_24_path"><br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201218190741-2020-12-18.png" alt="放大图片"></p><h2 id="level-25-wave拼图-2020-12-17"><a href="#level-25-wave拼图-2020-12-17" class="headerlink" title="level_25_wave拼图_2020.12.17"></a>level_25_wave拼图_2020.12.17</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/hex/lake.html">http://www.pythonchallenge.com/pc/hex/lake.html</a><br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201218184825-2020-12-18.png" alt="关卡图"></p><p><strong>Solution：</strong><br>看到图片名是“lake1.jpg”，根据提示尝试获取“lake1.wav”，文件存在，猜测应该还有“lake2.wav”，“lake3.wav”，……于是构造一个网络爬虫<br>以音频方式打开文件，发现都是杂音，根据图片中拼图的提示，将每个音频转化一共图片，25个正好对应了关卡图中5*5拼图，然后把25个图片拼在一起，就得到结果啦<br><strong>Learned：</strong></p><ul><li>python创建文件不会自动创建文件夹吗<ul><li>是的，如果路径不存在，必须手动先创建，可以使用os.makedirs(path) <a href="https://blog.csdn.net/Homewm/article/details/80766894">https://blog.csdn.net/Homewm/article/details/80766894</a></li></ul></li><li>HTTPPasswordMgrWithDefaultRealm()类将创建一个密码管理对象，用来保存 HTTP 请求相关的用户名和密码，主要应用两个场景：<ul><li>验证代理授权的用户名和密码 (ProxyBasicAuthHandler())</li><li>验证Web客户端的的用户名和密码 (HTTPBasicAuthHandler())</li><li><a href="https://blog.csdn.net/weicao1990/article/details/80066655">https://blog.csdn.net/weicao1990/article/details/80066655</a></li></ul></li><li><code>Image.frombytes</code>从二进制中创建，im.paste()粘贴图片上去</li></ul><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span> error<span class="token keyword">import</span> wave<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"\033[31mLevel 25\033[0m"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 原来可以打印红色字欸</span><span class="token keyword">def</span> <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹函数</span>    folder <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> folder<span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"---new folder {path}---"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 爬虫部分</span><span class="token comment" spellcheck="true"># 1. 构建一个密码管理对象，用来保存需要处理的用户名和密码</span>password_mgr <span class="token operator">=</span> request<span class="token punctuation">.</span>HTTPPasswordMgrWithDefaultRealm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 添加账户信息，第一个参数realm是与远程服务器相关的域信息，一般没人管它都是写None，后面三个参数分别是 代理服务器、用户名、密码</span>password_mgr<span class="token punctuation">.</span>add_password<span class="token punctuation">(</span>    None<span class="token punctuation">,</span> <span class="token string">"http://www.pythonchallenge.com/"</span><span class="token punctuation">,</span> <span class="token string">"butter"</span><span class="token punctuation">,</span> <span class="token string">"fly"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 构建一个HTTP基础用户名/密码验证的HTTPBasicAuthHandler处理器对象，参数是创建的密码管理对象</span>handler <span class="token operator">=</span> request<span class="token punctuation">.</span>HTTPBasicAuthHandler<span class="token punctuation">(</span>password_mgr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># passowrd_mgr→handler，HTTPBasicAuthHandler基本的HTTP验证处理</span><span class="token comment" spellcheck="true"># 4. 通过 build_opener()方法使用这些代理Handler对象，创建自定义opener对象，</span>opener <span class="token operator">=</span> request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># handler→opener</span>mkdir<span class="token punctuation">(</span><span class="token string">"output/level_25"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Processing {i:2d}..."</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> f<span class="token string">"http://www.pythonchallenge.com/pc/hex/lake{i}.wav"</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">except</span> error<span class="token punctuation">.</span>HTTPError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"HTTP ERROR 404"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>f<span class="token string">"output/level_25/lake{i}.wav"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 'wb'写入二进制文件</span>            data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Successfully Saved."</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 一共25个wav文件</span><span class="token comment" spellcheck="true">#创建图片 →把25个wav转成5*5的拼图块→合并图片</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># wave.open()返回Wave_write对象</span>    <span class="token keyword">with</span> wave<span class="token punctuation">.</span>open<span class="token punctuation">(</span>f<span class="token string">"output/level_25/lake{i}.wav"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># getnframes()返回音频帧数</span>        <span class="token comment" spellcheck="true"># readframes(n)最多读取并返回n帧音频，作为字节对象。</span>        <span class="token comment" spellcheck="true"># file.readframes(file.getnframes())就是先读取一共几帧，然后把所有帧都输出成二进制</span>        data <span class="token operator">=</span> file<span class="token punctuation">.</span>readframes<span class="token punctuation">(</span>file<span class="token punctuation">.</span>getnframes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        block_im <span class="token operator">=</span> Image<span class="token punctuation">.</span>frombytes<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token comment" spellcheck="true"># 超过5个就换下一行</span>        im<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>block_im<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"output/level_25/result.jpg"</span><span class="token punctuation">)</span></code></pre><h2 id="level-26-md5-2020-12-18"><a href="#level-26-md5-2020-12-18" class="headerlink" title="level_26_md5_2020.12.18"></a>level_26_md5_2020.12.18</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/hex/decent.html">http://www.pythonchallenge.com/pc/hex/decent.html</a></p><p><strong>Solution：</strong><br>源码说已经得到邮箱了（我咋不知道），原来早在第19关网页的源代码就给了个邮箱，<a href="mailto:leopold.moz@pythonchallenge.com">leopold.moz@pythonchallenge.com</a>，然后发送，标题为Apologize，内容为Sorry的邮件，你就可以得到以下回复:</p><blockquote><p>Never mind that.</p><p>Have you found my broken zip?</p><p>md5: bbb8b499a0eef99b52c7f13f4e78c24b</p><p>Can you believe what one mistake can lead to?</p></blockquote><p>意思就是说之前我们maze那关得到的压缩包不是除了图片还有一共压缩包吗？如果解压的话就会提示校验值错误，这个回复就是说压缩包的二进制数据有一个错误，要让咱一个个尝试，把它改对，用md5来校验文件是否修复好。（然而之前我用bzip不修复照样也解压出来了……有点尴尬,,ԾㅂԾ,,）<br>最后得到的图片显示”speed”,然后再结合Hurry up, I’m missing the boat,下一关网址就是”speedboat”</p><p><strong>Learned：</strong></p><ul><li>原来python终端可以打印出颜色呀，Learned了<ul><li>Python基础之控制台输出颜色 <a href="https://blog.csdn.net/qq_33567641/article/details/82769523">https://blog.csdn.net/qq_33567641/article/details/82769523</a></li></ul></li><li>切片是左闭右开，我又忘了</li><li>对二进制的操作还是似懂非懂哇，有空专门学习下！</li></ul><p><strong>Code：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">def</span> <span class="token function">repair</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> pos <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> pos <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Trying repairing the position {pos} ..."</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># try 0-255</span>            newData <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span>pos<span class="token punctuation">]</span> <span class="token operator">+</span> bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 替换pos那个位置的值</span>            <span class="token keyword">if</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>newData<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> md5code<span class="token punctuation">:</span>                open<span class="token punctuation">(</span><span class="token string">'output/level_26_repaired.zip'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>newData<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"\033[1;31m Zip have been repaired！\033[0m"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>md5code <span class="token operator">=</span> <span class="token string">"bbb8b499a0eef99b52c7f13f4e78c24b"</span>data <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'assets/mybroken.zip'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>repair<span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><h2 id="level-27-between-the-tables-2020-12-19"><a href="#level-27-between-the-tables-2020-12-19" class="headerlink" title="level_27_between the tables_2020.12.19"></a>level_27_between the tables_2020.12.19</h2><p>Link: <a href="http://www.pythonchallenge.com/pc/hex/speedboat.html">http://www.pythonchallenge.com/pc/hex/speedboat.html</a></p><p><strong>🔑Solution</strong><br>点击图片就能直接进入下一关，然而不知账号密码。<br>这一关涉及到图像色板、映射、常见但依旧不了解的二进制数据处理还有keyword模块<br>也没啥Solution了，毕竟是copy别人的代码嘛！</p><p><strong>🖊Learned</strong></p><ul><li>im.getpalette()以列表形式返回图像调色板，putpalette给对象加上调色板，相当于上色,然而暂时不懂调色板是什么东东</li><li>im.tobytes()，把图片转化为二进制</li><li><code>maketrans(A,B)</code>和<code>newData = data.translate()</code>明明很早接触了，然而还是不熟悉</li><li>filter和lambda的用法<code>diff = list(filter(lambda p: p[0] != p[1], zipped))</code></li><li>index的复数形式是indices（滑稽）</li></ul><p><strong>💻Code</strong></p><p>建立二进制索引和色板, 映射到图片字节流数据<br>什么，你问我为什么要这样做？不知道……，毕竟这一关的标题就是between the tables，毕竟别人是这样解题的。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> keyword<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> bz2im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'assets/zigzag.gif'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># im.getpalette()以列表形式返回图像调色板，getpalette（）获取图片对应的调色板；putpalette给对象加上调色板，相当于上色</span><span class="token comment" spellcheck="true"># [37, 229, 162, 136, 59, 212, 9, 41, 24, 156, 148, 112, 254, 91,..]</span>palette <span class="token operator">=</span> im<span class="token punctuation">.</span>getpalette<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># print(palette)</span>len<span class="token punctuation">(</span>palette<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#256</span><span class="token comment" spellcheck="true"># 建立二进制索引和色板, 映射到图片字节流数据</span>table <span class="token operator">=</span> bytes<span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bytes<span class="token punctuation">(</span>palette<span class="token punctuation">)</span><span class="token punctuation">)</span>raw <span class="token operator">=</span> im<span class="token punctuation">.</span>tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>trans <span class="token operator">=</span> raw<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table<span class="token punctuation">)</span></code></pre><p>比较raw和trans数据，发现除去raw的第一个和tran的最后一个，大致数据差不多</p><pre class=" language-python"><code class="language-python"> <span class="token keyword">print</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span> <span class="token keyword">print</span>（trans<span class="token punctuation">)</span></code></pre><p>所以下一步就是把不一样的数据过滤出来</p><pre class=" language-python"><code class="language-python">zipped <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>raw<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>trans<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>diff <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> p<span class="token punctuation">:</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> zipped<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这里用来匿名函数+filter过滤</span>indices <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i<span class="token punctuation">,</span> p <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>zipped<span class="token punctuation">)</span> <span class="token keyword">if</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># indices是index的复数形式</span></code></pre><p>处理diff数据，转化为text</p><pre class=" language-python"><code class="language-python">s<span class="token operator">=</span><span class="token punctuation">[</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> diff<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># t[1]即trans的数据则没有提示</span><span class="token keyword">print</span><span class="token punctuation">(</span>bytes<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 熟悉的bz开头</span>text <span class="token operator">=</span> bz2<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#解码成文本</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#发现是有一堆python关键字</span></code></pre><p>新建一个白底的图像，利用之前数据不一样的索引，把该位置都改为黑色</p><pre class=" language-python"><code class="language-python">im2 <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">)</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span>len<span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> indices<span class="token punctuation">:</span>    colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>im2<span class="token punctuation">.</span>putdata<span class="token punctuation">(</span>colors<span class="token punctuation">)</span></code></pre><p>竟然能得到一张图，提示not keyword，就是说我们要把text里不是keyword的词给提取出来<br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201219151302-2020-12-19.png" alt="not keyword的提示"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> keyword<span class="token keyword">print</span><span class="token punctuation">(</span>set<span class="token punctuation">(</span><span class="token punctuation">[</span>w <span class="token keyword">for</span> w <span class="token keyword">in</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token operator">not</span> keyword<span class="token punctuation">.</span>iskeyword<span class="token punctuation">(</span>w<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>最终得到</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span>b<span class="token string">'print'</span><span class="token punctuation">,</span> b<span class="token string">'../ring/bell.html'</span><span class="token punctuation">,</span> b<span class="token string">'repeat'</span><span class="token punctuation">,</span> b<span class="token string">'exec'</span><span class="token punctuation">,</span> b<span class="token string">'switch'</span><span class="token punctuation">}</span></code></pre><p>值得注意的是，“print”和“exec”在Python2中式关键字，在Python3中变成了函数，所以没有被去掉。<br>经过尝试，bell.html网页的用户名为repeat，密码为switch。<br>Over！ </p><h2 id="level-28-many-pairs-ring-ring-2020-12-20"><a href="#level-28-many-pairs-ring-ring-2020-12-20" class="headerlink" title="level_28_many pairs ring-ring_2020.12.20"></a>level_28_many pairs ring-ring_2020.12.20</h2><p><strong>🔑Solution</strong><br>本关考察对图片和字节流的处理能力。提示让我们大声说“RING-RING-RING”，是指“RING”谐音“GREEN”，就是指RGB的绿色通道。我们需要将绿色通道的数据两两配对，每组作差取绝对值，例如 green = [55, 97, 73, 115, 120, 78, ……]，操作后的结果是 diff = [42, 42, 42, ……]。查看列表diff的值，发现几乎都是“42”，去掉数值“42”，剩下的数值转成字符构成一条语句：<br>whodunnit().split()[0] ?<br>whodunnit直译是侦探小说,但明显不是这个意思,结合本关的谐音,可以知道是who done it的谐音,再结合<code>.split()[0] </code>可以知道是问python之父是谁<br>当然是那个死胖子,Guido啦,哈哈哈哈<br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201220133143-2020-12-20.png" alt="Guido van Rossum"></p><p><strong>🖊Learned</strong></p><ul><li><code>list(im.split()[1].getdata())</code> 获得green像素值列表</li><li><code>abs(a-b)for a, b in zip(green[0::2], green[1::2])</code> 列表的前一个减后一个</li><li>filter+lambda 过滤列表</li></ul><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imageim <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'assets/bell.png'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ring-ring的谐音是green,所以提取green值</span>green <span class="token operator">=</span> list<span class="token punctuation">(</span>im<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>getdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 发现green前一个和后一个几乎都是差42,有猫腻</span>diff <span class="token operator">=</span> <span class="token punctuation">[</span>abs<span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> zip<span class="token punctuation">(</span>green<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> green<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># print(diff)</span><span class="token comment" spellcheck="true"># 把42过滤掉</span>filtered <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">!=</span> <span class="token number">42</span><span class="token punctuation">,</span> diff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 过滤后的数据转化为二进制并解码</span><span class="token keyword">print</span><span class="token punctuation">(</span>bytes<span class="token punctuation">(</span>filtered<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># whodunnit().split()[0] ?</span></code></pre><h2 id="level-29-silence-2020-12-21"><a href="#level-29-silence-2020-12-21" class="headerlink" title="level_29_silence_2020.12.21"></a>level_29_silence_2020.12.21</h2><p><strong>🔑Solution</strong><br>一开始看源代码我是懵逼的，看了答案才知道html原来后面的行有玄机！一旦把每行的长度整理成数字列表之后，然后转化为二进制，发现又是BZ开头，用bz2解压，得到下一关的hint<br><img src="https://pic4.zhimg.com/80/v2-f44b0a3b683e58e8e9dffaba4d2da6bf.png" alt="你以为空无一物"><br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201221181345-2020-12-21.png" alt="程序员的浪漫"><br><strong>🖊Learned</strong></p><ul><li>这一关真的好秒呀，论程序员的浪漫，可以用这关来装逼，隐藏想说的话！</li><li>网页Authorization这个始终记不住……</li><li>splitlines()直接切割行，把内容转化为列表</li><li>列表转bytes，直接bytes(list),bytes转列表 list（bytes）</li></ul><p><strong>💻Code</strong><br>解题</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span> urlopen<span class="token keyword">import</span> bz2<span class="token keyword">import</span> base64req <span class="token operator">=</span> Request<span class="token punctuation">(</span><span class="token string">'http://www.pythonchallenge.com/pc/ring/guido.html'</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'Authorization'</span><span class="token punctuation">,</span>               <span class="token string">'Basic %s'</span> <span class="token operator">%</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>b<span class="token string">'repeat:switch'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取html13行之后的数据</span>raw <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 数13行之后每行的长度，并转化为二进制</span>data <span class="token operator">=</span> bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> raw<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 解压二进制</span><span class="token keyword">print</span><span class="token punctuation">(</span>bz2<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>我们也从作者的角度来反推这个谜题是怎么做出来的<br>加密我们想说的话</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> bz2message <span class="token operator">=</span> b<span class="token string">""</span> <span class="token comment" spellcheck="true"># 这得二进制</span>compressed <span class="token operator">=</span> bz2<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>message<span class="token punctuation">)</span>num_list <span class="token operator">=</span> list<span class="token punctuation">(</span>compressed<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"level_29_silence.txt"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> num_list<span class="token punctuation">:</span>        file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">' '</span> <span class="token operator">*</span> num <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span></code></pre><p>解密,<br>哈哈，毕竟圣诞节到了嘛，不过这个silent.txt发给女生估计会被打！</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"level_29_silence.txt"</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    raw <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(raw)</span><span class="token comment" spellcheck="true"># 数13行之后每行的长度，并转化为二进制</span>data <span class="token operator">=</span> bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> raw<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 解压二进制</span><span class="token keyword">print</span><span class="token punctuation">(</span>bz2<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Merry Christmas</span></code></pre><h2 id="level-30-图片翻转质数之积-2020-12-22"><a href="#level-30-图片翻转质数之积-2020-12-22" class="headerlink" title="level_30_图片翻转质数之积_2020.12.22"></a>level_30_图片翻转质数之积_2020.12.22</h2><p><strong>🔑Solution</strong><br>根据提示，下载“yankeedoodle.csv”，里面是一堆浮点数<br>还以为原来的行列可能有玄机，谁知道是直接数多少个数，然后发现可以拆分为两个质数的积，7367 = 53*139， 构造一个53*139的图片，得到一个带公式的图片<code>n = str(x[i])[5] + str(x[i+1])[5] + str(x[i+2])[6]</code>，就按照这个公式来处理csv得到的数据，最终得到“look at grandpa”的提示，剩下的信息别想太多，确实没用</p><p><strong>🖊Learned</strong></p><ul><li>图片左右翻转 <code>img.transpose(Image.FLIP_LEFT_RIGHT)</code></li><li>图片旋转 <code>img.transpose(Image.ROTATE_90)</code></li><li>大概懂了<code>img.putdata</code>的意思</li><li>感觉学来学去，一直都在学图像处理呀！！！哈哈哈哈哈哈</li><li>不知道为什么VSCode现在写markdown卡的要死……一回车就卡死</li></ul><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'assets/yankeedoodle.csv'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 处理成列表</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 计算列表长度</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7367</span>factor <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token keyword">if</span> length <span class="token operator">%</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>factor<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 计算这个length的因子为53*139</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">139</span><span class="token punctuation">)</span><span class="token punctuation">)</span>img<span class="token punctuation">.</span>putdata<span class="token punctuation">(</span><span class="token punctuation">[</span>float<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 左右翻转</span>img <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>FLIP_LEFT_RIGHT<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 顺时针旋转90度</span>img <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>ROTATE_90<span class="token punctuation">)</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 根据图片给的hint</span>a <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>c <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>res <span class="token operator">=</span> bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>int<span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> x2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> x3<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3 <span class="token keyword">in</span> zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><p>得到的图片<br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201222110626-2020-12-22.png" alt="formula"><br>最终输出结果</p><pre><code>b'So, you found the hidden message.\nThere is lots of room here for a long message, but we only need very little space to say "look at grandpa", so the rest is just garbage. \nVTZ.l\'\x7ftf*Om@I"p]</code></pre><h2 id="level-31-Mandelbrot-set-2020-12-23"><a href="#level-31-Mandelbrot-set-2020-12-23" class="headerlink" title="level_31_Mandelbrot set_2020.12.23"></a>level_31_Mandelbrot set_2020.12.23</h2><p><strong>🔑Solution</strong><br>点击图片进入下一关,需要用户名和密码,用户名是“kohsamui”，密码是“thailand”，进入第二部分。<br>第二部分的图片名词为mandelbrot,而图片的雪花本身就是曼德博集合.</p><p>注意到网页源代码的window和option标签，我们需要构造一个复平面，宽度对应x轴，高度对应y轴，范围由window标签给出。<br>left=“0.34” top=“0.57” width=“0.036” height=“0.027”<br>w = 640px —— x轴 范围 [left, left+width] = [0.34, 0.376]<br>h = 480px —— y轴 范围 [top, top+height] = [0.57, 0.597]</p><p>对于每个像素点,根据比例计算其在复平面的坐标(x,y) ,记复数c=x+yi,从z0=0开始迭代,迭代公式为zi+1=zi**2+c,c=x+yi,<br>记Mandelbrot集为M,根据定理,若复数c ∈ M  ，则|zi| &lt; 2, ∀ i ∈ N<br>迭代次数由option标签给出，最多128次，若迭代完128次，其模仍小于2，则该点的颜色值为127，若|zi|&lt;2 and|zi+1|&gt;=2, 则该点颜色为i，对应图片的palette表<br>然后将得到的list绘制图片比较两张图的像素差异,把不同的像素点提取出来,最后转化成黑白的图片,图片为阿雷西博信息,所以答案为“arecibo ”</p><p><strong>🖊Learned</strong></p><ul><li>复习图像模式,P-8bit-使用调色板映射到其他任何模式,L-8bit-黑白…对,我又忘记了(,,ԾㅂԾ,,)</li><li>感觉对getpalette(),putpalete()的理解加深了,返回的列表其实是[r, g, b, r, g, b…],三个一个RGB排列下去,P模式，才具有调色板属性,RGB模式getpixel((x,y))是RGB值,而P模式getpixel((x,y))是一个值,即索引,大小范围在0~255之间<br>调色板就是来减少存储空间使用量的,它存储着256种不同的调色方案<br>以下代码将会打印出图像img的调色板情况，按照256个配色方案*3个通道值的格式排列：<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">.</span>getpalette<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>使用了调色盘的图像将会被单通道存储，每个像素位置的值是调色盘“表”中的索引，这在存储图像的时候空间要求从RGB的<strong>3</strong>个字节变成了<strong>1</strong>个字节。达到减小空间的目的.<br>但是,因为表中有限的配色方案数量（256），能使用的颜色也是有限制的，这也是P格式图像的一个缺点。<br>  <a href="https://www.zhihu.com/question/334057386/answer/774192372">python中的pil库中的p模式是干什么用的？</a><br>  <a href="https://blog.csdn.net/weixin_40005329/article/details/103481553">Python PIL 图像处理中模式为”P”的含义以及与”RGB”之间的转换</a></li><li>图像的原点是在左上角吧,X轴是从左到右增长的，而Y轴是从上到下增长,所以例如本题构造result图片时因为提前确定好高度和宽度,1679个值从上放到下</li><li><a href="https://zh.wikipedia.org/wiki/%E6%9B%BC%E5%BE%B7%E5%8D%9A%E9%9B%86%E5%90%88">曼德勃罗集（Mandelbrot Set）</a>,<a href="https://www.dogedoge.com/results?q=python+mandelbrot&amp;lang=auto">Python绘制Mandelbrot</a></li><li>原来python中for也有else呀,<a href="https://www.zhihu.com/question/37076998">如何在Python中使用break跳出多层循环？</a></li><li>这一关阿雷西博信息要哭死我啊，正好前几天才了解了下，然而2020年12月1日阿雷西博射电望远镜塌了<del>/(ㄒoㄒ)/</del> <a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E9%9B%B7%E8%A5%BF%E5%8D%9A%E4%BF%A1%E6%81%AF">阿雷西博信息</a></li></ul><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹函数</span>    folder <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> folder<span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"---new folder {path}---"</span><span class="token punctuation">)</span>mkdir<span class="token punctuation">(</span><span class="token string">"output/level_31"</span><span class="token punctuation">)</span>im0 <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'assets/mandelbrot.gif'</span><span class="token punctuation">)</span>w<span class="token punctuation">,</span> h <span class="token operator">=</span> im0<span class="token punctuation">.</span>size  <span class="token comment" spellcheck="true"># 640, 480</span>im1 <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span>im1<span class="token punctuation">.</span>putpalette<span class="token punctuation">(</span>im0<span class="token punctuation">.</span>getpalette<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">0.34</span><span class="token punctuation">,</span> <span class="token number">0.57</span><span class="token punctuation">,</span> <span class="token number">0.036</span><span class="token punctuation">,</span> <span class="token number">0.027</span><span class="token comment" spellcheck="true"># 曼德勃罗集（Mandelbrot Set）</span><span class="token comment" spellcheck="true"># ! 构造复平面</span><span class="token comment" spellcheck="true"># left=“0.34” top=“0.57” width=“0.036” height=“0.027”</span><span class="token comment" spellcheck="true"># w = 640px —— x轴 范围 [left, left+width] = [0.34, 0.376]</span><span class="token comment" spellcheck="true"># h = 480px —— y轴 范围 [top, top+height] = [0.57, 0.597]</span><span class="token comment" spellcheck="true"># 复平面坐标(x,y)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 从左上角开始遍历</span>        z <span class="token operator">=</span> complex<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># z0 = 0</span>        <span class="token comment" spellcheck="true"># c = x + yi</span>        c <span class="token operator">=</span> complex<span class="token punctuation">(</span>left <span class="token operator">+</span> x <span class="token operator">*</span> width <span class="token operator">/</span> <span class="token number">640</span><span class="token punctuation">,</span> top <span class="token operator">+</span> <span class="token punctuation">(</span>h<span class="token number">-1</span><span class="token operator">-</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> height <span class="token operator">/</span> <span class="token number">480</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 进行迭代 ,迭代次数 &lt;option iterations="128"/></span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            z <span class="token operator">=</span> z<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> c  <span class="token comment" spellcheck="true"># zi = zi-1**2 + c</span>            <span class="token comment" spellcheck="true"># 若复数c ∈ M  ，则|zi| &lt; 2, ∀ i ∈ N </span>            <span class="token keyword">if</span> abs<span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>                im1<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># 128次迭代完, 其模仍小于2，则该点的颜色值为127</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true"># ! 不只是if有，while和for都有else分支:循环体的else分支触发条件是循环正常结束。如果循环内被break跳出，就不执行else。</span>            im1<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span>im1<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"output/level_31/mandelbrot_2.gif"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 比较两张图的差别,得到diff列表</span>data0 <span class="token operator">=</span> list<span class="token punctuation">(</span>im0<span class="token punctuation">.</span>getdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data1 <span class="token operator">=</span> list<span class="token punctuation">(</span>im1<span class="token punctuation">.</span>getdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果p0&lt;p1,则取0即黑色,如果p0>p1,则取255,即白色</span>diff <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">255</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p0 <span class="token operator">&lt;</span> p1<span class="token punctuation">)</span> <span class="token keyword">for</span> p0<span class="token punctuation">,</span> p1 <span class="token keyword">in</span> zip<span class="token punctuation">(</span>data0<span class="token punctuation">,</span> data1<span class="token punctuation">)</span> <span class="token keyword">if</span> p0 <span class="token operator">!=</span> p1<span class="token punctuation">]</span>len <span class="token operator">=</span> len<span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"length: {len}"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1679</span>factors <span class="token operator">=</span> <span class="token punctuation">[</span>f <span class="token keyword">for</span> f <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token keyword">if</span> len <span class="token operator">%</span> f <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>factors<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [23,73]</span><span class="token comment" spellcheck="true"># 输出</span>im2 <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">)</span>im2<span class="token punctuation">.</span>putdata<span class="token punctuation">(</span>diff<span class="token punctuation">)</span>im2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">730</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>im2<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"output/level_31/result.jpg"</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/mandelbrot_2-2020-12-23.gif" alt="mandelbrot"><br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/result-2020-12-23.jpg" alt="Arecibo message"></p><h2 id="level-32-刻印-2020-12-24"><a href="#level-32-刻印-2020-12-24" class="headerlink" title="level_32_刻印_2020.12.24"></a>level_32_刻印_2020.12.24</h2><p><strong>🔑Solution</strong><br>啊，没有Solution，完全不知道这是啥，等以后补吧<br>学习<br>见识到复杂的代码，觉得自己毫无长进吧<br><strong>🖊Learned</strong><br><a href="https://en.wikipedia.org/wiki/Nonogram">Nonogram</a>,一种类似于数独的游戏，每一行每一列的数字来填格子，行列都符合的图案就是要求的答案</p><p><strong>代码</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imageis_solved <span class="token operator">=</span> <span class="token boolean">False</span>ans_points <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># n = 9</span><span class="token comment" spellcheck="true"># horizontal = [[2, 1, 2], [1, 3, 1], [5], [7], [9], [3], [2, 3, 2], [2, 3, 2],[2, 3, 2]]</span><span class="token comment" spellcheck="true"># vertical = [[2, 1, 3], [1, 2, 3], [3], [8], [9], [8], [3], [1, 2, 3],[2, 1, 3]]</span>n <span class="token operator">=</span> <span class="token number">32</span>horizontal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>vertical <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">print_points</span><span class="token punctuation">(</span>points<span class="token punctuation">:</span> np<span class="token punctuation">.</span>array<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print array in console</span>    <span class="token keyword">if</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ERROR\n"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> points<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'█'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> points<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'■'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> points<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> points<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'×'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">horizontal_put</span><span class="token punctuation">(</span>points<span class="token punctuation">:</span> np<span class="token punctuation">.</span>array<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">,</span> y0<span class="token punctuation">:</span> int<span class="token punctuation">,</span> y1<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> np<span class="token punctuation">.</span>array<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># the next position of current array is already occupied</span>    <span class="token keyword">if</span> y1 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> n <span class="token operator">and</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y0<span class="token punctuation">:</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">:</span>        points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span>        <span class="token keyword">return</span> points    <span class="token comment" spellcheck="true"># some positions of current array are inaccessible</span>    <span class="token keyword">if</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y0<span class="token punctuation">:</span>y1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> <span class="token punctuation">(</span>y1 <span class="token operator">&lt;</span> n <span class="token operator">and</span> points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>        <span class="token keyword">return</span> points    <span class="token comment" spellcheck="true"># set all positions of current array occupied</span>    points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y0<span class="token punctuation">:</span>y1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># set the next position of current array inaccessible</span>    <span class="token keyword">if</span> y1 <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">return</span> points<span class="token keyword">def</span> <span class="token function">vertical_put</span><span class="token punctuation">(</span>points<span class="token punctuation">:</span> np<span class="token punctuation">.</span>array<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> np<span class="token punctuation">.</span>array<span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># this column is already finished</span>        <span class="token keyword">if</span> points<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> nums <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>vertical<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># find next begin position of this column</span>            <span class="token keyword">while</span> x <span class="token operator">&lt;</span> n <span class="token operator">and</span> points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                x <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># at the end of this column</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> n<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token comment" spellcheck="true"># goto the end position of current array</span>            <span class="token keyword">if</span> points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                x <span class="token operator">+=</span> nums            <span class="token comment" spellcheck="true"># not enough positions to put current array</span>            <span class="token keyword">elif</span> points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> x <span class="token operator">+</span> nums <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> n<span class="token punctuation">:</span>                points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>                <span class="token keyword">return</span> points            <span class="token comment" spellcheck="true"># set positions of current array occupied</span>            <span class="token keyword">elif</span> points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>                points<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>x <span class="token operator">+</span> nums<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                <span class="token comment" spellcheck="true"># set the next position of current array inaccessible</span>                <span class="token keyword">if</span> x <span class="token operator">+</span> nums <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>                    points<span class="token punctuation">[</span>x <span class="token operator">+</span> nums<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>                <span class="token comment" spellcheck="true"># this is the last array and set all rest positions inaccessible</span>                <span class="token keyword">if</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>vertical<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">and</span> x <span class="token operator">+</span> nums <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>                    points<span class="token punctuation">[</span>x <span class="token operator">+</span> nums<span class="token punctuation">:</span><span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>                <span class="token keyword">break</span>    <span class="token keyword">return</span> points<span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>points<span class="token punctuation">:</span> np<span class="token punctuation">.</span>array<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">,</span> y<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>    <span class="token keyword">global</span> is_solved<span class="token punctuation">,</span> ans_points    <span class="token comment" spellcheck="true"># solution is found</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> n<span class="token punctuation">:</span>        print_points<span class="token punctuation">(</span>points<span class="token punctuation">)</span>        ans_points <span class="token operator">=</span> points<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        is_solved <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span>    <span class="token comment" spellcheck="true"># the last position of this row can start this array</span>    j_end <span class="token operator">=</span> n <span class="token operator">-</span> sum<span class="token punctuation">(</span>horizontal<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>horizontal<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>y<span class="token punctuation">,</span> j_end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># the previous position of current array is occupied</span>        <span class="token keyword">if</span> j <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">and</span> points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># create a copy</span>        j1 <span class="token operator">=</span> j <span class="token operator">+</span> horizontal<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>        new_points <span class="token operator">=</span> points<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># try to put current array into positions row[x] column[j-j1]</span>        new_points <span class="token operator">=</span> horizontal_put<span class="token punctuation">(</span>new_points<span class="token punctuation">,</span> x<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># error code -2</span>        <span class="token keyword">if</span> new_points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment" spellcheck="true"># error code -3</span>        <span class="token keyword">elif</span> new_points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># check and put arrays in columns</span>        new_points <span class="token operator">=</span> vertical_put<span class="token punctuation">(</span>new_points<span class="token punctuation">)</span>        <span class="token keyword">if</span> new_points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment" spellcheck="true"># this is the last array of this row, but some rest positions of this row are still occupied</span>        <span class="token keyword">if</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>                horizontal<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">and</span> j1 <span class="token operator">&lt;</span> n <span class="token operator">and</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>new_points<span class="token punctuation">[</span>x<span class="token punctuation">,</span> j1<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment" spellcheck="true"># recur to next</span>        <span class="token keyword">if</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>horizontal<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            search<span class="token punctuation">(</span>new_points<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            search<span class="token punctuation">(</span>new_points<span class="token punctuation">,</span> x<span class="token punctuation">,</span> j1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># solution is already found</span>        <span class="token keyword">if</span> is_solved<span class="token punctuation">:</span>            <span class="token keyword">return</span>search<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>ans_points<span class="token punctuation">[</span>ans_points <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span>ans_points<span class="token punctuation">[</span>ans_points <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>ans_points<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">)</span>im<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># im.save("level_32/python.jpg")</span></code></pre><p><strong>Output</strong><br><a href="http://www.pythonchallenge.com/pc/rock/warmup.txt">warmup.txt</a></p><pre><code>██×.█×.███×.███××█×.█████××.███████×█████████×××███×××██×███×████×███×████×███×██</code></pre><p><a href="http://www.pythonchallenge.com/pc/rock/up.txt">up.text</a></p><pre><code>...................███×██×........................████████×......................██████████×.....................███×××█××█×.....................█████×██×█×.....................█████×██×█×....................████××.█×.█×.................███████████████×..............███████████████████×...........██████×██████████████×.........██████×..×.█×██████████........███████×..██×.█×████████........██████×█×█×██××.█×█×█××█........█████×.×█×.████××.×.×..█........█████×████×█×████×█×█×█×........█████×××█×█×.×████████××........×█████×██××█×.×████████×.........██████××█××██×××█×███××.........×██████×███××██××.××█××..........×██████×××█×××█████×××█×.........×██████×.███×××××××××██×.........×███████×××██×.×××××███×.███×..██████████×████××××××█████████×████████████××××█×××××██████████████████████×...█××××××█████████████████████×████×××××××█××█████████████████××××█××××××××██××████████×█████×....█×××××××××××××██×××××██××××.████××××××××××××××××█████××██×█×××█××××××××××××××××××××××××××█████××××××××</code></pre><p>输入“python.html”到下一页面，直接搜索下面那段话 “Free” as in “Free speech”, not as in “free…<br>了解到“Free as in beer”指免费软件，“Free as in speech”指开源软件，答案就是“beer”。</p><h2 id="level-33-remove-light-2020-12-25"><a href="#level-33-remove-light-2020-12-25" class="headerlink" title="level_33_remove light_2020.12.25"></a>level_33_remove light_2020.12.25</h2><p>今天圣诞节嘞，圣诞快乐🎄！然而并没有收到礼物/(ㄒoㄒ)/~~<br><strong>🔑Solution</strong><br>不明白为什么32关那么难,33关又正常了…小小吐槽一下<br>这一关就是根据网页提示得到beer2.png图片,保存到本地,打开,发现图片是138*138的正方形<br>之前的网页源代码提示,”如果你被光蒙蔽了双眼，用它的力量移除它的力量。然后在灰烬中，另一个真相将向你光明正大地展示。”额,这句话真有哲理(●’◡’●)<br>总之,是之后用im.getdata()查看图片的灰度值,找到最大的两个数c0,c1,把等于c0,c1的数都变为255(白色),把小于的数都变成0(黑色),然后再删除等于c0和c1的数,得到的列表长度依然是一个平方数,之后需要重复操作33次,得到33张图片,发现33张图片里几张被方框括起来了,按顺序拼接,于是答案就为”gremlins”<br><strong>学习</strong></p><ul><li>最后一关的输出我用了红色和绿色来美化输出哦,还回想起了<code>center(10,'*')</code></li><li>numpy可能要学习一下<ul><li> <code>data_np = np.array(data_list, dtype=np.uint8).reshape(n, n)</code>把列表搞成n*n的矩阵</li><li> <code>data_np[data_np &gt;= max_2] = 255</code>可以直接把矩阵里大于某个数的值重新赋值</li></ul></li></ul><p><strong>💻Code</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> math<span class="token keyword">import</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> heapq<span class="token keyword">def</span> <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建文件夹函数</span>    folder <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> folder<span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"---new folder {path} created---"</span><span class="token punctuation">)</span>mkdir<span class="token punctuation">(</span><span class="token string">'output/level_33'</span><span class="token punctuation">)</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'assets/beer2.png'</span><span class="token punctuation">)</span>data_list <span class="token operator">=</span> list<span class="token punctuation">(</span>im<span class="token punctuation">.</span>getdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'\033[31m开始处理第{i+1}张图片\033[0m'</span><span class="token punctuation">)</span>    max_number <span class="token operator">=</span> heapq<span class="token punctuation">.</span>nlargest<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> set<span class="token punctuation">(</span>data_list<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"data中最大的两个数：{max_number}"</span><span class="token punctuation">)</span>    max_2 <span class="token operator">=</span> max_number<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>    n <span class="token operator">=</span> int<span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'列表总长度：{length}'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'图片大小:{n}*{n}'</span><span class="token punctuation">)</span>    data_np <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data_list<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    data_np<span class="token punctuation">[</span>data_np <span class="token operator">>=</span> max_2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span>    data_np<span class="token punctuation">[</span>data_np <span class="token operator">&lt;</span> max_2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    data_list <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> data_list <span class="token keyword">if</span> x <span class="token operator">&lt;</span> max_2<span class="token punctuation">]</span>    im1 <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>    im <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>data_np<span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">)</span>    im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>f<span class="token string">'output/level_33/{i+1}.png'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'\033[32m第{i+1}张图片成功保存至本地\033[0m'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>Output</strong><br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201225110813-2020-12-25.png" alt="生成的33张图"></p><p>撒花完结!!!!<br><img src="https://cdn.jsdelivr.net/gh/Achuan-2/PicBed/assets/20201225111138-2020-12-25.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础练习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
